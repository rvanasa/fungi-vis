Bundle { input: "open crate :: examples :: pure_list_nat ; ret 0", program: Der { ctx: Empty, dir: Synth, term: UseAll(UseAllModule { path: "crate::examples::pure_list_nat", module: Module { path: "fungi_lang::examples::pure_list_nat", body: "# [doc = r\" Lists of natural numbers\"] type List =\n(rec list . (+ Unit + (x Nat x list))) ; #\n[doc = r\" Optional natural numbers\"] type OpNat = (+ Unit + Nat) ; fn\nnat_is_zero : (Thk [0] 0 Nat -> 0 F Bool) =\n{ unsafe (1) trapdoor :: nat_is_zero } fn nat_is_odd :\n(Thk [0] 0 Nat -> 0 F Bool) = { unsafe (1) trapdoor :: nat_is_odd } fn nat_sub\n: (Thk [0] 0 Nat -> 0 Nat -> 0 F Nat) = { unsafe (2) trapdoor :: nat_sub } fn\nnil : (Thk [0] 0 F List) = { ret roll inj1 () } fn cons :\n(Thk [0] 0 Nat -> 0 List -> 0 F List) = { # h . # t . ret roll inj2 (h, t) }\nfn gen : (Thk [0] 0 Nat -> 0 F List) =\n{\n    # n . if { { force nat_is_zero } n } { force nil } else\n    {\n        let m = { { force nat_sub } n 1 } let l = { { force gen } m }\n        { { force cons } m l }\n    }\n} fn map : (Thk [0] 0 (Thk [0] 0 Nat -> 0 F Nat) -> 0 List -> 0 F List) =\n{\n    # f . # l . unroll match l\n    {\n        _u => { ret roll inj1 () } c =>\n        {\n            let (h, t) = { ret c } let h2 = { { force f } h } let t2 =\n            { { force map } f t } { { force cons } h2 t2 }\n        }\n    }\n} fn filter : (Thk [0] 0 (Thk [0] 0 Nat -> 0 F Bool) -> 0 List -> 0 F List) =\n{\n    # f . # l . unroll match l\n    {\n        _u => { ret roll inj1 () } c =>\n        {\n            let (h, t) = { ret c } let t2 = { { force filter } f t } if\n            { { force f } h } { { { force cons } h t2 } } else { ret t2 }\n        }\n    }\n} fn map_filter :\n(Thk [0] 0 (Thk [0] 0 Nat -> 0 F OpNat) -> 0 List -> 0 F List) =\n{\n    # f . # l . unroll match l\n    {\n        _u => { ret roll inj1 () } c =>\n        {\n            let (h, t) = { ret c } let t2 = { { force map_filter } f t } let\n            oh2 = { { force f } h } match oh2\n            { _u => { ret t2 } h2 => { { force cons } h t2 } }\n        }\n    }\n} fn reverse : (Thk [0] 0 List -> 0 List -> 0 F List) =\n{\n    # l . # r . unroll match l\n    {\n        _u => { ret r } c =>\n        {\n            let (h, t) = { ret c } let r2 = { { force cons } h r }\n            { { force reverse } t r2 }\n        }\n    }\n} fn fold :\n(Thk [0] 0 List -> 0 Nat -> 0 (Thk [0] 0 Nat -> 0 Nat -> 0 F Nat) -> 0 F Nat)\n=\n{\n    # l . # a . # f . unroll match l\n    {\n        _u => { ret a } c =>\n        {\n            let (h, t) = { ret c } let a2 = { { force f } a h }\n            { { force fold } t a2 f }\n        }\n    }\n}", decls: Doc("r\" Lists of natural numbers\"", Type("List", Rec("list", Sum(Unit, Prod(Ident("Nat"), Var("list")))), Doc("r\" Optional natural numbers\"", Type("OpNat", Sum(Unit, Ident("Nat")), Fn("nat_is_zero", Thk(Empty, Cons(Arrow(Ident("Nat"), Cons(Lift(Ident("Bool")), WR(Empty, Empty))), WR(Empty, Empty))), HostFn(HostEvalFn("trapdoor::nat_is_zero")), Fn("nat_is_odd", Thk(Empty, Cons(Arrow(Ident("Nat"), Cons(Lift(Ident("Bool")), WR(Empty, Empty))), WR(Empty, Empty))), HostFn(HostEvalFn("trapdoor::nat_is_odd")), Fn("nat_sub", Thk(Empty, Cons(Arrow(Ident("Nat"), Cons(Arrow(Ident("Nat"), Cons(Lift(Ident("Nat")), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty))), HostFn(HostEvalFn("trapdoor::nat_sub")), Fn("nil", Thk(Empty, Cons(Lift(Ident("List")), WR(Empty, Empty))), Ret(Roll(Inj1(Unit))), Fn("cons", Thk(Empty, Cons(Arrow(Ident("Nat"), Cons(Arrow(Ident("List"), Cons(Lift(Ident("List")), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty))), Lam("h", Lam("t", Ret(Roll(Inj2(Pair(Var("h"), Var("t"))))))), Fn("gen", Thk(Empty, Cons(Arrow(Ident("Nat"), Cons(Lift(Ident("List")), WR(Empty, Empty))), WR(Empty, Empty))), Lam("n", Let("sugar_if_scrutinee", App(Force(Var("nat_is_zero")), Var("n")), IfThenElse(Var("sugar_if_scrutinee"), Force(Var("nil")), Let("m", App(App(Force(Var("nat_sub")), Var("n")), Nat(1)), Let("l", App(Force(Var("gen")), Var("m")), App(App(Force(Var("cons")), Var("m")), Var("l"))))))), Fn("map", Thk(Empty, Cons(Arrow(Thk(Empty, Cons(Arrow(Ident("Nat"), Cons(Lift(Ident("Nat")), WR(Empty, Empty))), WR(Empty, Empty))), Cons(Arrow(Ident("List"), Cons(Lift(Ident("List")), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty))), Lam("f", Lam("l", Unroll(Var("l"), "sugar_match_unroll", Case(Var("sugar_match_unroll"), "_u", Ret(Roll(Inj1(Unit))), "c", Let("let_split_sugar", Ret(Var("c")), Split(Var("let_split_sugar"), "h", "t", Let("h2", App(Force(Var("f")), Var("h")), Let("t2", App(App(Force(Var("map")), Var("f")), Var("t")), App(App(Force(Var("cons")), Var("h2")), Var("t2")))))))))), Fn("filter", Thk(Empty, Cons(Arrow(Thk(Empty, Cons(Arrow(Ident("Nat"), Cons(Lift(Ident("Bool")), WR(Empty, Empty))), WR(Empty, Empty))), Cons(Arrow(Ident("List"), Cons(Lift(Ident("List")), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty))), Lam("f", Lam("l", Unroll(Var("l"), "sugar_match_unroll", Case(Var("sugar_match_unroll"), "_u", Ret(Roll(Inj1(Unit))), "c", Let("let_split_sugar", Ret(Var("c")), Split(Var("let_split_sugar"), "h", "t", Let("t2", App(App(Force(Var("filter")), Var("f")), Var("t")), Let("sugar_if_scrutinee", App(Force(Var("f")), Var("h")), IfThenElse(Var("sugar_if_scrutinee"), App(App(Force(Var("cons")), Var("h")), Var("t2")), Ret(Var("t2"))))))))))), Fn("map_filter", Thk(Empty, Cons(Arrow(Thk(Empty, Cons(Arrow(Ident("Nat"), Cons(Lift(Ident("OpNat")), WR(Empty, Empty))), WR(Empty, Empty))), Cons(Arrow(Ident("List"), Cons(Lift(Ident("List")), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty))), Lam("f", Lam("l", Unroll(Var("l"), "sugar_match_unroll", Case(Var("sugar_match_unroll"), "_u", Ret(Roll(Inj1(Unit))), "c", Let("let_split_sugar", Ret(Var("c")), Split(Var("let_split_sugar"), "h", "t", Let("t2", App(App(Force(Var("map_filter")), Var("f")), Var("t")), Let("oh2", App(Force(Var("f")), Var("h")), Case(Var("oh2"), "_u", Ret(Var("t2")), "h2", App(App(Force(Var("cons")), Var("h")), Var("t2"))))))))))), Fn("reverse", Thk(Empty, Cons(Arrow(Ident("List"), Cons(Arrow(Ident("List"), Cons(Lift(Ident("List")), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty))), Lam("l", Lam("r", Unroll(Var("l"), "sugar_match_unroll", Case(Var("sugar_match_unroll"), "_u", Ret(Var("r")), "c", Let("let_split_sugar", Ret(Var("c")), Split(Var("let_split_sugar"), "h", "t", Let("r2", App(App(Force(Var("cons")), Var("h")), Var("r")), App(App(Force(Var("reverse")), Var("t")), Var("r2"))))))))), Fn("fold", Thk(Empty, Cons(Arrow(Ident("List"), Cons(Arrow(Ident("Nat"), Cons(Arrow(Thk(Empty, Cons(Arrow(Ident("Nat"), Cons(Arrow(Ident("Nat"), Cons(Lift(Ident("Nat")), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty))), Cons(Lift(Ident("Nat")), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty))), Lam("l", Lam("a", Lam("f", Unroll(Var("l"), "sugar_match_unroll", Case(Var("sugar_match_unroll"), "_u", Ret(Var("a")), "c", Let("let_split_sugar", Ret(Var("c")), Split(Var("let_split_sugar"), "h", "t", Let("a2", App(App(Force(Var("f")), Var("a")), Var("h")), App(App(App(Force(Var("fold")), Var("t")), Var("a2")), Var("f")))))))))), End))))))))))))))) } }, Ret(Nat(0))), clas: Ok(Cons(Lift(Prim(Nat)), WR(Empty, Empty))), rule: UseAll(UseAllModuleDer { ast: UseAllModule { path: "crate::examples::pure_list_nat", module: Module { path: "fungi_lang::examples::pure_list_nat", body: "# [doc = r\" Lists of natural numbers\"] type List =\n(rec list . (+ Unit + (x Nat x list))) ; #\n[doc = r\" Optional natural numbers\"] type OpNat = (+ Unit + Nat) ; fn\nnat_is_zero : (Thk [0] 0 Nat -> 0 F Bool) =\n{ unsafe (1) trapdoor :: nat_is_zero } fn nat_is_odd :\n(Thk [0] 0 Nat -> 0 F Bool) = { unsafe (1) trapdoor :: nat_is_odd } fn nat_sub\n: (Thk [0] 0 Nat -> 0 Nat -> 0 F Nat) = { unsafe (2) trapdoor :: nat_sub } fn\nnil : (Thk [0] 0 F List) = { ret roll inj1 () } fn cons :\n(Thk [0] 0 Nat -> 0 List -> 0 F List) = { # h . # t . ret roll inj2 (h, t) }\nfn gen : (Thk [0] 0 Nat -> 0 F List) =\n{\n    # n . if { { force nat_is_zero } n } { force nil } else\n    {\n        let m = { { force nat_sub } n 1 } let l = { { force gen } m }\n        { { force cons } m l }\n    }\n} fn map : (Thk [0] 0 (Thk [0] 0 Nat -> 0 F Nat) -> 0 List -> 0 F List) =\n{\n    # f . # l . unroll match l\n    {\n        _u => { ret roll inj1 () } c =>\n        {\n            let (h, t) = { ret c } let h2 = { { force f } h } let t2 =\n            { { force map } f t } { { force cons } h2 t2 }\n        }\n    }\n} fn filter : (Thk [0] 0 (Thk [0] 0 Nat -> 0 F Bool) -> 0 List -> 0 F List) =\n{\n    # f . # l . unroll match l\n    {\n        _u => { ret roll inj1 () } c =>\n        {\n            let (h, t) = { ret c } let t2 = { { force filter } f t } if\n            { { force f } h } { { { force cons } h t2 } } else { ret t2 }\n        }\n    }\n} fn map_filter :\n(Thk [0] 0 (Thk [0] 0 Nat -> 0 F OpNat) -> 0 List -> 0 F List) =\n{\n    # f . # l . unroll match l\n    {\n        _u => { ret roll inj1 () } c =>\n        {\n            let (h, t) = { ret c } let t2 = { { force map_filter } f t } let\n            oh2 = { { force f } h } match oh2\n            { _u => { ret t2 } h2 => { { force cons } h t2 } }\n        }\n    }\n} fn reverse : (Thk [0] 0 List -> 0 List -> 0 F List) =\n{\n    # l . # r . unroll match l\n    {\n        _u => { ret r } c =>\n        {\n            let (h, t) = { ret c } let r2 = { { force cons } h r }\n            { { force reverse } t r2 }\n        }\n    }\n} fn fold :\n(Thk [0] 0 List -> 0 Nat -> 0 (Thk [0] 0 Nat -> 0 Nat -> 0 F Nat) -> 0 F Nat)\n=\n{\n    # l . # a . # f . unroll match l\n    {\n        _u => { ret a } c =>\n        {\n            let (h, t) = { ret c } let a2 = { { force f } a h }\n            { { force fold } t a2 f }\n        }\n    }\n}", decls: Doc("r\" Lists of natural numbers\"", Type("List", Rec("list", Sum(Unit, Prod(Ident("Nat"), Var("list")))), Doc("r\" Optional natural numbers\"", Type("OpNat", Sum(Unit, Ident("Nat")), Fn("nat_is_zero", Thk(Empty, Cons(Arrow(Ident("Nat"), Cons(Lift(Ident("Bool")), WR(Empty, Empty))), WR(Empty, Empty))), HostFn(HostEvalFn("trapdoor::nat_is_zero")), Fn("nat_is_odd", Thk(Empty, Cons(Arrow(Ident("Nat"), Cons(Lift(Ident("Bool")), WR(Empty, Empty))), WR(Empty, Empty))), HostFn(HostEvalFn("trapdoor::nat_is_odd")), Fn("nat_sub", Thk(Empty, Cons(Arrow(Ident("Nat"), Cons(Arrow(Ident("Nat"), Cons(Lift(Ident("Nat")), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty))), HostFn(HostEvalFn("trapdoor::nat_sub")), Fn("nil", Thk(Empty, Cons(Lift(Ident("List")), WR(Empty, Empty))), Ret(Roll(Inj1(Unit))), Fn("cons", Thk(Empty, Cons(Arrow(Ident("Nat"), Cons(Arrow(Ident("List"), Cons(Lift(Ident("List")), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty))), Lam("h", Lam("t", Ret(Roll(Inj2(Pair(Var("h"), Var("t"))))))), Fn("gen", Thk(Empty, Cons(Arrow(Ident("Nat"), Cons(Lift(Ident("List")), WR(Empty, Empty))), WR(Empty, Empty))), Lam("n", Let("sugar_if_scrutinee", App(Force(Var("nat_is_zero")), Var("n")), IfThenElse(Var("sugar_if_scrutinee"), Force(Var("nil")), Let("m", App(App(Force(Var("nat_sub")), Var("n")), Nat(1)), Let("l", App(Force(Var("gen")), Var("m")), App(App(Force(Var("cons")), Var("m")), Var("l"))))))), Fn("map", Thk(Empty, Cons(Arrow(Thk(Empty, Cons(Arrow(Ident("Nat"), Cons(Lift(Ident("Nat")), WR(Empty, Empty))), WR(Empty, Empty))), Cons(Arrow(Ident("List"), Cons(Lift(Ident("List")), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty))), Lam("f", Lam("l", Unroll(Var("l"), "sugar_match_unroll", Case(Var("sugar_match_unroll"), "_u", Ret(Roll(Inj1(Unit))), "c", Let("let_split_sugar", Ret(Var("c")), Split(Var("let_split_sugar"), "h", "t", Let("h2", App(Force(Var("f")), Var("h")), Let("t2", App(App(Force(Var("map")), Var("f")), Var("t")), App(App(Force(Var("cons")), Var("h2")), Var("t2")))))))))), Fn("filter", Thk(Empty, Cons(Arrow(Thk(Empty, Cons(Arrow(Ident("Nat"), Cons(Lift(Ident("Bool")), WR(Empty, Empty))), WR(Empty, Empty))), Cons(Arrow(Ident("List"), Cons(Lift(Ident("List")), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty))), Lam("f", Lam("l", Unroll(Var("l"), "sugar_match_unroll", Case(Var("sugar_match_unroll"), "_u", Ret(Roll(Inj1(Unit))), "c", Let("let_split_sugar", Ret(Var("c")), Split(Var("let_split_sugar"), "h", "t", Let("t2", App(App(Force(Var("filter")), Var("f")), Var("t")), Let("sugar_if_scrutinee", App(Force(Var("f")), Var("h")), IfThenElse(Var("sugar_if_scrutinee"), App(App(Force(Var("cons")), Var("h")), Var("t2")), Ret(Var("t2"))))))))))), Fn("map_filter", Thk(Empty, Cons(Arrow(Thk(Empty, Cons(Arrow(Ident("Nat"), Cons(Lift(Ident("OpNat")), WR(Empty, Empty))), WR(Empty, Empty))), Cons(Arrow(Ident("List"), Cons(Lift(Ident("List")), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty))), Lam("f", Lam("l", Unroll(Var("l"), "sugar_match_unroll", Case(Var("sugar_match_unroll"), "_u", Ret(Roll(Inj1(Unit))), "c", Let("let_split_sugar", Ret(Var("c")), Split(Var("let_split_sugar"), "h", "t", Let("t2", App(App(Force(Var("map_filter")), Var("f")), Var("t")), Let("oh2", App(Force(Var("f")), Var("h")), Case(Var("oh2"), "_u", Ret(Var("t2")), "h2", App(App(Force(Var("cons")), Var("h")), Var("t2"))))))))))), Fn("reverse", Thk(Empty, Cons(Arrow(Ident("List"), Cons(Arrow(Ident("List"), Cons(Lift(Ident("List")), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty))), Lam("l", Lam("r", Unroll(Var("l"), "sugar_match_unroll", Case(Var("sugar_match_unroll"), "_u", Ret(Var("r")), "c", Let("let_split_sugar", Ret(Var("c")), Split(Var("let_split_sugar"), "h", "t", Let("r2", App(App(Force(Var("cons")), Var("h")), Var("r")), App(App(Force(Var("reverse")), Var("t")), Var("r2"))))))))), Fn("fold", Thk(Empty, Cons(Arrow(Ident("List"), Cons(Arrow(Ident("Nat"), Cons(Arrow(Thk(Empty, Cons(Arrow(Ident("Nat"), Cons(Arrow(Ident("Nat"), Cons(Lift(Ident("Nat")), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty))), Cons(Lift(Ident("Nat")), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty))), Lam("l", Lam("a", Lam("f", Unroll(Var("l"), "sugar_match_unroll", Case(Var("sugar_match_unroll"), "_u", Ret(Var("a")), "c", Let("let_split_sugar", Ret(Var("c")), Split(Var("let_split_sugar"), "h", "t", Let("a2", App(App(Force(Var("f")), Var("a")), Var("h")), App(App(App(Force(Var("fold")), Var("t")), Var("a2")), Var("f")))))))))), End))))))))))))))) } }, der: ModuleDer { ast: Module { path: "fungi_lang::examples::pure_list_nat", body: "# [doc = r\" Lists of natural numbers\"] type List =\n(rec list . (+ Unit + (x Nat x list))) ; #\n[doc = r\" Optional natural numbers\"] type OpNat = (+ Unit + Nat) ; fn\nnat_is_zero : (Thk [0] 0 Nat -> 0 F Bool) =\n{ unsafe (1) trapdoor :: nat_is_zero } fn nat_is_odd :\n(Thk [0] 0 Nat -> 0 F Bool) = { unsafe (1) trapdoor :: nat_is_odd } fn nat_sub\n: (Thk [0] 0 Nat -> 0 Nat -> 0 F Nat) = { unsafe (2) trapdoor :: nat_sub } fn\nnil : (Thk [0] 0 F List) = { ret roll inj1 () } fn cons :\n(Thk [0] 0 Nat -> 0 List -> 0 F List) = { # h . # t . ret roll inj2 (h, t) }\nfn gen : (Thk [0] 0 Nat -> 0 F List) =\n{\n    # n . if { { force nat_is_zero } n } { force nil } else\n    {\n        let m = { { force nat_sub } n 1 } let l = { { force gen } m }\n        { { force cons } m l }\n    }\n} fn map : (Thk [0] 0 (Thk [0] 0 Nat -> 0 F Nat) -> 0 List -> 0 F List) =\n{\n    # f . # l . unroll match l\n    {\n        _u => { ret roll inj1 () } c =>\n        {\n            let (h, t) = { ret c } let h2 = { { force f } h } let t2 =\n            { { force map } f t } { { force cons } h2 t2 }\n        }\n    }\n} fn filter : (Thk [0] 0 (Thk [0] 0 Nat -> 0 F Bool) -> 0 List -> 0 F List) =\n{\n    # f . # l . unroll match l\n    {\n        _u => { ret roll inj1 () } c =>\n        {\n            let (h, t) = { ret c } let t2 = { { force filter } f t } if\n            { { force f } h } { { { force cons } h t2 } } else { ret t2 }\n        }\n    }\n} fn map_filter :\n(Thk [0] 0 (Thk [0] 0 Nat -> 0 F OpNat) -> 0 List -> 0 F List) =\n{\n    # f . # l . unroll match l\n    {\n        _u => { ret roll inj1 () } c =>\n        {\n            let (h, t) = { ret c } let t2 = { { force map_filter } f t } let\n            oh2 = { { force f } h } match oh2\n            { _u => { ret t2 } h2 => { { force cons } h t2 } }\n        }\n    }\n} fn reverse : (Thk [0] 0 List -> 0 List -> 0 F List) =\n{\n    # l . # r . unroll match l\n    {\n        _u => { ret r } c =>\n        {\n            let (h, t) = { ret c } let r2 = { { force cons } h r }\n            { { force reverse } t r2 }\n        }\n    }\n} fn fold :\n(Thk [0] 0 List -> 0 Nat -> 0 (Thk [0] 0 Nat -> 0 Nat -> 0 F Nat) -> 0 F Nat)\n=\n{\n    # l . # a . # f . unroll match l\n    {\n        _u => { ret a } c =>\n        {\n            let (h, t) = { ret c } let a2 = { { force f } a h }\n            { { force fold } t a2 f }\n        }\n    }\n}", decls: Doc("r\" Lists of natural numbers\"", Type("List", Rec("list", Sum(Unit, Prod(Ident("Nat"), Var("list")))), Doc("r\" Optional natural numbers\"", Type("OpNat", Sum(Unit, Ident("Nat")), Fn("nat_is_zero", Thk(Empty, Cons(Arrow(Ident("Nat"), Cons(Lift(Ident("Bool")), WR(Empty, Empty))), WR(Empty, Empty))), HostFn(HostEvalFn("trapdoor::nat_is_zero")), Fn("nat_is_odd", Thk(Empty, Cons(Arrow(Ident("Nat"), Cons(Lift(Ident("Bool")), WR(Empty, Empty))), WR(Empty, Empty))), HostFn(HostEvalFn("trapdoor::nat_is_odd")), Fn("nat_sub", Thk(Empty, Cons(Arrow(Ident("Nat"), Cons(Arrow(Ident("Nat"), Cons(Lift(Ident("Nat")), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty))), HostFn(HostEvalFn("trapdoor::nat_sub")), Fn("nil", Thk(Empty, Cons(Lift(Ident("List")), WR(Empty, Empty))), Ret(Roll(Inj1(Unit))), Fn("cons", Thk(Empty, Cons(Arrow(Ident("Nat"), Cons(Arrow(Ident("List"), Cons(Lift(Ident("List")), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty))), Lam("h", Lam("t", Ret(Roll(Inj2(Pair(Var("h"), Var("t"))))))), Fn("gen", Thk(Empty, Cons(Arrow(Ident("Nat"), Cons(Lift(Ident("List")), WR(Empty, Empty))), WR(Empty, Empty))), Lam("n", Let("sugar_if_scrutinee", App(Force(Var("nat_is_zero")), Var("n")), IfThenElse(Var("sugar_if_scrutinee"), Force(Var("nil")), Let("m", App(App(Force(Var("nat_sub")), Var("n")), Nat(1)), Let("l", App(Force(Var("gen")), Var("m")), App(App(Force(Var("cons")), Var("m")), Var("l"))))))), Fn("map", Thk(Empty, Cons(Arrow(Thk(Empty, Cons(Arrow(Ident("Nat"), Cons(Lift(Ident("Nat")), WR(Empty, Empty))), WR(Empty, Empty))), Cons(Arrow(Ident("List"), Cons(Lift(Ident("List")), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty))), Lam("f", Lam("l", Unroll(Var("l"), "sugar_match_unroll", Case(Var("sugar_match_unroll"), "_u", Ret(Roll(Inj1(Unit))), "c", Let("let_split_sugar", Ret(Var("c")), Split(Var("let_split_sugar"), "h", "t", Let("h2", App(Force(Var("f")), Var("h")), Let("t2", App(App(Force(Var("map")), Var("f")), Var("t")), App(App(Force(Var("cons")), Var("h2")), Var("t2")))))))))), Fn("filter", Thk(Empty, Cons(Arrow(Thk(Empty, Cons(Arrow(Ident("Nat"), Cons(Lift(Ident("Bool")), WR(Empty, Empty))), WR(Empty, Empty))), Cons(Arrow(Ident("List"), Cons(Lift(Ident("List")), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty))), Lam("f", Lam("l", Unroll(Var("l"), "sugar_match_unroll", Case(Var("sugar_match_unroll"), "_u", Ret(Roll(Inj1(Unit))), "c", Let("let_split_sugar", Ret(Var("c")), Split(Var("let_split_sugar"), "h", "t", Let("t2", App(App(Force(Var("filter")), Var("f")), Var("t")), Let("sugar_if_scrutinee", App(Force(Var("f")), Var("h")), IfThenElse(Var("sugar_if_scrutinee"), App(App(Force(Var("cons")), Var("h")), Var("t2")), Ret(Var("t2"))))))))))), Fn("map_filter", Thk(Empty, Cons(Arrow(Thk(Empty, Cons(Arrow(Ident("Nat"), Cons(Lift(Ident("OpNat")), WR(Empty, Empty))), WR(Empty, Empty))), Cons(Arrow(Ident("List"), Cons(Lift(Ident("List")), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty))), Lam("f", Lam("l", Unroll(Var("l"), "sugar_match_unroll", Case(Var("sugar_match_unroll"), "_u", Ret(Roll(Inj1(Unit))), "c", Let("let_split_sugar", Ret(Var("c")), Split(Var("let_split_sugar"), "h", "t", Let("t2", App(App(Force(Var("map_filter")), Var("f")), Var("t")), Let("oh2", App(Force(Var("f")), Var("h")), Case(Var("oh2"), "_u", Ret(Var("t2")), "h2", App(App(Force(Var("cons")), Var("h")), Var("t2"))))))))))), Fn("reverse", Thk(Empty, Cons(Arrow(Ident("List"), Cons(Arrow(Ident("List"), Cons(Lift(Ident("List")), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty))), Lam("l", Lam("r", Unroll(Var("l"), "sugar_match_unroll", Case(Var("sugar_match_unroll"), "_u", Ret(Var("r")), "c", Let("let_split_sugar", Ret(Var("c")), Split(Var("let_split_sugar"), "h", "t", Let("r2", App(App(Force(Var("cons")), Var("h")), Var("r")), App(App(Force(Var("reverse")), Var("t")), Var("r2"))))))))), Fn("fold", Thk(Empty, Cons(Arrow(Ident("List"), Cons(Arrow(Ident("Nat"), Cons(Arrow(Thk(Empty, Cons(Arrow(Ident("Nat"), Cons(Arrow(Ident("Nat"), Cons(Lift(Ident("Nat")), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty))), Cons(Lift(Ident("Nat")), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty))), Lam("l", Lam("a", Lam("f", Unroll(Var("l"), "sugar_match_unroll", Case(Var("sugar_match_unroll"), "_u", Ret(Var("a")), "c", Let("let_split_sugar", Ret(Var("c")), Split(Var("let_split_sugar"), "h", "t", Let("a2", App(App(Force(Var("f")), Var("a")), Var("h")), App(App(App(Force(Var("fold")), Var("t")), Var("a2")), Var("f")))))))))), End))))))))))))))) }, tds: [Bind(ItemDer { doc: Some("r\" Lists of natural numbers\""), qual: Type, var: "List", der: Der { ctx: Empty, dir: Synth, term: (), clas: Ok(Kind(NoParse("TODO-XXX-bitype.rs"))), rule: Type("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))), vis: DerVis { tmfam: "Module", local_err: false } } }), Bind(ItemDer { doc: Some("r\" Optional natural numbers\""), qual: Type, var: "OpNat", der: Der { ctx: Def(Empty, "List", Type(Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), dir: Synth, term: (), clas: Ok(Kind(NoParse("TODO-XXX-bitype.rs"))), rule: Type("OpNat", Sum(Unit, Prim(Nat))), vis: DerVis { tmfam: "Module", local_err: false } } }), Bind(ItemDer { doc: None, qual: Val, var: "nat_is_zero", der: Der { ctx: Def(Def(Empty, "List", Type(Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), "OpNat", Type(Sum(Unit, Prim(Nat)))), dir: Synth, term: (), clas: Ok(Type(Thk(Empty, Cons(Arrow(Ident("Nat"), Cons(Lift(Ident("Bool")), WR(Empty, Empty))), WR(Empty, Empty))))), rule: Fn("nat_is_zero", Der { ctx: Def(Def(Empty, "List", Type(Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), "OpNat", Type(Sum(Unit, Prim(Nat)))), dir: Check(Thk(Empty, Cons(Arrow(Ident("Nat"), Cons(Lift(Ident("Bool")), WR(Empty, Empty))), WR(Empty, Empty)))), term: ThunkAnon(HostFn(HostEvalFn("trapdoor::nat_is_zero"))), clas: Ok(Thk(Empty, Cons(Arrow(Ident("Nat"), Cons(Lift(Ident("Bool")), WR(Empty, Empty))), WR(Empty, Empty)))), rule: ThunkAnon(Der { ctx: Def(Def(Empty, "List", Type(Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), "OpNat", Type(Sum(Unit, Prim(Nat)))), dir: Check(Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Bool)), WR(Empty, Empty))), WR(Empty, Empty))), term: HostFn(HostEvalFn("trapdoor::nat_is_zero")), clas: Ok(Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Bool)), WR(Empty, Empty))), WR(Empty, Empty))), rule: HostFn(HostEvalFn("trapdoor::nat_is_zero")), vis: DerVis { tmfam: "Exp", local_err: false } }), vis: DerVis { tmfam: "Val", local_err: false } }), vis: DerVis { tmfam: "Module", local_err: false } } }), Bind(ItemDer { doc: None, qual: Val, var: "nat_is_odd", der: Der { ctx: Var(Def(Def(Empty, "List", Type(Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), "OpNat", Type(Sum(Unit, Prim(Nat)))), "nat_is_zero", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Bool)), WR(Empty, Empty))), WR(Empty, Empty)))), dir: Synth, term: (), clas: Ok(Type(Thk(Empty, Cons(Arrow(Ident("Nat"), Cons(Lift(Ident("Bool")), WR(Empty, Empty))), WR(Empty, Empty))))), rule: Fn("nat_is_odd", Der { ctx: Var(Def(Def(Empty, "List", Type(Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), "OpNat", Type(Sum(Unit, Prim(Nat)))), "nat_is_zero", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Bool)), WR(Empty, Empty))), WR(Empty, Empty)))), dir: Check(Thk(Empty, Cons(Arrow(Ident("Nat"), Cons(Lift(Ident("Bool")), WR(Empty, Empty))), WR(Empty, Empty)))), term: ThunkAnon(HostFn(HostEvalFn("trapdoor::nat_is_odd"))), clas: Ok(Thk(Empty, Cons(Arrow(Ident("Nat"), Cons(Lift(Ident("Bool")), WR(Empty, Empty))), WR(Empty, Empty)))), rule: ThunkAnon(Der { ctx: Var(Def(Def(Empty, "List", Type(Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), "OpNat", Type(Sum(Unit, Prim(Nat)))), "nat_is_zero", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Bool)), WR(Empty, Empty))), WR(Empty, Empty)))), dir: Check(Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Bool)), WR(Empty, Empty))), WR(Empty, Empty))), term: HostFn(HostEvalFn("trapdoor::nat_is_odd")), clas: Ok(Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Bool)), WR(Empty, Empty))), WR(Empty, Empty))), rule: HostFn(HostEvalFn("trapdoor::nat_is_odd")), vis: DerVis { tmfam: "Exp", local_err: false } }), vis: DerVis { tmfam: "Val", local_err: false } }), vis: DerVis { tmfam: "Module", local_err: false } } }), Bind(ItemDer { doc: None, qual: Val, var: "nat_sub", der: Der { ctx: Var(Var(Def(Def(Empty, "List", Type(Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), "OpNat", Type(Sum(Unit, Prim(Nat)))), "nat_is_zero", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Bool)), WR(Empty, Empty))), WR(Empty, Empty)))), "nat_is_odd", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Bool)), WR(Empty, Empty))), WR(Empty, Empty)))), dir: Synth, term: (), clas: Ok(Type(Thk(Empty, Cons(Arrow(Ident("Nat"), Cons(Arrow(Ident("Nat"), Cons(Lift(Ident("Nat")), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty))))), rule: Fn("nat_sub", Der { ctx: Var(Var(Def(Def(Empty, "List", Type(Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), "OpNat", Type(Sum(Unit, Prim(Nat)))), "nat_is_zero", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Bool)), WR(Empty, Empty))), WR(Empty, Empty)))), "nat_is_odd", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Bool)), WR(Empty, Empty))), WR(Empty, Empty)))), dir: Check(Thk(Empty, Cons(Arrow(Ident("Nat"), Cons(Arrow(Ident("Nat"), Cons(Lift(Ident("Nat")), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))), term: ThunkAnon(HostFn(HostEvalFn("trapdoor::nat_sub"))), clas: Ok(Thk(Empty, Cons(Arrow(Ident("Nat"), Cons(Arrow(Ident("Nat"), Cons(Lift(Ident("Nat")), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))), rule: ThunkAnon(Der { ctx: Var(Var(Def(Def(Empty, "List", Type(Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), "OpNat", Type(Sum(Unit, Prim(Nat)))), "nat_is_zero", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Bool)), WR(Empty, Empty))), WR(Empty, Empty)))), "nat_is_odd", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Bool)), WR(Empty, Empty))), WR(Empty, Empty)))), dir: Check(Cons(Arrow(Prim(Nat), Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Nat)), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty))), term: HostFn(HostEvalFn("trapdoor::nat_sub")), clas: Ok(Cons(Arrow(Prim(Nat), Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Nat)), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty))), rule: HostFn(HostEvalFn("trapdoor::nat_sub")), vis: DerVis { tmfam: "Exp", local_err: false } }), vis: DerVis { tmfam: "Val", local_err: false } }), vis: DerVis { tmfam: "Module", local_err: false } } }), Bind(ItemDer { doc: None, qual: Val, var: "nil", der: Der { ctx: Var(Var(Var(Def(Def(Empty, "List", Type(Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), "OpNat", Type(Sum(Unit, Prim(Nat)))), "nat_is_zero", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Bool)), WR(Empty, Empty))), WR(Empty, Empty)))), "nat_is_odd", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Bool)), WR(Empty, Empty))), WR(Empty, Empty)))), "nat_sub", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Nat)), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))), dir: Synth, term: (), clas: Ok(Type(Thk(Empty, Cons(Lift(Ident("List")), WR(Empty, Empty))))), rule: Fn("nil", Der { ctx: Var(Var(Var(Def(Def(Empty, "List", Type(Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), "OpNat", Type(Sum(Unit, Prim(Nat)))), "nat_is_zero", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Bool)), WR(Empty, Empty))), WR(Empty, Empty)))), "nat_is_odd", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Bool)), WR(Empty, Empty))), WR(Empty, Empty)))), "nat_sub", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Nat)), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))), dir: Check(Thk(Empty, Cons(Lift(Ident("List")), WR(Empty, Empty)))), term: ThunkAnon(Fix("nil", Ret(Roll(Inj1(Unit))))), clas: Ok(Thk(Empty, Cons(Lift(Ident("List")), WR(Empty, Empty)))), rule: ThunkAnon(Der { ctx: Var(Var(Var(Def(Def(Empty, "List", Type(Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), "OpNat", Type(Sum(Unit, Prim(Nat)))), "nat_is_zero", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Bool)), WR(Empty, Empty))), WR(Empty, Empty)))), "nat_is_odd", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Bool)), WR(Empty, Empty))), WR(Empty, Empty)))), "nat_sub", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Nat)), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))), dir: Check(Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), term: Fix("nil", Ret(Roll(Inj1(Unit)))), clas: Ok(Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), rule: Fix("nil", Der { ctx: Var(Var(Var(Var(Def(Def(Empty, "List", Type(Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), "OpNat", Type(Sum(Unit, Prim(Nat)))), "nat_is_zero", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Bool)), WR(Empty, Empty))), WR(Empty, Empty)))), "nat_is_odd", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Bool)), WR(Empty, Empty))), WR(Empty, Empty)))), "nat_sub", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Nat)), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))), "nil", Thk(Empty, Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty)))), dir: Check(Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), term: Ret(Roll(Inj1(Unit))), clas: Ok(Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), rule: Ret(Der { ctx: Var(Var(Var(Var(Def(Def(Empty, "List", Type(Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), "OpNat", Type(Sum(Unit, Prim(Nat)))), "nat_is_zero", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Bool)), WR(Empty, Empty))), WR(Empty, Empty)))), "nat_is_odd", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Bool)), WR(Empty, Empty))), WR(Empty, Empty)))), "nat_sub", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Nat)), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))), "nil", Thk(Empty, Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty)))), dir: Check(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), term: Roll(Inj1(Unit)), clas: Ok(Sum(Unit, Prod(Prim(Nat), Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))))), rule: Roll(Der { ctx: Var(Var(Var(Var(Def(Def(Empty, "List", Type(Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), "OpNat", Type(Sum(Unit, Prim(Nat)))), "nat_is_zero", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Bool)), WR(Empty, Empty))), WR(Empty, Empty)))), "nat_is_odd", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Bool)), WR(Empty, Empty))), WR(Empty, Empty)))), "nat_sub", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Nat)), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))), "nil", Thk(Empty, Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty)))), dir: Check(Sum(Unit, Prod(Prim(Nat), Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))))), term: Inj1(Unit), clas: Ok(Sum(Unit, Prod(Prim(Nat), Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))))), rule: Inj1(Der { ctx: Var(Var(Var(Var(Def(Def(Empty, "List", Type(Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), "OpNat", Type(Sum(Unit, Prim(Nat)))), "nat_is_zero", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Bool)), WR(Empty, Empty))), WR(Empty, Empty)))), "nat_is_odd", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Bool)), WR(Empty, Empty))), WR(Empty, Empty)))), "nat_sub", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Nat)), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))), "nil", Thk(Empty, Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty)))), dir: Check(Unit), term: Unit, clas: Ok(Unit), rule: Unit, vis: DerVis { tmfam: "Val", local_err: false } }), vis: DerVis { tmfam: "Val", local_err: false } }), vis: DerVis { tmfam: "Val", local_err: false } }), vis: DerVis { tmfam: "Exp", local_err: false } }), vis: DerVis { tmfam: "Exp", local_err: false } }), vis: DerVis { tmfam: "Val", local_err: false } }), vis: DerVis { tmfam: "Module", local_err: false } } }), Bind(ItemDer { doc: None, qual: Val, var: "cons", der: Der { ctx: Var(Var(Var(Var(Def(Def(Empty, "List", Type(Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), "OpNat", Type(Sum(Unit, Prim(Nat)))), "nat_is_zero", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Bool)), WR(Empty, Empty))), WR(Empty, Empty)))), "nat_is_odd", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Bool)), WR(Empty, Empty))), WR(Empty, Empty)))), "nat_sub", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Nat)), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))), "nil", Thk(Empty, Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty)))), dir: Synth, term: (), clas: Ok(Type(Thk(Empty, Cons(Arrow(Ident("Nat"), Cons(Arrow(Ident("List"), Cons(Lift(Ident("List")), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty))))), rule: Fn("cons", Der { ctx: Var(Var(Var(Var(Def(Def(Empty, "List", Type(Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), "OpNat", Type(Sum(Unit, Prim(Nat)))), "nat_is_zero", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Bool)), WR(Empty, Empty))), WR(Empty, Empty)))), "nat_is_odd", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Bool)), WR(Empty, Empty))), WR(Empty, Empty)))), "nat_sub", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Nat)), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))), "nil", Thk(Empty, Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty)))), dir: Check(Thk(Empty, Cons(Arrow(Ident("Nat"), Cons(Arrow(Ident("List"), Cons(Lift(Ident("List")), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))), term: ThunkAnon(Fix("cons", Lam("h", Lam("t", Ret(Roll(Inj2(Pair(Var("h"), Var("t"))))))))), clas: Ok(Thk(Empty, Cons(Arrow(Ident("Nat"), Cons(Arrow(Ident("List"), Cons(Lift(Ident("List")), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))), rule: ThunkAnon(Der { ctx: Var(Var(Var(Var(Def(Def(Empty, "List", Type(Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), "OpNat", Type(Sum(Unit, Prim(Nat)))), "nat_is_zero", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Bool)), WR(Empty, Empty))), WR(Empty, Empty)))), "nat_is_odd", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Bool)), WR(Empty, Empty))), WR(Empty, Empty)))), "nat_sub", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Nat)), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))), "nil", Thk(Empty, Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty)))), dir: Check(Cons(Arrow(Prim(Nat), Cons(Arrow(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))), Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty))), term: Fix("cons", Lam("h", Lam("t", Ret(Roll(Inj2(Pair(Var("h"), Var("t")))))))), clas: Ok(Cons(Arrow(Prim(Nat), Cons(Arrow(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))), Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty))), rule: Fix("cons", Der { ctx: Var(Var(Var(Var(Var(Def(Def(Empty, "List", Type(Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), "OpNat", Type(Sum(Unit, Prim(Nat)))), "nat_is_zero", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Bool)), WR(Empty, Empty))), WR(Empty, Empty)))), "nat_is_odd", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Bool)), WR(Empty, Empty))), WR(Empty, Empty)))), "nat_sub", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Nat)), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))), "nil", Thk(Empty, Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty)))), "cons", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Arrow(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))), Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))), dir: Check(Cons(Arrow(Prim(Nat), Cons(Arrow(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))), Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty))), term: Lam("h", Lam("t", Ret(Roll(Inj2(Pair(Var("h"), Var("t"))))))), clas: Ok(Cons(Arrow(Prim(Nat), Cons(Arrow(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))), Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty))), rule: Lam("h", Der { ctx: Var(Var(Var(Var(Var(Var(Def(Def(Empty, "List", Type(Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), "OpNat", Type(Sum(Unit, Prim(Nat)))), "nat_is_zero", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Bool)), WR(Empty, Empty))), WR(Empty, Empty)))), "nat_is_odd", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Bool)), WR(Empty, Empty))), WR(Empty, Empty)))), "nat_sub", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Nat)), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))), "nil", Thk(Empty, Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty)))), "cons", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Arrow(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))), Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))), "h", Prim(Nat)), dir: Check(Cons(Arrow(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))), Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), WR(Empty, Empty))), term: Lam("t", Ret(Roll(Inj2(Pair(Var("h"), Var("t")))))), clas: Ok(Cons(Arrow(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))), Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), WR(Empty, Empty))), rule: Lam("t", Der { ctx: Var(Var(Var(Var(Var(Var(Var(Def(Def(Empty, "List", Type(Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), "OpNat", Type(Sum(Unit, Prim(Nat)))), "nat_is_zero", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Bool)), WR(Empty, Empty))), WR(Empty, Empty)))), "nat_is_odd", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Bool)), WR(Empty, Empty))), WR(Empty, Empty)))), "nat_sub", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Nat)), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))), "nil", Thk(Empty, Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty)))), "cons", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Arrow(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))), Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))), "h", Prim(Nat)), "t", IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), dir: Check(Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), term: Ret(Roll(Inj2(Pair(Var("h"), Var("t"))))), clas: Ok(Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), rule: Ret(Der { ctx: Var(Var(Var(Var(Var(Var(Var(Def(Def(Empty, "List", Type(Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), "OpNat", Type(Sum(Unit, Prim(Nat)))), "nat_is_zero", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Bool)), WR(Empty, Empty))), WR(Empty, Empty)))), "nat_is_odd", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Bool)), WR(Empty, Empty))), WR(Empty, Empty)))), "nat_sub", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Nat)), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))), "nil", Thk(Empty, Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty)))), "cons", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Arrow(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))), Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))), "h", Prim(Nat)), "t", IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), dir: Check(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), term: Roll(Inj2(Pair(Var("h"), Var("t")))), clas: Ok(Sum(Unit, Prod(Prim(Nat), Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))))), rule: Roll(Der { ctx: Var(Var(Var(Var(Var(Var(Var(Def(Def(Empty, "List", Type(Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), "OpNat", Type(Sum(Unit, Prim(Nat)))), "nat_is_zero", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Bool)), WR(Empty, Empty))), WR(Empty, Empty)))), "nat_is_odd", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Bool)), WR(Empty, Empty))), WR(Empty, Empty)))), "nat_sub", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Nat)), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))), "nil", Thk(Empty, Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty)))), "cons", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Arrow(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))), Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))), "h", Prim(Nat)), "t", IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), dir: Check(Sum(Unit, Prod(Prim(Nat), Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))))), term: Inj2(Pair(Var("h"), Var("t"))), clas: Ok(Sum(Unit, Prod(Prim(Nat), Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))))), rule: Inj2(Der { ctx: Var(Var(Var(Var(Var(Var(Var(Def(Def(Empty, "List", Type(Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), "OpNat", Type(Sum(Unit, Prim(Nat)))), "nat_is_zero", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Bool)), WR(Empty, Empty))), WR(Empty, Empty)))), "nat_is_odd", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Bool)), WR(Empty, Empty))), WR(Empty, Empty)))), "nat_sub", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Nat)), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))), "nil", Thk(Empty, Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty)))), "cons", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Arrow(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))), Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))), "h", Prim(Nat)), "t", IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), dir: Check(Prod(Prim(Nat), Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), term: Pair(Var("h"), Var("t")), clas: Ok(Prod(Prim(Nat), Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), rule: Pair(Der { ctx: Var(Var(Var(Var(Var(Var(Var(Def(Def(Empty, "List", Type(Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), "OpNat", Type(Sum(Unit, Prim(Nat)))), "nat_is_zero", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Bool)), WR(Empty, Empty))), WR(Empty, Empty)))), "nat_is_odd", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Bool)), WR(Empty, Empty))), WR(Empty, Empty)))), "nat_sub", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Nat)), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))), "nil", Thk(Empty, Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty)))), "cons", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Arrow(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))), Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))), "h", Prim(Nat)), "t", IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), dir: Check(Prim(Nat)), term: Var("h"), clas: Ok(Prim(Nat)), rule: Var("h"), vis: DerVis { tmfam: "Val", local_err: false } }, Der { ctx: Var(Var(Var(Var(Var(Var(Var(Def(Def(Empty, "List", Type(Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), "OpNat", Type(Sum(Unit, Prim(Nat)))), "nat_is_zero", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Bool)), WR(Empty, Empty))), WR(Empty, Empty)))), "nat_is_odd", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Bool)), WR(Empty, Empty))), WR(Empty, Empty)))), "nat_sub", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Nat)), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))), "nil", Thk(Empty, Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty)))), "cons", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Arrow(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))), Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))), "h", Prim(Nat)), "t", IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), dir: Check(Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))), term: Var("t"), clas: Ok(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), rule: Var("t"), vis: DerVis { tmfam: "Val", local_err: false } }), vis: DerVis { tmfam: "Val", local_err: false } }), vis: DerVis { tmfam: "Val", local_err: false } }), vis: DerVis { tmfam: "Val", local_err: false } }), vis: DerVis { tmfam: "Exp", local_err: false } }), vis: DerVis { tmfam: "Exp", local_err: false } }), vis: DerVis { tmfam: "Exp", local_err: false } }), vis: DerVis { tmfam: "Exp", local_err: false } }), vis: DerVis { tmfam: "Val", local_err: false } }), vis: DerVis { tmfam: "Module", local_err: false } } }), Bind(ItemDer { doc: None, qual: Val, var: "gen", der: Der { ctx: Var(Var(Var(Var(Var(Def(Def(Empty, "List", Type(Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), "OpNat", Type(Sum(Unit, Prim(Nat)))), "nat_is_zero", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Bool)), WR(Empty, Empty))), WR(Empty, Empty)))), "nat_is_odd", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Bool)), WR(Empty, Empty))), WR(Empty, Empty)))), "nat_sub", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Nat)), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))), "nil", Thk(Empty, Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty)))), "cons", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Arrow(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))), Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))), dir: Synth, term: (), clas: Ok(Type(Thk(Empty, Cons(Arrow(Ident("Nat"), Cons(Lift(Ident("List")), WR(Empty, Empty))), WR(Empty, Empty))))), rule: Fn("gen", Der { ctx: Var(Var(Var(Var(Var(Def(Def(Empty, "List", Type(Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), "OpNat", Type(Sum(Unit, Prim(Nat)))), "nat_is_zero", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Bool)), WR(Empty, Empty))), WR(Empty, Empty)))), "nat_is_odd", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Bool)), WR(Empty, Empty))), WR(Empty, Empty)))), "nat_sub", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Nat)), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))), "nil", Thk(Empty, Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty)))), "cons", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Arrow(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))), Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))), dir: Check(Thk(Empty, Cons(Arrow(Ident("Nat"), Cons(Lift(Ident("List")), WR(Empty, Empty))), WR(Empty, Empty)))), term: ThunkAnon(Fix("gen", Lam("n", Let("sugar_if_scrutinee", App(Force(Var("nat_is_zero")), Var("n")), IfThenElse(Var("sugar_if_scrutinee"), Force(Var("nil")), Let("m", App(App(Force(Var("nat_sub")), Var("n")), Nat(1)), Let("l", App(Force(Var("gen")), Var("m")), App(App(Force(Var("cons")), Var("m")), Var("l"))))))))), clas: Ok(Thk(Empty, Cons(Arrow(Ident("Nat"), Cons(Lift(Ident("List")), WR(Empty, Empty))), WR(Empty, Empty)))), rule: ThunkAnon(Der { ctx: Var(Var(Var(Var(Var(Def(Def(Empty, "List", Type(Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), "OpNat", Type(Sum(Unit, Prim(Nat)))), "nat_is_zero", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Bool)), WR(Empty, Empty))), WR(Empty, Empty)))), "nat_is_odd", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Bool)), WR(Empty, Empty))), WR(Empty, Empty)))), "nat_sub", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Nat)), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))), "nil", Thk(Empty, Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty)))), "cons", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Arrow(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))), Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))), dir: Check(Cons(Arrow(Prim(Nat), Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), WR(Empty, Empty))), term: Fix("gen", Lam("n", Let("sugar_if_scrutinee", App(Force(Var("nat_is_zero")), Var("n")), IfThenElse(Var("sugar_if_scrutinee"), Force(Var("nil")), Let("m", App(App(Force(Var("nat_sub")), Var("n")), Nat(1)), Let("l", App(Force(Var("gen")), Var("m")), App(App(Force(Var("cons")), Var("m")), Var("l")))))))), clas: Ok(Cons(Arrow(Prim(Nat), Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), WR(Empty, Empty))), rule: Fix("gen", Der { ctx: Var(Var(Var(Var(Var(Var(Def(Def(Empty, "List", Type(Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), "OpNat", Type(Sum(Unit, Prim(Nat)))), "nat_is_zero", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Bool)), WR(Empty, Empty))), WR(Empty, Empty)))), "nat_is_odd", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Bool)), WR(Empty, Empty))), WR(Empty, Empty)))), "nat_sub", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Nat)), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))), "nil", Thk(Empty, Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty)))), "cons", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Arrow(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))), Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))), "gen", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), WR(Empty, Empty)))), dir: Check(Cons(Arrow(Prim(Nat), Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), WR(Empty, Empty))), term: Lam("n", Let("sugar_if_scrutinee", App(Force(Var("nat_is_zero")), Var("n")), IfThenElse(Var("sugar_if_scrutinee"), Force(Var("nil")), Let("m", App(App(Force(Var("nat_sub")), Var("n")), Nat(1)), Let("l", App(Force(Var("gen")), Var("m")), App(App(Force(Var("cons")), Var("m")), Var("l"))))))), clas: Ok(Cons(Arrow(Prim(Nat), Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), WR(Empty, Empty))), rule: Lam("n", Der { ctx: Var(Var(Var(Var(Var(Var(Var(Def(Def(Empty, "List", Type(Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), "OpNat", Type(Sum(Unit, Prim(Nat)))), "nat_is_zero", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Bool)), WR(Empty, Empty))), WR(Empty, Empty)))), "nat_is_odd", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Bool)), WR(Empty, Empty))), WR(Empty, Empty)))), "nat_sub", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Nat)), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))), "nil", Thk(Empty, Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty)))), "cons", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Arrow(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))), Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))), "gen", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), WR(Empty, Empty)))), "n", Prim(Nat)), dir: Check(Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), term: Let("sugar_if_scrutinee", App(Force(Var("nat_is_zero")), Var("n")), IfThenElse(Var("sugar_if_scrutinee"), Force(Var("nil")), Let("m", App(App(Force(Var("nat_sub")), Var("n")), Nat(1)), Let("l", App(Force(Var("gen")), Var("m")), App(App(Force(Var("cons")), Var("m")), Var("l")))))), clas: Ok(Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), rule: Let("sugar_if_scrutinee", Der { ctx: Var(Var(Var(Var(Var(Var(Var(Def(Def(Empty, "List", Type(Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), "OpNat", Type(Sum(Unit, Prim(Nat)))), "nat_is_zero", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Bool)), WR(Empty, Empty))), WR(Empty, Empty)))), "nat_is_odd", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Bool)), WR(Empty, Empty))), WR(Empty, Empty)))), "nat_sub", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Nat)), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))), "nil", Thk(Empty, Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty)))), "cons", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Arrow(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))), Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))), "gen", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), WR(Empty, Empty)))), "n", Prim(Nat)), dir: Synth, term: App(Force(Var("nat_is_zero")), Var("n")), clas: Ok(Cons(Lift(Prim(Bool)), WR(Empty, Empty))), rule: App(Der { ctx: Var(Var(Var(Var(Var(Var(Var(Def(Def(Empty, "List", Type(Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), "OpNat", Type(Sum(Unit, Prim(Nat)))), "nat_is_zero", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Bool)), WR(Empty, Empty))), WR(Empty, Empty)))), "nat_is_odd", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Bool)), WR(Empty, Empty))), WR(Empty, Empty)))), "nat_sub", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Nat)), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))), "nil", Thk(Empty, Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty)))), "cons", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Arrow(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))), Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))), "gen", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), WR(Empty, Empty)))), "n", Prim(Nat)), dir: Synth, term: Force(Var("nat_is_zero")), clas: Ok(Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Bool)), WR(Empty, Empty))), WR(Empty, Empty))), rule: Force(Der { ctx: Var(Var(Var(Var(Var(Var(Var(Def(Def(Empty, "List", Type(Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), "OpNat", Type(Sum(Unit, Prim(Nat)))), "nat_is_zero", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Bool)), WR(Empty, Empty))), WR(Empty, Empty)))), "nat_is_odd", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Bool)), WR(Empty, Empty))), WR(Empty, Empty)))), "nat_sub", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Nat)), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))), "nil", Thk(Empty, Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty)))), "cons", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Arrow(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))), Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))), "gen", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), WR(Empty, Empty)))), "n", Prim(Nat)), dir: Synth, term: Var("nat_is_zero"), clas: Ok(Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Bool)), WR(Empty, Empty))), WR(Empty, Empty)))), rule: Var("nat_is_zero"), vis: DerVis { tmfam: "Val", local_err: false } }), vis: DerVis { tmfam: "Exp", local_err: false } }, Der { ctx: Var(Var(Var(Var(Var(Var(Var(Def(Def(Empty, "List", Type(Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), "OpNat", Type(Sum(Unit, Prim(Nat)))), "nat_is_zero", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Bool)), WR(Empty, Empty))), WR(Empty, Empty)))), "nat_is_odd", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Bool)), WR(Empty, Empty))), WR(Empty, Empty)))), "nat_sub", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Nat)), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))), "nil", Thk(Empty, Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty)))), "cons", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Arrow(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))), Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))), "gen", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), WR(Empty, Empty)))), "n", Prim(Nat)), dir: Check(Prim(Nat)), term: Var("n"), clas: Ok(Prim(Nat)), rule: Var("n"), vis: DerVis { tmfam: "Val", local_err: false } }), vis: DerVis { tmfam: "Exp", local_err: false } }, Der { ctx: Var(Var(Var(Var(Var(Var(Var(Var(Def(Def(Empty, "List", Type(Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), "OpNat", Type(Sum(Unit, Prim(Nat)))), "nat_is_zero", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Bool)), WR(Empty, Empty))), WR(Empty, Empty)))), "nat_is_odd", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Bool)), WR(Empty, Empty))), WR(Empty, Empty)))), "nat_sub", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Nat)), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))), "nil", Thk(Empty, Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty)))), "cons", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Arrow(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))), Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))), "gen", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), WR(Empty, Empty)))), "n", Prim(Nat)), "sugar_if_scrutinee", Prim(Bool)), dir: Check(Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), term: IfThenElse(Var("sugar_if_scrutinee"), Force(Var("nil")), Let("m", App(App(Force(Var("nat_sub")), Var("n")), Nat(1)), Let("l", App(Force(Var("gen")), Var("m")), App(App(Force(Var("cons")), Var("m")), Var("l"))))), clas: Ok(Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), rule: IfThenElse(Der { ctx: Var(Var(Var(Var(Var(Var(Var(Var(Def(Def(Empty, "List", Type(Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), "OpNat", Type(Sum(Unit, Prim(Nat)))), "nat_is_zero", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Bool)), WR(Empty, Empty))), WR(Empty, Empty)))), "nat_is_odd", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Bool)), WR(Empty, Empty))), WR(Empty, Empty)))), "nat_sub", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Nat)), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))), "nil", Thk(Empty, Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty)))), "cons", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Arrow(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))), Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))), "gen", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), WR(Empty, Empty)))), "n", Prim(Nat)), "sugar_if_scrutinee", Prim(Bool)), dir: Synth, term: Var("sugar_if_scrutinee"), clas: Ok(Prim(Bool)), rule: Var("sugar_if_scrutinee"), vis: DerVis { tmfam: "Val", local_err: false } }, Der { ctx: Var(Var(Var(Var(Var(Var(Var(Var(Def(Def(Empty, "List", Type(Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), "OpNat", Type(Sum(Unit, Prim(Nat)))), "nat_is_zero", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Bool)), WR(Empty, Empty))), WR(Empty, Empty)))), "nat_is_odd", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Bool)), WR(Empty, Empty))), WR(Empty, Empty)))), "nat_sub", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Nat)), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))), "nil", Thk(Empty, Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty)))), "cons", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Arrow(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))), Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))), "gen", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), WR(Empty, Empty)))), "n", Prim(Nat)), "sugar_if_scrutinee", Prim(Bool)), dir: Synth, term: Force(Var("nil")), clas: Ok(Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), rule: Force(Der { ctx: Var(Var(Var(Var(Var(Var(Var(Var(Def(Def(Empty, "List", Type(Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), "OpNat", Type(Sum(Unit, Prim(Nat)))), "nat_is_zero", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Bool)), WR(Empty, Empty))), WR(Empty, Empty)))), "nat_is_odd", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Bool)), WR(Empty, Empty))), WR(Empty, Empty)))), "nat_sub", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Nat)), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))), "nil", Thk(Empty, Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty)))), "cons", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Arrow(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))), Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))), "gen", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), WR(Empty, Empty)))), "n", Prim(Nat)), "sugar_if_scrutinee", Prim(Bool)), dir: Synth, term: Var("nil"), clas: Ok(Thk(Empty, Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty)))), rule: Var("nil"), vis: DerVis { tmfam: "Val", local_err: false } }), vis: DerVis { tmfam: "Exp", local_err: false } }, Der { ctx: Var(Var(Var(Var(Var(Var(Var(Var(Def(Def(Empty, "List", Type(Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), "OpNat", Type(Sum(Unit, Prim(Nat)))), "nat_is_zero", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Bool)), WR(Empty, Empty))), WR(Empty, Empty)))), "nat_is_odd", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Bool)), WR(Empty, Empty))), WR(Empty, Empty)))), "nat_sub", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Nat)), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))), "nil", Thk(Empty, Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty)))), "cons", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Arrow(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))), Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))), "gen", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), WR(Empty, Empty)))), "n", Prim(Nat)), "sugar_if_scrutinee", Prim(Bool)), dir: Check(Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), term: Let("m", App(App(Force(Var("nat_sub")), Var("n")), Nat(1)), Let("l", App(Force(Var("gen")), Var("m")), App(App(Force(Var("cons")), Var("m")), Var("l")))), clas: Ok(Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), rule: Let("m", Der { ctx: Var(Var(Var(Var(Var(Var(Var(Var(Def(Def(Empty, "List", Type(Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), "OpNat", Type(Sum(Unit, Prim(Nat)))), "nat_is_zero", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Bool)), WR(Empty, Empty))), WR(Empty, Empty)))), "nat_is_odd", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Bool)), WR(Empty, Empty))), WR(Empty, Empty)))), "nat_sub", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Nat)), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))), "nil", Thk(Empty, Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty)))), "cons", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Arrow(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))), Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))), "gen", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), WR(Empty, Empty)))), "n", Prim(Nat)), "sugar_if_scrutinee", Prim(Bool)), dir: Synth, term: App(App(Force(Var("nat_sub")), Var("n")), Nat(1)), clas: Ok(Cons(Lift(Prim(Nat)), WR(Empty, Empty))), rule: App(Der { ctx: Var(Var(Var(Var(Var(Var(Var(Var(Def(Def(Empty, "List", Type(Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), "OpNat", Type(Sum(Unit, Prim(Nat)))), "nat_is_zero", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Bool)), WR(Empty, Empty))), WR(Empty, Empty)))), "nat_is_odd", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Bool)), WR(Empty, Empty))), WR(Empty, Empty)))), "nat_sub", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Nat)), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))), "nil", Thk(Empty, Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty)))), "cons", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Arrow(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))), Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))), "gen", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), WR(Empty, Empty)))), "n", Prim(Nat)), "sugar_if_scrutinee", Prim(Bool)), dir: Synth, term: App(Force(Var("nat_sub")), Var("n")), clas: Ok(Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Nat)), WR(Empty, Empty))), WR(Empty, Empty))), rule: App(Der { ctx: Var(Var(Var(Var(Var(Var(Var(Var(Def(Def(Empty, "List", Type(Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), "OpNat", Type(Sum(Unit, Prim(Nat)))), "nat_is_zero", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Bool)), WR(Empty, Empty))), WR(Empty, Empty)))), "nat_is_odd", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Bool)), WR(Empty, Empty))), WR(Empty, Empty)))), "nat_sub", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Nat)), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))), "nil", Thk(Empty, Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty)))), "cons", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Arrow(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))), Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))), "gen", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), WR(Empty, Empty)))), "n", Prim(Nat)), "sugar_if_scrutinee", Prim(Bool)), dir: Synth, term: Force(Var("nat_sub")), clas: Ok(Cons(Arrow(Prim(Nat), Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Nat)), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty))), rule: Force(Der { ctx: Var(Var(Var(Var(Var(Var(Var(Var(Def(Def(Empty, "List", Type(Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), "OpNat", Type(Sum(Unit, Prim(Nat)))), "nat_is_zero", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Bool)), WR(Empty, Empty))), WR(Empty, Empty)))), "nat_is_odd", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Bool)), WR(Empty, Empty))), WR(Empty, Empty)))), "nat_sub", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Nat)), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))), "nil", Thk(Empty, Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty)))), "cons", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Arrow(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))), Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))), "gen", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), WR(Empty, Empty)))), "n", Prim(Nat)), "sugar_if_scrutinee", Prim(Bool)), dir: Synth, term: Var("nat_sub"), clas: Ok(Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Nat)), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))), rule: Var("nat_sub"), vis: DerVis { tmfam: "Val", local_err: false } }), vis: DerVis { tmfam: "Exp", local_err: false } }, Der { ctx: Var(Var(Var(Var(Var(Var(Var(Var(Def(Def(Empty, "List", Type(Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), "OpNat", Type(Sum(Unit, Prim(Nat)))), "nat_is_zero", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Bool)), WR(Empty, Empty))), WR(Empty, Empty)))), "nat_is_odd", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Bool)), WR(Empty, Empty))), WR(Empty, Empty)))), "nat_sub", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Nat)), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))), "nil", Thk(Empty, Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty)))), "cons", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Arrow(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))), Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))), "gen", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), WR(Empty, Empty)))), "n", Prim(Nat)), "sugar_if_scrutinee", Prim(Bool)), dir: Check(Prim(Nat)), term: Var("n"), clas: Ok(Prim(Nat)), rule: Var("n"), vis: DerVis { tmfam: "Val", local_err: false } }), vis: DerVis { tmfam: "Exp", local_err: false } }, Der { ctx: Var(Var(Var(Var(Var(Var(Var(Var(Def(Def(Empty, "List", Type(Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), "OpNat", Type(Sum(Unit, Prim(Nat)))), "nat_is_zero", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Bool)), WR(Empty, Empty))), WR(Empty, Empty)))), "nat_is_odd", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Bool)), WR(Empty, Empty))), WR(Empty, Empty)))), "nat_sub", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Nat)), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))), "nil", Thk(Empty, Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty)))), "cons", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Arrow(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))), Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))), "gen", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), WR(Empty, Empty)))), "n", Prim(Nat)), "sugar_if_scrutinee", Prim(Bool)), dir: Check(Prim(Nat)), term: Nat(1), clas: Ok(Prim(Nat)), rule: Nat(1), vis: DerVis { tmfam: "Val", local_err: false } }), vis: DerVis { tmfam: "Exp", local_err: false } }, Der { ctx: Var(Var(Var(Var(Var(Var(Var(Var(Var(Def(Def(Empty, "List", Type(Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), "OpNat", Type(Sum(Unit, Prim(Nat)))), "nat_is_zero", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Bool)), WR(Empty, Empty))), WR(Empty, Empty)))), "nat_is_odd", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Bool)), WR(Empty, Empty))), WR(Empty, Empty)))), "nat_sub", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Nat)), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))), "nil", Thk(Empty, Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty)))), "cons", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Arrow(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))), Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))), "gen", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), WR(Empty, Empty)))), "n", Prim(Nat)), "sugar_if_scrutinee", Prim(Bool)), "m", Prim(Nat)), dir: Check(Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), term: Let("l", App(Force(Var("gen")), Var("m")), App(App(Force(Var("cons")), Var("m")), Var("l"))), clas: Ok(Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), rule: Let("l", Der { ctx: Var(Var(Var(Var(Var(Var(Var(Var(Var(Def(Def(Empty, "List", Type(Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), "OpNat", Type(Sum(Unit, Prim(Nat)))), "nat_is_zero", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Bool)), WR(Empty, Empty))), WR(Empty, Empty)))), "nat_is_odd", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Bool)), WR(Empty, Empty))), WR(Empty, Empty)))), "nat_sub", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Nat)), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))), "nil", Thk(Empty, Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty)))), "cons", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Arrow(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))), Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))), "gen", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), WR(Empty, Empty)))), "n", Prim(Nat)), "sugar_if_scrutinee", Prim(Bool)), "m", Prim(Nat)), dir: Synth, term: App(Force(Var("gen")), Var("m")), clas: Ok(Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), rule: App(Der { ctx: Var(Var(Var(Var(Var(Var(Var(Var(Var(Def(Def(Empty, "List", Type(Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), "OpNat", Type(Sum(Unit, Prim(Nat)))), "nat_is_zero", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Bool)), WR(Empty, Empty))), WR(Empty, Empty)))), "nat_is_odd", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Bool)), WR(Empty, Empty))), WR(Empty, Empty)))), "nat_sub", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Nat)), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))), "nil", Thk(Empty, Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty)))), "cons", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Arrow(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))), Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))), "gen", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), WR(Empty, Empty)))), "n", Prim(Nat)), "sugar_if_scrutinee", Prim(Bool)), "m", Prim(Nat)), dir: Synth, term: Force(Var("gen")), clas: Ok(Cons(Arrow(Prim(Nat), Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), WR(Empty, Empty))), rule: Force(Der { ctx: Var(Var(Var(Var(Var(Var(Var(Var(Var(Def(Def(Empty, "List", Type(Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), "OpNat", Type(Sum(Unit, Prim(Nat)))), "nat_is_zero", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Bool)), WR(Empty, Empty))), WR(Empty, Empty)))), "nat_is_odd", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Bool)), WR(Empty, Empty))), WR(Empty, Empty)))), "nat_sub", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Nat)), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))), "nil", Thk(Empty, Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty)))), "cons", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Arrow(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))), Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))), "gen", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), WR(Empty, Empty)))), "n", Prim(Nat)), "sugar_if_scrutinee", Prim(Bool)), "m", Prim(Nat)), dir: Synth, term: Var("gen"), clas: Ok(Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), WR(Empty, Empty)))), rule: Var("gen"), vis: DerVis { tmfam: "Val", local_err: false } }), vis: DerVis { tmfam: "Exp", local_err: false } }, Der { ctx: Var(Var(Var(Var(Var(Var(Var(Var(Var(Def(Def(Empty, "List", Type(Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), "OpNat", Type(Sum(Unit, Prim(Nat)))), "nat_is_zero", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Bool)), WR(Empty, Empty))), WR(Empty, Empty)))), "nat_is_odd", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Bool)), WR(Empty, Empty))), WR(Empty, Empty)))), "nat_sub", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Nat)), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))), "nil", Thk(Empty, Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty)))), "cons", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Arrow(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))), Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))), "gen", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), WR(Empty, Empty)))), "n", Prim(Nat)), "sugar_if_scrutinee", Prim(Bool)), "m", Prim(Nat)), dir: Check(Prim(Nat)), term: Var("m"), clas: Ok(Prim(Nat)), rule: Var("m"), vis: DerVis { tmfam: "Val", local_err: false } }), vis: DerVis { tmfam: "Exp", local_err: false } }, Der { ctx: Var(Var(Var(Var(Var(Var(Var(Var(Var(Var(Def(Def(Empty, "List", Type(Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), "OpNat", Type(Sum(Unit, Prim(Nat)))), "nat_is_zero", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Bool)), WR(Empty, Empty))), WR(Empty, Empty)))), "nat_is_odd", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Bool)), WR(Empty, Empty))), WR(Empty, Empty)))), "nat_sub", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Nat)), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))), "nil", Thk(Empty, Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty)))), "cons", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Arrow(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))), Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))), "gen", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), WR(Empty, Empty)))), "n", Prim(Nat)), "sugar_if_scrutinee", Prim(Bool)), "m", Prim(Nat)), "l", IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), dir: Synth, term: App(App(Force(Var("cons")), Var("m")), Var("l")), clas: Ok(Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), rule: App(Der { ctx: Var(Var(Var(Var(Var(Var(Var(Var(Var(Var(Def(Def(Empty, "List", Type(Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), "OpNat", Type(Sum(Unit, Prim(Nat)))), "nat_is_zero", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Bool)), WR(Empty, Empty))), WR(Empty, Empty)))), "nat_is_odd", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Bool)), WR(Empty, Empty))), WR(Empty, Empty)))), "nat_sub", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Nat)), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))), "nil", Thk(Empty, Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty)))), "cons", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Arrow(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))), Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))), "gen", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), WR(Empty, Empty)))), "n", Prim(Nat)), "sugar_if_scrutinee", Prim(Bool)), "m", Prim(Nat)), "l", IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), dir: Synth, term: App(Force(Var("cons")), Var("m")), clas: Ok(Cons(Arrow(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))), Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), WR(Empty, Empty))), rule: App(Der { ctx: Var(Var(Var(Var(Var(Var(Var(Var(Var(Var(Def(Def(Empty, "List", Type(Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), "OpNat", Type(Sum(Unit, Prim(Nat)))), "nat_is_zero", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Bool)), WR(Empty, Empty))), WR(Empty, Empty)))), "nat_is_odd", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Bool)), WR(Empty, Empty))), WR(Empty, Empty)))), "nat_sub", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Nat)), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))), "nil", Thk(Empty, Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty)))), "cons", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Arrow(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))), Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))), "gen", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), WR(Empty, Empty)))), "n", Prim(Nat)), "sugar_if_scrutinee", Prim(Bool)), "m", Prim(Nat)), "l", IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), dir: Synth, term: Force(Var("cons")), clas: Ok(Cons(Arrow(Prim(Nat), Cons(Arrow(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))), Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty))), rule: Force(Der { ctx: Var(Var(Var(Var(Var(Var(Var(Var(Var(Var(Def(Def(Empty, "List", Type(Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), "OpNat", Type(Sum(Unit, Prim(Nat)))), "nat_is_zero", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Bool)), WR(Empty, Empty))), WR(Empty, Empty)))), "nat_is_odd", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Bool)), WR(Empty, Empty))), WR(Empty, Empty)))), "nat_sub", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Nat)), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))), "nil", Thk(Empty, Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty)))), "cons", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Arrow(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))), Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))), "gen", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), WR(Empty, Empty)))), "n", Prim(Nat)), "sugar_if_scrutinee", Prim(Bool)), "m", Prim(Nat)), "l", IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), dir: Synth, term: Var("cons"), clas: Ok(Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Arrow(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))), Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))), rule: Var("cons"), vis: DerVis { tmfam: "Val", local_err: false } }), vis: DerVis { tmfam: "Exp", local_err: false } }, Der { ctx: Var(Var(Var(Var(Var(Var(Var(Var(Var(Var(Def(Def(Empty, "List", Type(Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), "OpNat", Type(Sum(Unit, Prim(Nat)))), "nat_is_zero", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Bool)), WR(Empty, Empty))), WR(Empty, Empty)))), "nat_is_odd", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Bool)), WR(Empty, Empty))), WR(Empty, Empty)))), "nat_sub", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Nat)), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))), "nil", Thk(Empty, Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty)))), "cons", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Arrow(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))), Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))), "gen", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), WR(Empty, Empty)))), "n", Prim(Nat)), "sugar_if_scrutinee", Prim(Bool)), "m", Prim(Nat)), "l", IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), dir: Check(Prim(Nat)), term: Var("m"), clas: Ok(Prim(Nat)), rule: Var("m"), vis: DerVis { tmfam: "Val", local_err: false } }), vis: DerVis { tmfam: "Exp", local_err: false } }, Der { ctx: Var(Var(Var(Var(Var(Var(Var(Var(Var(Var(Def(Def(Empty, "List", Type(Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), "OpNat", Type(Sum(Unit, Prim(Nat)))), "nat_is_zero", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Bool)), WR(Empty, Empty))), WR(Empty, Empty)))), "nat_is_odd", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Bool)), WR(Empty, Empty))), WR(Empty, Empty)))), "nat_sub", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Nat)), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))), "nil", Thk(Empty, Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty)))), "cons", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Arrow(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))), Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))), "gen", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), WR(Empty, Empty)))), "n", Prim(Nat)), "sugar_if_scrutinee", Prim(Bool)), "m", Prim(Nat)), "l", IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), dir: Check(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), term: Var("l"), clas: Ok(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), rule: Var("l"), vis: DerVis { tmfam: "Val", local_err: false } }), vis: DerVis { tmfam: "Exp", local_err: false } }), vis: DerVis { tmfam: "Exp", local_err: false } }), vis: DerVis { tmfam: "Exp", local_err: false } }), vis: DerVis { tmfam: "Exp", local_err: false } }), vis: DerVis { tmfam: "Exp", local_err: false } }), vis: DerVis { tmfam: "Exp", local_err: false } }), vis: DerVis { tmfam: "Exp", local_err: false } }), vis: DerVis { tmfam: "Val", local_err: false } }), vis: DerVis { tmfam: "Module", local_err: false } } }), Bind(ItemDer { doc: None, qual: Val, var: "map", der: Der { ctx: Var(Var(Var(Var(Var(Var(Def(Def(Empty, "List", Type(Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), "OpNat", Type(Sum(Unit, Prim(Nat)))), "nat_is_zero", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Bool)), WR(Empty, Empty))), WR(Empty, Empty)))), "nat_is_odd", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Bool)), WR(Empty, Empty))), WR(Empty, Empty)))), "nat_sub", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Nat)), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))), "nil", Thk(Empty, Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty)))), "cons", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Arrow(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))), Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))), "gen", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), WR(Empty, Empty)))), dir: Synth, term: (), clas: Ok(Type(Thk(Empty, Cons(Arrow(Thk(Empty, Cons(Arrow(Ident("Nat"), Cons(Lift(Ident("Nat")), WR(Empty, Empty))), WR(Empty, Empty))), Cons(Arrow(Ident("List"), Cons(Lift(Ident("List")), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty))))), rule: Fn("map", Der { ctx: Var(Var(Var(Var(Var(Var(Def(Def(Empty, "List", Type(Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), "OpNat", Type(Sum(Unit, Prim(Nat)))), "nat_is_zero", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Bool)), WR(Empty, Empty))), WR(Empty, Empty)))), "nat_is_odd", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Bool)), WR(Empty, Empty))), WR(Empty, Empty)))), "nat_sub", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Nat)), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))), "nil", Thk(Empty, Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty)))), "cons", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Arrow(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))), Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))), "gen", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), WR(Empty, Empty)))), dir: Check(Thk(Empty, Cons(Arrow(Thk(Empty, Cons(Arrow(Ident("Nat"), Cons(Lift(Ident("Nat")), WR(Empty, Empty))), WR(Empty, Empty))), Cons(Arrow(Ident("List"), Cons(Lift(Ident("List")), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))), term: ThunkAnon(Fix("map", Lam("f", Lam("l", Unroll(Var("l"), "sugar_match_unroll", Case(Var("sugar_match_unroll"), "_u", Ret(Roll(Inj1(Unit))), "c", Let("let_split_sugar", Ret(Var("c")), Split(Var("let_split_sugar"), "h", "t", Let("h2", App(Force(Var("f")), Var("h")), Let("t2", App(App(Force(Var("map")), Var("f")), Var("t")), App(App(Force(Var("cons")), Var("h2")), Var("t2")))))))))))), clas: Ok(Thk(Empty, Cons(Arrow(Thk(Empty, Cons(Arrow(Ident("Nat"), Cons(Lift(Ident("Nat")), WR(Empty, Empty))), WR(Empty, Empty))), Cons(Arrow(Ident("List"), Cons(Lift(Ident("List")), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))), rule: ThunkAnon(Der { ctx: Var(Var(Var(Var(Var(Var(Def(Def(Empty, "List", Type(Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), "OpNat", Type(Sum(Unit, Prim(Nat)))), "nat_is_zero", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Bool)), WR(Empty, Empty))), WR(Empty, Empty)))), "nat_is_odd", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Bool)), WR(Empty, Empty))), WR(Empty, Empty)))), "nat_sub", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Nat)), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))), "nil", Thk(Empty, Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty)))), "cons", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Arrow(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))), Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))), "gen", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), WR(Empty, Empty)))), dir: Check(Cons(Arrow(Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Nat)), WR(Empty, Empty))), WR(Empty, Empty))), Cons(Arrow(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))), Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty))), term: Fix("map", Lam("f", Lam("l", Unroll(Var("l"), "sugar_match_unroll", Case(Var("sugar_match_unroll"), "_u", Ret(Roll(Inj1(Unit))), "c", Let("let_split_sugar", Ret(Var("c")), Split(Var("let_split_sugar"), "h", "t", Let("h2", App(Force(Var("f")), Var("h")), Let("t2", App(App(Force(Var("map")), Var("f")), Var("t")), App(App(Force(Var("cons")), Var("h2")), Var("t2"))))))))))), clas: Ok(Cons(Arrow(Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Nat)), WR(Empty, Empty))), WR(Empty, Empty))), Cons(Arrow(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))), Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty))), rule: Fix("map", Der { ctx: Var(Var(Var(Var(Var(Var(Var(Def(Def(Empty, "List", Type(Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), "OpNat", Type(Sum(Unit, Prim(Nat)))), "nat_is_zero", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Bool)), WR(Empty, Empty))), WR(Empty, Empty)))), "nat_is_odd", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Bool)), WR(Empty, Empty))), WR(Empty, Empty)))), "nat_sub", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Nat)), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))), "nil", Thk(Empty, Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty)))), "cons", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Arrow(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))), Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))), "gen", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), WR(Empty, Empty)))), "map", Thk(Empty, Cons(Arrow(Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Nat)), WR(Empty, Empty))), WR(Empty, Empty))), Cons(Arrow(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))), Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))), dir: Check(Cons(Arrow(Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Nat)), WR(Empty, Empty))), WR(Empty, Empty))), Cons(Arrow(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))), Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty))), term: Lam("f", Lam("l", Unroll(Var("l"), "sugar_match_unroll", Case(Var("sugar_match_unroll"), "_u", Ret(Roll(Inj1(Unit))), "c", Let("let_split_sugar", Ret(Var("c")), Split(Var("let_split_sugar"), "h", "t", Let("h2", App(Force(Var("f")), Var("h")), Let("t2", App(App(Force(Var("map")), Var("f")), Var("t")), App(App(Force(Var("cons")), Var("h2")), Var("t2")))))))))), clas: Ok(Cons(Arrow(Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Nat)), WR(Empty, Empty))), WR(Empty, Empty))), Cons(Arrow(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))), Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty))), rule: Lam("f", Der { ctx: Var(Var(Var(Var(Var(Var(Var(Var(Def(Def(Empty, "List", Type(Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), "OpNat", Type(Sum(Unit, Prim(Nat)))), "nat_is_zero", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Bool)), WR(Empty, Empty))), WR(Empty, Empty)))), "nat_is_odd", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Bool)), WR(Empty, Empty))), WR(Empty, Empty)))), "nat_sub", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Nat)), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))), "nil", Thk(Empty, Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty)))), "cons", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Arrow(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))), Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))), "gen", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), WR(Empty, Empty)))), "map", Thk(Empty, Cons(Arrow(Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Nat)), WR(Empty, Empty))), WR(Empty, Empty))), Cons(Arrow(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))), Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))), "f", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Nat)), WR(Empty, Empty))), WR(Empty, Empty)))), dir: Check(Cons(Arrow(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))), Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), WR(Empty, Empty))), term: Lam("l", Unroll(Var("l"), "sugar_match_unroll", Case(Var("sugar_match_unroll"), "_u", Ret(Roll(Inj1(Unit))), "c", Let("let_split_sugar", Ret(Var("c")), Split(Var("let_split_sugar"), "h", "t", Let("h2", App(Force(Var("f")), Var("h")), Let("t2", App(App(Force(Var("map")), Var("f")), Var("t")), App(App(Force(Var("cons")), Var("h2")), Var("t2"))))))))), clas: Ok(Cons(Arrow(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))), Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), WR(Empty, Empty))), rule: Lam("l", Der { ctx: Var(Var(Var(Var(Var(Var(Var(Var(Var(Def(Def(Empty, "List", Type(Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), "OpNat", Type(Sum(Unit, Prim(Nat)))), "nat_is_zero", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Bool)), WR(Empty, Empty))), WR(Empty, Empty)))), "nat_is_odd", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Bool)), WR(Empty, Empty))), WR(Empty, Empty)))), "nat_sub", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Nat)), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))), "nil", Thk(Empty, Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty)))), "cons", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Arrow(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))), Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))), "gen", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), WR(Empty, Empty)))), "map", Thk(Empty, Cons(Arrow(Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Nat)), WR(Empty, Empty))), WR(Empty, Empty))), Cons(Arrow(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))), Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))), "f", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Nat)), WR(Empty, Empty))), WR(Empty, Empty)))), "l", IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), dir: Check(Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), term: Unroll(Var("l"), "sugar_match_unroll", Case(Var("sugar_match_unroll"), "_u", Ret(Roll(Inj1(Unit))), "c", Let("let_split_sugar", Ret(Var("c")), Split(Var("let_split_sugar"), "h", "t", Let("h2", App(Force(Var("f")), Var("h")), Let("t2", App(App(Force(Var("map")), Var("f")), Var("t")), App(App(Force(Var("cons")), Var("h2")), Var("t2")))))))), clas: Ok(Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), rule: Unroll(Der { ctx: Var(Var(Var(Var(Var(Var(Var(Var(Var(Def(Def(Empty, "List", Type(Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), "OpNat", Type(Sum(Unit, Prim(Nat)))), "nat_is_zero", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Bool)), WR(Empty, Empty))), WR(Empty, Empty)))), "nat_is_odd", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Bool)), WR(Empty, Empty))), WR(Empty, Empty)))), "nat_sub", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Nat)), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))), "nil", Thk(Empty, Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty)))), "cons", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Arrow(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))), Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))), "gen", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), WR(Empty, Empty)))), "map", Thk(Empty, Cons(Arrow(Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Nat)), WR(Empty, Empty))), WR(Empty, Empty))), Cons(Arrow(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))), Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))), "f", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Nat)), WR(Empty, Empty))), WR(Empty, Empty)))), "l", IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), dir: Synth, term: Var("l"), clas: Ok(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), rule: Var("l"), vis: DerVis { tmfam: "Val", local_err: false } }, "sugar_match_unroll", Der { ctx: Var(Var(Var(Var(Var(Var(Var(Var(Var(Var(Def(Def(Empty, "List", Type(Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), "OpNat", Type(Sum(Unit, Prim(Nat)))), "nat_is_zero", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Bool)), WR(Empty, Empty))), WR(Empty, Empty)))), "nat_is_odd", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Bool)), WR(Empty, Empty))), WR(Empty, Empty)))), "nat_sub", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Nat)), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))), "nil", Thk(Empty, Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty)))), "cons", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Arrow(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))), Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))), "gen", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), WR(Empty, Empty)))), "map", Thk(Empty, Cons(Arrow(Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Nat)), WR(Empty, Empty))), WR(Empty, Empty))), Cons(Arrow(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))), Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))), "f", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Nat)), WR(Empty, Empty))), WR(Empty, Empty)))), "l", IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), "sugar_match_unroll", Sum(Unit, Prod(Prim(Nat), Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))))), dir: Check(Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), term: Case(Var("sugar_match_unroll"), "_u", Ret(Roll(Inj1(Unit))), "c", Let("let_split_sugar", Ret(Var("c")), Split(Var("let_split_sugar"), "h", "t", Let("h2", App(Force(Var("f")), Var("h")), Let("t2", App(App(Force(Var("map")), Var("f")), Var("t")), App(App(Force(Var("cons")), Var("h2")), Var("t2"))))))), clas: Ok(Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), rule: Case(Der { ctx: Var(Var(Var(Var(Var(Var(Var(Var(Var(Var(Def(Def(Empty, "List", Type(Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), "OpNat", Type(Sum(Unit, Prim(Nat)))), "nat_is_zero", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Bool)), WR(Empty, Empty))), WR(Empty, Empty)))), "nat_is_odd", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Bool)), WR(Empty, Empty))), WR(Empty, Empty)))), "nat_sub", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Nat)), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))), "nil", Thk(Empty, Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty)))), "cons", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Arrow(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))), Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))), "gen", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), WR(Empty, Empty)))), "map", Thk(Empty, Cons(Arrow(Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Nat)), WR(Empty, Empty))), WR(Empty, Empty))), Cons(Arrow(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))), Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))), "f", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Nat)), WR(Empty, Empty))), WR(Empty, Empty)))), "l", IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), "sugar_match_unroll", Sum(Unit, Prod(Prim(Nat), Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))))), dir: Synth, term: Var("sugar_match_unroll"), clas: Ok(Sum(Unit, Prod(Prim(Nat), Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))))), rule: Var("sugar_match_unroll"), vis: DerVis { tmfam: "Val", local_err: false } }, "_u", Der { ctx: Var(Var(Var(Var(Var(Var(Var(Var(Var(Var(Var(Def(Def(Empty, "List", Type(Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), "OpNat", Type(Sum(Unit, Prim(Nat)))), "nat_is_zero", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Bool)), WR(Empty, Empty))), WR(Empty, Empty)))), "nat_is_odd", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Bool)), WR(Empty, Empty))), WR(Empty, Empty)))), "nat_sub", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Nat)), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))), "nil", Thk(Empty, Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty)))), "cons", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Arrow(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))), Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))), "gen", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), WR(Empty, Empty)))), "map", Thk(Empty, Cons(Arrow(Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Nat)), WR(Empty, Empty))), WR(Empty, Empty))), Cons(Arrow(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))), Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))), "f", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Nat)), WR(Empty, Empty))), WR(Empty, Empty)))), "l", IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), "sugar_match_unroll", Sum(Unit, Prod(Prim(Nat), Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))))), "_u", Unit), dir: Check(Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), term: Ret(Roll(Inj1(Unit))), clas: Ok(Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), rule: Ret(Der { ctx: Var(Var(Var(Var(Var(Var(Var(Var(Var(Var(Var(Def(Def(Empty, "List", Type(Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), "OpNat", Type(Sum(Unit, Prim(Nat)))), "nat_is_zero", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Bool)), WR(Empty, Empty))), WR(Empty, Empty)))), "nat_is_odd", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Bool)), WR(Empty, Empty))), WR(Empty, Empty)))), "nat_sub", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Nat)), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))), "nil", Thk(Empty, Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty)))), "cons", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Arrow(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))), Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))), "gen", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), WR(Empty, Empty)))), "map", Thk(Empty, Cons(Arrow(Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Nat)), WR(Empty, Empty))), WR(Empty, Empty))), Cons(Arrow(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))), Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))), "f", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Nat)), WR(Empty, Empty))), WR(Empty, Empty)))), "l", IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), "sugar_match_unroll", Sum(Unit, Prod(Prim(Nat), Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))))), "_u", Unit), dir: Check(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), term: Roll(Inj1(Unit)), clas: Ok(Sum(Unit, Prod(Prim(Nat), Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))))), rule: Roll(Der { ctx: Var(Var(Var(Var(Var(Var(Var(Var(Var(Var(Var(Def(Def(Empty, "List", Type(Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), "OpNat", Type(Sum(Unit, Prim(Nat)))), "nat_is_zero", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Bool)), WR(Empty, Empty))), WR(Empty, Empty)))), "nat_is_odd", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Bool)), WR(Empty, Empty))), WR(Empty, Empty)))), "nat_sub", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Nat)), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))), "nil", Thk(Empty, Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty)))), "cons", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Arrow(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))), Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))), "gen", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), WR(Empty, Empty)))), "map", Thk(Empty, Cons(Arrow(Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Nat)), WR(Empty, Empty))), WR(Empty, Empty))), Cons(Arrow(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))), Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))), "f", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Nat)), WR(Empty, Empty))), WR(Empty, Empty)))), "l", IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), "sugar_match_unroll", Sum(Unit, Prod(Prim(Nat), Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))))), "_u", Unit), dir: Check(Sum(Unit, Prod(Prim(Nat), Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))))), term: Inj1(Unit), clas: Ok(Sum(Unit, Prod(Prim(Nat), Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))))), rule: Inj1(Der { ctx: Var(Var(Var(Var(Var(Var(Var(Var(Var(Var(Var(Def(Def(Empty, "List", Type(Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), "OpNat", Type(Sum(Unit, Prim(Nat)))), "nat_is_zero", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Bool)), WR(Empty, Empty))), WR(Empty, Empty)))), "nat_is_odd", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Bool)), WR(Empty, Empty))), WR(Empty, Empty)))), "nat_sub", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Nat)), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))), "nil", Thk(Empty, Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty)))), "cons", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Arrow(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))), Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))), "gen", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), WR(Empty, Empty)))), "map", Thk(Empty, Cons(Arrow(Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Nat)), WR(Empty, Empty))), WR(Empty, Empty))), Cons(Arrow(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))), Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))), "f", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Nat)), WR(Empty, Empty))), WR(Empty, Empty)))), "l", IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), "sugar_match_unroll", Sum(Unit, Prod(Prim(Nat), Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))))), "_u", Unit), dir: Check(Unit), term: Unit, clas: Ok(Unit), rule: Unit, vis: DerVis { tmfam: "Val", local_err: false } }), vis: DerVis { tmfam: "Val", local_err: false } }), vis: DerVis { tmfam: "Val", local_err: false } }), vis: DerVis { tmfam: "Exp", local_err: false } }, "c", Der { ctx: Var(Var(Var(Var(Var(Var(Var(Var(Var(Var(Var(Def(Def(Empty, "List", Type(Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), "OpNat", Type(Sum(Unit, Prim(Nat)))), "nat_is_zero", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Bool)), WR(Empty, Empty))), WR(Empty, Empty)))), "nat_is_odd", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Bool)), WR(Empty, Empty))), WR(Empty, Empty)))), "nat_sub", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Nat)), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))), "nil", Thk(Empty, Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty)))), "cons", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Arrow(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))), Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))), "gen", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), WR(Empty, Empty)))), "map", Thk(Empty, Cons(Arrow(Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Nat)), WR(Empty, Empty))), WR(Empty, Empty))), Cons(Arrow(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))), Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))), "f", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Nat)), WR(Empty, Empty))), WR(Empty, Empty)))), "l", IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), "sugar_match_unroll", Sum(Unit, Prod(Prim(Nat), Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))))), "c", Prod(Prim(Nat), Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), dir: Check(Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), term: Let("let_split_sugar", Ret(Var("c")), Split(Var("let_split_sugar"), "h", "t", Let("h2", App(Force(Var("f")), Var("h")), Let("t2", App(App(Force(Var("map")), Var("f")), Var("t")), App(App(Force(Var("cons")), Var("h2")), Var("t2")))))), clas: Ok(Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), rule: Let("let_split_sugar", Der { ctx: Var(Var(Var(Var(Var(Var(Var(Var(Var(Var(Var(Def(Def(Empty, "List", Type(Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), "OpNat", Type(Sum(Unit, Prim(Nat)))), "nat_is_zero", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Bool)), WR(Empty, Empty))), WR(Empty, Empty)))), "nat_is_odd", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Bool)), WR(Empty, Empty))), WR(Empty, Empty)))), "nat_sub", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Nat)), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))), "nil", Thk(Empty, Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty)))), "cons", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Arrow(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))), Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))), "gen", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), WR(Empty, Empty)))), "map", Thk(Empty, Cons(Arrow(Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Nat)), WR(Empty, Empty))), WR(Empty, Empty))), Cons(Arrow(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))), Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))), "f", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Nat)), WR(Empty, Empty))), WR(Empty, Empty)))), "l", IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), "sugar_match_unroll", Sum(Unit, Prod(Prim(Nat), Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))))), "c", Prod(Prim(Nat), Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), dir: Synth, term: Ret(Var("c")), clas: Ok(Cons(Lift(Prod(Prim(Nat), Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), rule: Ret(Der { ctx: Var(Var(Var(Var(Var(Var(Var(Var(Var(Var(Var(Def(Def(Empty, "List", Type(Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), "OpNat", Type(Sum(Unit, Prim(Nat)))), "nat_is_zero", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Bool)), WR(Empty, Empty))), WR(Empty, Empty)))), "nat_is_odd", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Bool)), WR(Empty, Empty))), WR(Empty, Empty)))), "nat_sub", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Nat)), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))), "nil", Thk(Empty, Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty)))), "cons", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Arrow(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))), Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))), "gen", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), WR(Empty, Empty)))), "map", Thk(Empty, Cons(Arrow(Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Nat)), WR(Empty, Empty))), WR(Empty, Empty))), Cons(Arrow(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))), Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))), "f", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Nat)), WR(Empty, Empty))), WR(Empty, Empty)))), "l", IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), "sugar_match_unroll", Sum(Unit, Prod(Prim(Nat), Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))))), "c", Prod(Prim(Nat), Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), dir: Synth, term: Var("c"), clas: Ok(Prod(Prim(Nat), Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), rule: Var("c"), vis: DerVis { tmfam: "Val", local_err: false } }), vis: DerVis { tmfam: "Exp", local_err: false } }, Der { ctx: Var(Var(Var(Var(Var(Var(Var(Var(Var(Var(Var(Var(Def(Def(Empty, "List", Type(Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), "OpNat", Type(Sum(Unit, Prim(Nat)))), "nat_is_zero", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Bool)), WR(Empty, Empty))), WR(Empty, Empty)))), "nat_is_odd", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Bool)), WR(Empty, Empty))), WR(Empty, Empty)))), "nat_sub", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Nat)), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))), "nil", Thk(Empty, Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty)))), "cons", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Arrow(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))), Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))), "gen", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), WR(Empty, Empty)))), "map", Thk(Empty, Cons(Arrow(Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Nat)), WR(Empty, Empty))), WR(Empty, Empty))), Cons(Arrow(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))), Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))), "f", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Nat)), WR(Empty, Empty))), WR(Empty, Empty)))), "l", IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), "sugar_match_unroll", Sum(Unit, Prod(Prim(Nat), Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))))), "c", Prod(Prim(Nat), Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), "let_split_sugar", Prod(Prim(Nat), Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), dir: Check(Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), term: Split(Var("let_split_sugar"), "h", "t", Let("h2", App(Force(Var("f")), Var("h")), Let("t2", App(App(Force(Var("map")), Var("f")), Var("t")), App(App(Force(Var("cons")), Var("h2")), Var("t2"))))), clas: Ok(Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), rule: Split(Der { ctx: Var(Var(Var(Var(Var(Var(Var(Var(Var(Var(Var(Var(Def(Def(Empty, "List", Type(Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), "OpNat", Type(Sum(Unit, Prim(Nat)))), "nat_is_zero", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Bool)), WR(Empty, Empty))), WR(Empty, Empty)))), "nat_is_odd", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Bool)), WR(Empty, Empty))), WR(Empty, Empty)))), "nat_sub", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Nat)), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))), "nil", Thk(Empty, Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty)))), "cons", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Arrow(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))), Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))), "gen", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), WR(Empty, Empty)))), "map", Thk(Empty, Cons(Arrow(Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Nat)), WR(Empty, Empty))), WR(Empty, Empty))), Cons(Arrow(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))), Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))), "f", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Nat)), WR(Empty, Empty))), WR(Empty, Empty)))), "l", IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), "sugar_match_unroll", Sum(Unit, Prod(Prim(Nat), Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))))), "c", Prod(Prim(Nat), Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), "let_split_sugar", Prod(Prim(Nat), Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), dir: Synth, term: Var("let_split_sugar"), clas: Ok(Prod(Prim(Nat), Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), rule: Var("let_split_sugar"), vis: DerVis { tmfam: "Val", local_err: false } }, "h", "t", Der { ctx: Var(Var(Var(Var(Var(Var(Var(Var(Var(Var(Var(Var(Var(Var(Def(Def(Empty, "List", Type(Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), "OpNat", Type(Sum(Unit, Prim(Nat)))), "nat_is_zero", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Bool)), WR(Empty, Empty))), WR(Empty, Empty)))), "nat_is_odd", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Bool)), WR(Empty, Empty))), WR(Empty, Empty)))), "nat_sub", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Nat)), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))), "nil", Thk(Empty, Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty)))), "cons", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Arrow(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))), Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))), "gen", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), WR(Empty, Empty)))), "map", Thk(Empty, Cons(Arrow(Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Nat)), WR(Empty, Empty))), WR(Empty, Empty))), Cons(Arrow(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))), Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))), "f", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Nat)), WR(Empty, Empty))), WR(Empty, Empty)))), "l", IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), "sugar_match_unroll", Sum(Unit, Prod(Prim(Nat), Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))))), "c", Prod(Prim(Nat), Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), "let_split_sugar", Prod(Prim(Nat), Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), "h", Prim(Nat)), "t", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))), dir: Check(Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), term: Let("h2", App(Force(Var("f")), Var("h")), Let("t2", App(App(Force(Var("map")), Var("f")), Var("t")), App(App(Force(Var("cons")), Var("h2")), Var("t2")))), clas: Ok(Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), rule: Let("h2", Der { ctx: Var(Var(Var(Var(Var(Var(Var(Var(Var(Var(Var(Var(Var(Var(Def(Def(Empty, "List", Type(Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), "OpNat", Type(Sum(Unit, Prim(Nat)))), "nat_is_zero", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Bool)), WR(Empty, Empty))), WR(Empty, Empty)))), "nat_is_odd", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Bool)), WR(Empty, Empty))), WR(Empty, Empty)))), "nat_sub", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Nat)), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))), "nil", Thk(Empty, Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty)))), "cons", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Arrow(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))), Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))), "gen", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), WR(Empty, Empty)))), "map", Thk(Empty, Cons(Arrow(Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Nat)), WR(Empty, Empty))), WR(Empty, Empty))), Cons(Arrow(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))), Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))), "f", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Nat)), WR(Empty, Empty))), WR(Empty, Empty)))), "l", IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), "sugar_match_unroll", Sum(Unit, Prod(Prim(Nat), Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))))), "c", Prod(Prim(Nat), Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), "let_split_sugar", Prod(Prim(Nat), Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), "h", Prim(Nat)), "t", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))), dir: Synth, term: App(Force(Var("f")), Var("h")), clas: Ok(Cons(Lift(Prim(Nat)), WR(Empty, Empty))), rule: App(Der { ctx: Var(Var(Var(Var(Var(Var(Var(Var(Var(Var(Var(Var(Var(Var(Def(Def(Empty, "List", Type(Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), "OpNat", Type(Sum(Unit, Prim(Nat)))), "nat_is_zero", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Bool)), WR(Empty, Empty))), WR(Empty, Empty)))), "nat_is_odd", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Bool)), WR(Empty, Empty))), WR(Empty, Empty)))), "nat_sub", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Nat)), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))), "nil", Thk(Empty, Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty)))), "cons", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Arrow(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))), Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))), "gen", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), WR(Empty, Empty)))), "map", Thk(Empty, Cons(Arrow(Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Nat)), WR(Empty, Empty))), WR(Empty, Empty))), Cons(Arrow(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))), Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))), "f", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Nat)), WR(Empty, Empty))), WR(Empty, Empty)))), "l", IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), "sugar_match_unroll", Sum(Unit, Prod(Prim(Nat), Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))))), "c", Prod(Prim(Nat), Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), "let_split_sugar", Prod(Prim(Nat), Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), "h", Prim(Nat)), "t", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))), dir: Synth, term: Force(Var("f")), clas: Ok(Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Nat)), WR(Empty, Empty))), WR(Empty, Empty))), rule: Force(Der { ctx: Var(Var(Var(Var(Var(Var(Var(Var(Var(Var(Var(Var(Var(Var(Def(Def(Empty, "List", Type(Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), "OpNat", Type(Sum(Unit, Prim(Nat)))), "nat_is_zero", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Bool)), WR(Empty, Empty))), WR(Empty, Empty)))), "nat_is_odd", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Bool)), WR(Empty, Empty))), WR(Empty, Empty)))), "nat_sub", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Nat)), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))), "nil", Thk(Empty, Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty)))), "cons", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Arrow(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))), Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))), "gen", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), WR(Empty, Empty)))), "map", Thk(Empty, Cons(Arrow(Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Nat)), WR(Empty, Empty))), WR(Empty, Empty))), Cons(Arrow(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))), Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))), "f", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Nat)), WR(Empty, Empty))), WR(Empty, Empty)))), "l", IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), "sugar_match_unroll", Sum(Unit, Prod(Prim(Nat), Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))))), "c", Prod(Prim(Nat), Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), "let_split_sugar", Prod(Prim(Nat), Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), "h", Prim(Nat)), "t", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))), dir: Synth, term: Var("f"), clas: Ok(Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Nat)), WR(Empty, Empty))), WR(Empty, Empty)))), rule: Var("f"), vis: DerVis { tmfam: "Val", local_err: false } }), vis: DerVis { tmfam: "Exp", local_err: false } }, Der { ctx: Var(Var(Var(Var(Var(Var(Var(Var(Var(Var(Var(Var(Var(Var(Def(Def(Empty, "List", Type(Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), "OpNat", Type(Sum(Unit, Prim(Nat)))), "nat_is_zero", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Bool)), WR(Empty, Empty))), WR(Empty, Empty)))), "nat_is_odd", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Bool)), WR(Empty, Empty))), WR(Empty, Empty)))), "nat_sub", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Nat)), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))), "nil", Thk(Empty, Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty)))), "cons", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Arrow(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))), Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))), "gen", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), WR(Empty, Empty)))), "map", Thk(Empty, Cons(Arrow(Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Nat)), WR(Empty, Empty))), WR(Empty, Empty))), Cons(Arrow(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))), Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))), "f", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Nat)), WR(Empty, Empty))), WR(Empty, Empty)))), "l", IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), "sugar_match_unroll", Sum(Unit, Prod(Prim(Nat), Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))))), "c", Prod(Prim(Nat), Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), "let_split_sugar", Prod(Prim(Nat), Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), "h", Prim(Nat)), "t", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))), dir: Check(Prim(Nat)), term: Var("h"), clas: Ok(Prim(Nat)), rule: Var("h"), vis: DerVis { tmfam: "Val", local_err: false } }), vis: DerVis { tmfam: "Exp", local_err: false } }, Der { ctx: Var(Var(Var(Var(Var(Var(Var(Var(Var(Var(Var(Var(Var(Var(Var(Def(Def(Empty, "List", Type(Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), "OpNat", Type(Sum(Unit, Prim(Nat)))), "nat_is_zero", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Bool)), WR(Empty, Empty))), WR(Empty, Empty)))), "nat_is_odd", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Bool)), WR(Empty, Empty))), WR(Empty, Empty)))), "nat_sub", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Nat)), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))), "nil", Thk(Empty, Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty)))), "cons", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Arrow(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))), Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))), "gen", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), WR(Empty, Empty)))), "map", Thk(Empty, Cons(Arrow(Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Nat)), WR(Empty, Empty))), WR(Empty, Empty))), Cons(Arrow(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))), Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))), "f", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Nat)), WR(Empty, Empty))), WR(Empty, Empty)))), "l", IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), "sugar_match_unroll", Sum(Unit, Prod(Prim(Nat), Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))))), "c", Prod(Prim(Nat), Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), "let_split_sugar", Prod(Prim(Nat), Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), "h", Prim(Nat)), "t", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))), "h2", Prim(Nat)), dir: Check(Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), term: Let("t2", App(App(Force(Var("map")), Var("f")), Var("t")), App(App(Force(Var("cons")), Var("h2")), Var("t2"))), clas: Ok(Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), rule: Let("t2", Der { ctx: Var(Var(Var(Var(Var(Var(Var(Var(Var(Var(Var(Var(Var(Var(Var(Def(Def(Empty, "List", Type(Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), "OpNat", Type(Sum(Unit, Prim(Nat)))), "nat_is_zero", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Bool)), WR(Empty, Empty))), WR(Empty, Empty)))), "nat_is_odd", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Bool)), WR(Empty, Empty))), WR(Empty, Empty)))), "nat_sub", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Nat)), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))), "nil", Thk(Empty, Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty)))), "cons", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Arrow(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))), Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))), "gen", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), WR(Empty, Empty)))), "map", Thk(Empty, Cons(Arrow(Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Nat)), WR(Empty, Empty))), WR(Empty, Empty))), Cons(Arrow(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))), Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))), "f", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Nat)), WR(Empty, Empty))), WR(Empty, Empty)))), "l", IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), "sugar_match_unroll", Sum(Unit, Prod(Prim(Nat), Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))))), "c", Prod(Prim(Nat), Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), "let_split_sugar", Prod(Prim(Nat), Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), "h", Prim(Nat)), "t", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))), "h2", Prim(Nat)), dir: Synth, term: App(App(Force(Var("map")), Var("f")), Var("t")), clas: Ok(Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), rule: App(Der { ctx: Var(Var(Var(Var(Var(Var(Var(Var(Var(Var(Var(Var(Var(Var(Var(Def(Def(Empty, "List", Type(Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), "OpNat", Type(Sum(Unit, Prim(Nat)))), "nat_is_zero", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Bool)), WR(Empty, Empty))), WR(Empty, Empty)))), "nat_is_odd", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Bool)), WR(Empty, Empty))), WR(Empty, Empty)))), "nat_sub", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Nat)), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))), "nil", Thk(Empty, Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty)))), "cons", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Arrow(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))), Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))), "gen", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), WR(Empty, Empty)))), "map", Thk(Empty, Cons(Arrow(Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Nat)), WR(Empty, Empty))), WR(Empty, Empty))), Cons(Arrow(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))), Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))), "f", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Nat)), WR(Empty, Empty))), WR(Empty, Empty)))), "l", IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), "sugar_match_unroll", Sum(Unit, Prod(Prim(Nat), Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))))), "c", Prod(Prim(Nat), Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), "let_split_sugar", Prod(Prim(Nat), Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), "h", Prim(Nat)), "t", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))), "h2", Prim(Nat)), dir: Synth, term: App(Force(Var("map")), Var("f")), clas: Ok(Cons(Arrow(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))), Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), WR(Empty, Empty))), rule: App(Der { ctx: Var(Var(Var(Var(Var(Var(Var(Var(Var(Var(Var(Var(Var(Var(Var(Def(Def(Empty, "List", Type(Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), "OpNat", Type(Sum(Unit, Prim(Nat)))), "nat_is_zero", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Bool)), WR(Empty, Empty))), WR(Empty, Empty)))), "nat_is_odd", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Bool)), WR(Empty, Empty))), WR(Empty, Empty)))), "nat_sub", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Nat)), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))), "nil", Thk(Empty, Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty)))), "cons", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Arrow(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))), Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))), "gen", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), WR(Empty, Empty)))), "map", Thk(Empty, Cons(Arrow(Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Nat)), WR(Empty, Empty))), WR(Empty, Empty))), Cons(Arrow(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))), Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))), "f", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Nat)), WR(Empty, Empty))), WR(Empty, Empty)))), "l", IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), "sugar_match_unroll", Sum(Unit, Prod(Prim(Nat), Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))))), "c", Prod(Prim(Nat), Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), "let_split_sugar", Prod(Prim(Nat), Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), "h", Prim(Nat)), "t", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))), "h2", Prim(Nat)), dir: Synth, term: Force(Var("map")), clas: Ok(Cons(Arrow(Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Nat)), WR(Empty, Empty))), WR(Empty, Empty))), Cons(Arrow(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))), Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty))), rule: Force(Der { ctx: Var(Var(Var(Var(Var(Var(Var(Var(Var(Var(Var(Var(Var(Var(Var(Def(Def(Empty, "List", Type(Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), "OpNat", Type(Sum(Unit, Prim(Nat)))), "nat_is_zero", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Bool)), WR(Empty, Empty))), WR(Empty, Empty)))), "nat_is_odd", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Bool)), WR(Empty, Empty))), WR(Empty, Empty)))), "nat_sub", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Nat)), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))), "nil", Thk(Empty, Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty)))), "cons", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Arrow(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))), Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))), "gen", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), WR(Empty, Empty)))), "map", Thk(Empty, Cons(Arrow(Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Nat)), WR(Empty, Empty))), WR(Empty, Empty))), Cons(Arrow(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))), Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))), "f", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Nat)), WR(Empty, Empty))), WR(Empty, Empty)))), "l", IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), "sugar_match_unroll", Sum(Unit, Prod(Prim(Nat), Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))))), "c", Prod(Prim(Nat), Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), "let_split_sugar", Prod(Prim(Nat), Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), "h", Prim(Nat)), "t", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))), "h2", Prim(Nat)), dir: Synth, term: Var("map"), clas: Ok(Thk(Empty, Cons(Arrow(Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Nat)), WR(Empty, Empty))), WR(Empty, Empty))), Cons(Arrow(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))), Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))), rule: Var("map"), vis: DerVis { tmfam: "Val", local_err: false } }), vis: DerVis { tmfam: "Exp", local_err: false } }, Der { ctx: Var(Var(Var(Var(Var(Var(Var(Var(Var(Var(Var(Var(Var(Var(Var(Def(Def(Empty, "List", Type(Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), "OpNat", Type(Sum(Unit, Prim(Nat)))), "nat_is_zero", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Bool)), WR(Empty, Empty))), WR(Empty, Empty)))), "nat_is_odd", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Bool)), WR(Empty, Empty))), WR(Empty, Empty)))), "nat_sub", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Nat)), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))), "nil", Thk(Empty, Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty)))), "cons", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Arrow(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))), Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))), "gen", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), WR(Empty, Empty)))), "map", Thk(Empty, Cons(Arrow(Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Nat)), WR(Empty, Empty))), WR(Empty, Empty))), Cons(Arrow(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))), Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))), "f", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Nat)), WR(Empty, Empty))), WR(Empty, Empty)))), "l", IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), "sugar_match_unroll", Sum(Unit, Prod(Prim(Nat), Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))))), "c", Prod(Prim(Nat), Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), "let_split_sugar", Prod(Prim(Nat), Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), "h", Prim(Nat)), "t", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))), "h2", Prim(Nat)), dir: Check(Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Nat)), WR(Empty, Empty))), WR(Empty, Empty)))), term: Var("f"), clas: Ok(Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Nat)), WR(Empty, Empty))), WR(Empty, Empty)))), rule: Var("f"), vis: DerVis { tmfam: "Val", local_err: false } }), vis: DerVis { tmfam: "Exp", local_err: false } }, Der { ctx: Var(Var(Var(Var(Var(Var(Var(Var(Var(Var(Var(Var(Var(Var(Var(Def(Def(Empty, "List", Type(Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), "OpNat", Type(Sum(Unit, Prim(Nat)))), "nat_is_zero", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Bool)), WR(Empty, Empty))), WR(Empty, Empty)))), "nat_is_odd", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Bool)), WR(Empty, Empty))), WR(Empty, Empty)))), "nat_sub", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Nat)), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))), "nil", Thk(Empty, Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty)))), "cons", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Arrow(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))), Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))), "gen", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), WR(Empty, Empty)))), "map", Thk(Empty, Cons(Arrow(Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Nat)), WR(Empty, Empty))), WR(Empty, Empty))), Cons(Arrow(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))), Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))), "f", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Nat)), WR(Empty, Empty))), WR(Empty, Empty)))), "l", IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), "sugar_match_unroll", Sum(Unit, Prod(Prim(Nat), Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))))), "c", Prod(Prim(Nat), Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), "let_split_sugar", Prod(Prim(Nat), Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), "h", Prim(Nat)), "t", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))), "h2", Prim(Nat)), dir: Check(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), term: Var("t"), clas: Ok(Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))), rule: Var("t"), vis: DerVis { tmfam: "Val", local_err: false } }), vis: DerVis { tmfam: "Exp", local_err: false } }, Der { ctx: Var(Var(Var(Var(Var(Var(Var(Var(Var(Var(Var(Var(Var(Var(Var(Var(Def(Def(Empty, "List", Type(Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), "OpNat", Type(Sum(Unit, Prim(Nat)))), "nat_is_zero", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Bool)), WR(Empty, Empty))), WR(Empty, Empty)))), "nat_is_odd", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Bool)), WR(Empty, Empty))), WR(Empty, Empty)))), "nat_sub", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Nat)), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))), "nil", Thk(Empty, Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty)))), "cons", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Arrow(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))), Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))), "gen", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), WR(Empty, Empty)))), "map", Thk(Empty, Cons(Arrow(Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Nat)), WR(Empty, Empty))), WR(Empty, Empty))), Cons(Arrow(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))), Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))), "f", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Nat)), WR(Empty, Empty))), WR(Empty, Empty)))), "l", IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), "sugar_match_unroll", Sum(Unit, Prod(Prim(Nat), Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))))), "c", Prod(Prim(Nat), Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), "let_split_sugar", Prod(Prim(Nat), Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), "h", Prim(Nat)), "t", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))), "h2", Prim(Nat)), "t2", IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), dir: Synth, term: App(App(Force(Var("cons")), Var("h2")), Var("t2")), clas: Ok(Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), rule: App(Der { ctx: Var(Var(Var(Var(Var(Var(Var(Var(Var(Var(Var(Var(Var(Var(Var(Var(Def(Def(Empty, "List", Type(Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), "OpNat", Type(Sum(Unit, Prim(Nat)))), "nat_is_zero", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Bool)), WR(Empty, Empty))), WR(Empty, Empty)))), "nat_is_odd", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Bool)), WR(Empty, Empty))), WR(Empty, Empty)))), "nat_sub", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Nat)), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))), "nil", Thk(Empty, Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty)))), "cons", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Arrow(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))), Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))), "gen", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), WR(Empty, Empty)))), "map", Thk(Empty, Cons(Arrow(Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Nat)), WR(Empty, Empty))), WR(Empty, Empty))), Cons(Arrow(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))), Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))), "f", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Nat)), WR(Empty, Empty))), WR(Empty, Empty)))), "l", IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), "sugar_match_unroll", Sum(Unit, Prod(Prim(Nat), Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))))), "c", Prod(Prim(Nat), Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), "let_split_sugar", Prod(Prim(Nat), Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), "h", Prim(Nat)), "t", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))), "h2", Prim(Nat)), "t2", IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), dir: Synth, term: App(Force(Var("cons")), Var("h2")), clas: Ok(Cons(Arrow(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))), Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), WR(Empty, Empty))), rule: App(Der { ctx: Var(Var(Var(Var(Var(Var(Var(Var(Var(Var(Var(Var(Var(Var(Var(Var(Def(Def(Empty, "List", Type(Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), "OpNat", Type(Sum(Unit, Prim(Nat)))), "nat_is_zero", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Bool)), WR(Empty, Empty))), WR(Empty, Empty)))), "nat_is_odd", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Bool)), WR(Empty, Empty))), WR(Empty, Empty)))), "nat_sub", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Nat)), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))), "nil", Thk(Empty, Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty)))), "cons", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Arrow(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))), Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))), "gen", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), WR(Empty, Empty)))), "map", Thk(Empty, Cons(Arrow(Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Nat)), WR(Empty, Empty))), WR(Empty, Empty))), Cons(Arrow(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))), Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))), "f", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Nat)), WR(Empty, Empty))), WR(Empty, Empty)))), "l", IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), "sugar_match_unroll", Sum(Unit, Prod(Prim(Nat), Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))))), "c", Prod(Prim(Nat), Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), "let_split_sugar", Prod(Prim(Nat), Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), "h", Prim(Nat)), "t", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))), "h2", Prim(Nat)), "t2", IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), dir: Synth, term: Force(Var("cons")), clas: Ok(Cons(Arrow(Prim(Nat), Cons(Arrow(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))), Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty))), rule: Force(Der { ctx: Var(Var(Var(Var(Var(Var(Var(Var(Var(Var(Var(Var(Var(Var(Var(Var(Def(Def(Empty, "List", Type(Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), "OpNat", Type(Sum(Unit, Prim(Nat)))), "nat_is_zero", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Bool)), WR(Empty, Empty))), WR(Empty, Empty)))), "nat_is_odd", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Bool)), WR(Empty, Empty))), WR(Empty, Empty)))), "nat_sub", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Nat)), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))), "nil", Thk(Empty, Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty)))), "cons", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Arrow(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))), Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))), "gen", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), WR(Empty, Empty)))), "map", Thk(Empty, Cons(Arrow(Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Nat)), WR(Empty, Empty))), WR(Empty, Empty))), Cons(Arrow(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))), Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))), "f", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Nat)), WR(Empty, Empty))), WR(Empty, Empty)))), "l", IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), "sugar_match_unroll", Sum(Unit, Prod(Prim(Nat), Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))))), "c", Prod(Prim(Nat), Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), "let_split_sugar", Prod(Prim(Nat), Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), "h", Prim(Nat)), "t", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))), "h2", Prim(Nat)), "t2", IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), dir: Synth, term: Var("cons"), clas: Ok(Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Arrow(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))), Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))), rule: Var("cons"), vis: DerVis { tmfam: "Val", local_err: false } }), vis: DerVis { tmfam: "Exp", local_err: false } }, Der { ctx: Var(Var(Var(Var(Var(Var(Var(Var(Var(Var(Var(Var(Var(Var(Var(Var(Def(Def(Empty, "List", Type(Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), "OpNat", Type(Sum(Unit, Prim(Nat)))), "nat_is_zero", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Bool)), WR(Empty, Empty))), WR(Empty, Empty)))), "nat_is_odd", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Bool)), WR(Empty, Empty))), WR(Empty, Empty)))), "nat_sub", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Nat)), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))), "nil", Thk(Empty, Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty)))), "cons", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Arrow(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))), Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))), "gen", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), WR(Empty, Empty)))), "map", Thk(Empty, Cons(Arrow(Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Nat)), WR(Empty, Empty))), WR(Empty, Empty))), Cons(Arrow(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))), Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))), "f", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Nat)), WR(Empty, Empty))), WR(Empty, Empty)))), "l", IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), "sugar_match_unroll", Sum(Unit, Prod(Prim(Nat), Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))))), "c", Prod(Prim(Nat), Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), "let_split_sugar", Prod(Prim(Nat), Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), "h", Prim(Nat)), "t", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))), "h2", Prim(Nat)), "t2", IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), dir: Check(Prim(Nat)), term: Var("h2"), clas: Ok(Prim(Nat)), rule: Var("h2"), vis: DerVis { tmfam: "Val", local_err: false } }), vis: DerVis { tmfam: "Exp", local_err: false } }, Der { ctx: Var(Var(Var(Var(Var(Var(Var(Var(Var(Var(Var(Var(Var(Var(Var(Var(Def(Def(Empty, "List", Type(Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), "OpNat", Type(Sum(Unit, Prim(Nat)))), "nat_is_zero", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Bool)), WR(Empty, Empty))), WR(Empty, Empty)))), "nat_is_odd", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Bool)), WR(Empty, Empty))), WR(Empty, Empty)))), "nat_sub", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Nat)), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))), "nil", Thk(Empty, Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty)))), "cons", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Arrow(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))), Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))), "gen", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), WR(Empty, Empty)))), "map", Thk(Empty, Cons(Arrow(Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Nat)), WR(Empty, Empty))), WR(Empty, Empty))), Cons(Arrow(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))), Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))), "f", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Nat)), WR(Empty, Empty))), WR(Empty, Empty)))), "l", IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), "sugar_match_unroll", Sum(Unit, Prod(Prim(Nat), Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))))), "c", Prod(Prim(Nat), Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), "let_split_sugar", Prod(Prim(Nat), Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), "h", Prim(Nat)), "t", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))), "h2", Prim(Nat)), "t2", IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), dir: Check(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), term: Var("t2"), clas: Ok(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), rule: Var("t2"), vis: DerVis { tmfam: "Val", local_err: false } }), vis: DerVis { tmfam: "Exp", local_err: false } }), vis: DerVis { tmfam: "Exp", local_err: false } }), vis: DerVis { tmfam: "Exp", local_err: false } }), vis: DerVis { tmfam: "Exp", local_err: false } }), vis: DerVis { tmfam: "Exp", local_err: false } }), vis: DerVis { tmfam: "Exp", local_err: false } }), vis: DerVis { tmfam: "Exp", local_err: false } }), vis: DerVis { tmfam: "Exp", local_err: false } }), vis: DerVis { tmfam: "Exp", local_err: false } }), vis: DerVis { tmfam: "Exp", local_err: false } }), vis: DerVis { tmfam: "Val", local_err: false } }), vis: DerVis { tmfam: "Module", local_err: false } } }), Bind(ItemDer { doc: None, qual: Val, var: "filter", der: Der { ctx: Var(Var(Var(Var(Var(Var(Var(Def(Def(Empty, "List", Type(Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), "OpNat", Type(Sum(Unit, Prim(Nat)))), "nat_is_zero", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Bool)), WR(Empty, Empty))), WR(Empty, Empty)))), "nat_is_odd", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Bool)), WR(Empty, Empty))), WR(Empty, Empty)))), "nat_sub", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Nat)), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))), "nil", Thk(Empty, Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty)))), "cons", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Arrow(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))), Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))), "gen", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), WR(Empty, Empty)))), "map", Thk(Empty, Cons(Arrow(Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Nat)), WR(Empty, Empty))), WR(Empty, Empty))), Cons(Arrow(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))), Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))), dir: Synth, term: (), clas: Ok(Type(Thk(Empty, Cons(Arrow(Thk(Empty, Cons(Arrow(Ident("Nat"), Cons(Lift(Ident("Bool")), WR(Empty, Empty))), WR(Empty, Empty))), Cons(Arrow(Ident("List"), Cons(Lift(Ident("List")), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty))))), rule: Fn("filter", Der { ctx: Var(Var(Var(Var(Var(Var(Var(Def(Def(Empty, "List", Type(Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), "OpNat", Type(Sum(Unit, Prim(Nat)))), "nat_is_zero", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Bool)), WR(Empty, Empty))), WR(Empty, Empty)))), "nat_is_odd", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Bool)), WR(Empty, Empty))), WR(Empty, Empty)))), "nat_sub", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Nat)), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))), "nil", Thk(Empty, Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty)))), "cons", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Arrow(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))), Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))), "gen", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), WR(Empty, Empty)))), "map", Thk(Empty, Cons(Arrow(Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Nat)), WR(Empty, Empty))), WR(Empty, Empty))), Cons(Arrow(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))), Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))), dir: Check(Thk(Empty, Cons(Arrow(Thk(Empty, Cons(Arrow(Ident("Nat"), Cons(Lift(Ident("Bool")), WR(Empty, Empty))), WR(Empty, Empty))), Cons(Arrow(Ident("List"), Cons(Lift(Ident("List")), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))), term: ThunkAnon(Fix("filter", Lam("f", Lam("l", Unroll(Var("l"), "sugar_match_unroll", Case(Var("sugar_match_unroll"), "_u", Ret(Roll(Inj1(Unit))), "c", Let("let_split_sugar", Ret(Var("c")), Split(Var("let_split_sugar"), "h", "t", Let("t2", App(App(Force(Var("filter")), Var("f")), Var("t")), Let("sugar_if_scrutinee", App(Force(Var("f")), Var("h")), IfThenElse(Var("sugar_if_scrutinee"), App(App(Force(Var("cons")), Var("h")), Var("t2")), Ret(Var("t2"))))))))))))), clas: Ok(Thk(Empty, Cons(Arrow(Thk(Empty, Cons(Arrow(Ident("Nat"), Cons(Lift(Ident("Bool")), WR(Empty, Empty))), WR(Empty, Empty))), Cons(Arrow(Ident("List"), Cons(Lift(Ident("List")), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))), rule: ThunkAnon(Der { ctx: Var(Var(Var(Var(Var(Var(Var(Def(Def(Empty, "List", Type(Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), "OpNat", Type(Sum(Unit, Prim(Nat)))), "nat_is_zero", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Bool)), WR(Empty, Empty))), WR(Empty, Empty)))), "nat_is_odd", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Bool)), WR(Empty, Empty))), WR(Empty, Empty)))), "nat_sub", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Nat)), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))), "nil", Thk(Empty, Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty)))), "cons", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Arrow(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))), Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))), "gen", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), WR(Empty, Empty)))), "map", Thk(Empty, Cons(Arrow(Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Nat)), WR(Empty, Empty))), WR(Empty, Empty))), Cons(Arrow(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))), Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))), dir: Check(Cons(Arrow(Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Bool)), WR(Empty, Empty))), WR(Empty, Empty))), Cons(Arrow(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))), Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty))), term: Fix("filter", Lam("f", Lam("l", Unroll(Var("l"), "sugar_match_unroll", Case(Var("sugar_match_unroll"), "_u", Ret(Roll(Inj1(Unit))), "c", Let("let_split_sugar", Ret(Var("c")), Split(Var("let_split_sugar"), "h", "t", Let("t2", App(App(Force(Var("filter")), Var("f")), Var("t")), Let("sugar_if_scrutinee", App(Force(Var("f")), Var("h")), IfThenElse(Var("sugar_if_scrutinee"), App(App(Force(Var("cons")), Var("h")), Var("t2")), Ret(Var("t2")))))))))))), clas: Ok(Cons(Arrow(Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Bool)), WR(Empty, Empty))), WR(Empty, Empty))), Cons(Arrow(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))), Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty))), rule: Fix("filter", Der { ctx: Var(Var(Var(Var(Var(Var(Var(Var(Def(Def(Empty, "List", Type(Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), "OpNat", Type(Sum(Unit, Prim(Nat)))), "nat_is_zero", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Bool)), WR(Empty, Empty))), WR(Empty, Empty)))), "nat_is_odd", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Bool)), WR(Empty, Empty))), WR(Empty, Empty)))), "nat_sub", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Nat)), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))), "nil", Thk(Empty, Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty)))), "cons", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Arrow(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))), Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))), "gen", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), WR(Empty, Empty)))), "map", Thk(Empty, Cons(Arrow(Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Nat)), WR(Empty, Empty))), WR(Empty, Empty))), Cons(Arrow(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))), Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))), "filter", Thk(Empty, Cons(Arrow(Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Bool)), WR(Empty, Empty))), WR(Empty, Empty))), Cons(Arrow(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))), Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))), dir: Check(Cons(Arrow(Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Bool)), WR(Empty, Empty))), WR(Empty, Empty))), Cons(Arrow(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))), Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty))), term: Lam("f", Lam("l", Unroll(Var("l"), "sugar_match_unroll", Case(Var("sugar_match_unroll"), "_u", Ret(Roll(Inj1(Unit))), "c", Let("let_split_sugar", Ret(Var("c")), Split(Var("let_split_sugar"), "h", "t", Let("t2", App(App(Force(Var("filter")), Var("f")), Var("t")), Let("sugar_if_scrutinee", App(Force(Var("f")), Var("h")), IfThenElse(Var("sugar_if_scrutinee"), App(App(Force(Var("cons")), Var("h")), Var("t2")), Ret(Var("t2"))))))))))), clas: Ok(Cons(Arrow(Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Bool)), WR(Empty, Empty))), WR(Empty, Empty))), Cons(Arrow(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))), Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty))), rule: Lam("f", Der { ctx: Var(Var(Var(Var(Var(Var(Var(Var(Var(Def(Def(Empty, "List", Type(Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), "OpNat", Type(Sum(Unit, Prim(Nat)))), "nat_is_zero", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Bool)), WR(Empty, Empty))), WR(Empty, Empty)))), "nat_is_odd", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Bool)), WR(Empty, Empty))), WR(Empty, Empty)))), "nat_sub", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Nat)), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))), "nil", Thk(Empty, Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty)))), "cons", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Arrow(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))), Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))), "gen", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), WR(Empty, Empty)))), "map", Thk(Empty, Cons(Arrow(Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Nat)), WR(Empty, Empty))), WR(Empty, Empty))), Cons(Arrow(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))), Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))), "filter", Thk(Empty, Cons(Arrow(Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Bool)), WR(Empty, Empty))), WR(Empty, Empty))), Cons(Arrow(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))), Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))), "f", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Bool)), WR(Empty, Empty))), WR(Empty, Empty)))), dir: Check(Cons(Arrow(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))), Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), WR(Empty, Empty))), term: Lam("l", Unroll(Var("l"), "sugar_match_unroll", Case(Var("sugar_match_unroll"), "_u", Ret(Roll(Inj1(Unit))), "c", Let("let_split_sugar", Ret(Var("c")), Split(Var("let_split_sugar"), "h", "t", Let("t2", App(App(Force(Var("filter")), Var("f")), Var("t")), Let("sugar_if_scrutinee", App(Force(Var("f")), Var("h")), IfThenElse(Var("sugar_if_scrutinee"), App(App(Force(Var("cons")), Var("h")), Var("t2")), Ret(Var("t2")))))))))), clas: Ok(Cons(Arrow(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))), Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), WR(Empty, Empty))), rule: Lam("l", Der { ctx: Var(Var(Var(Var(Var(Var(Var(Var(Var(Var(Def(Def(Empty, "List", Type(Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), "OpNat", Type(Sum(Unit, Prim(Nat)))), "nat_is_zero", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Bool)), WR(Empty, Empty))), WR(Empty, Empty)))), "nat_is_odd", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Bool)), WR(Empty, Empty))), WR(Empty, Empty)))), "nat_sub", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Nat)), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))), "nil", Thk(Empty, Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty)))), "cons", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Arrow(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))), Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))), "gen", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), WR(Empty, Empty)))), "map", Thk(Empty, Cons(Arrow(Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Nat)), WR(Empty, Empty))), WR(Empty, Empty))), Cons(Arrow(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))), Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))), "filter", Thk(Empty, Cons(Arrow(Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Bool)), WR(Empty, Empty))), WR(Empty, Empty))), Cons(Arrow(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))), Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))), "f", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Bool)), WR(Empty, Empty))), WR(Empty, Empty)))), "l", IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), dir: Check(Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), term: Unroll(Var("l"), "sugar_match_unroll", Case(Var("sugar_match_unroll"), "_u", Ret(Roll(Inj1(Unit))), "c", Let("let_split_sugar", Ret(Var("c")), Split(Var("let_split_sugar"), "h", "t", Let("t2", App(App(Force(Var("filter")), Var("f")), Var("t")), Let("sugar_if_scrutinee", App(Force(Var("f")), Var("h")), IfThenElse(Var("sugar_if_scrutinee"), App(App(Force(Var("cons")), Var("h")), Var("t2")), Ret(Var("t2"))))))))), clas: Ok(Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), rule: Unroll(Der { ctx: Var(Var(Var(Var(Var(Var(Var(Var(Var(Var(Def(Def(Empty, "List", Type(Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), "OpNat", Type(Sum(Unit, Prim(Nat)))), "nat_is_zero", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Bool)), WR(Empty, Empty))), WR(Empty, Empty)))), "nat_is_odd", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Bool)), WR(Empty, Empty))), WR(Empty, Empty)))), "nat_sub", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Nat)), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))), "nil", Thk(Empty, Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty)))), "cons", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Arrow(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))), Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))), "gen", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), WR(Empty, Empty)))), "map", Thk(Empty, Cons(Arrow(Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Nat)), WR(Empty, Empty))), WR(Empty, Empty))), Cons(Arrow(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))), Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))), "filter", Thk(Empty, Cons(Arrow(Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Bool)), WR(Empty, Empty))), WR(Empty, Empty))), Cons(Arrow(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))), Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))), "f", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Bool)), WR(Empty, Empty))), WR(Empty, Empty)))), "l", IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), dir: Synth, term: Var("l"), clas: Ok(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), rule: Var("l"), vis: DerVis { tmfam: "Val", local_err: false } }, "sugar_match_unroll", Der { ctx: Var(Var(Var(Var(Var(Var(Var(Var(Var(Var(Var(Def(Def(Empty, "List", Type(Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), "OpNat", Type(Sum(Unit, Prim(Nat)))), "nat_is_zero", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Bool)), WR(Empty, Empty))), WR(Empty, Empty)))), "nat_is_odd", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Bool)), WR(Empty, Empty))), WR(Empty, Empty)))), "nat_sub", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Nat)), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))), "nil", Thk(Empty, Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty)))), "cons", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Arrow(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))), Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))), "gen", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), WR(Empty, Empty)))), "map", Thk(Empty, Cons(Arrow(Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Nat)), WR(Empty, Empty))), WR(Empty, Empty))), Cons(Arrow(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))), Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))), "filter", Thk(Empty, Cons(Arrow(Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Bool)), WR(Empty, Empty))), WR(Empty, Empty))), Cons(Arrow(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))), Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))), "f", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Bool)), WR(Empty, Empty))), WR(Empty, Empty)))), "l", IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), "sugar_match_unroll", Sum(Unit, Prod(Prim(Nat), Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))))), dir: Check(Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), term: Case(Var("sugar_match_unroll"), "_u", Ret(Roll(Inj1(Unit))), "c", Let("let_split_sugar", Ret(Var("c")), Split(Var("let_split_sugar"), "h", "t", Let("t2", App(App(Force(Var("filter")), Var("f")), Var("t")), Let("sugar_if_scrutinee", App(Force(Var("f")), Var("h")), IfThenElse(Var("sugar_if_scrutinee"), App(App(Force(Var("cons")), Var("h")), Var("t2")), Ret(Var("t2")))))))), clas: Ok(Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), rule: Case(Der { ctx: Var(Var(Var(Var(Var(Var(Var(Var(Var(Var(Var(Def(Def(Empty, "List", Type(Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), "OpNat", Type(Sum(Unit, Prim(Nat)))), "nat_is_zero", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Bool)), WR(Empty, Empty))), WR(Empty, Empty)))), "nat_is_odd", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Bool)), WR(Empty, Empty))), WR(Empty, Empty)))), "nat_sub", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Nat)), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))), "nil", Thk(Empty, Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty)))), "cons", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Arrow(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))), Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))), "gen", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), WR(Empty, Empty)))), "map", Thk(Empty, Cons(Arrow(Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Nat)), WR(Empty, Empty))), WR(Empty, Empty))), Cons(Arrow(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))), Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))), "filter", Thk(Empty, Cons(Arrow(Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Bool)), WR(Empty, Empty))), WR(Empty, Empty))), Cons(Arrow(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))), Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))), "f", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Bool)), WR(Empty, Empty))), WR(Empty, Empty)))), "l", IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), "sugar_match_unroll", Sum(Unit, Prod(Prim(Nat), Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))))), dir: Synth, term: Var("sugar_match_unroll"), clas: Ok(Sum(Unit, Prod(Prim(Nat), Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))))), rule: Var("sugar_match_unroll"), vis: DerVis { tmfam: "Val", local_err: false } }, "_u", Der { ctx: Var(Var(Var(Var(Var(Var(Var(Var(Var(Var(Var(Var(Def(Def(Empty, "List", Type(Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), "OpNat", Type(Sum(Unit, Prim(Nat)))), "nat_is_zero", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Bool)), WR(Empty, Empty))), WR(Empty, Empty)))), "nat_is_odd", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Bool)), WR(Empty, Empty))), WR(Empty, Empty)))), "nat_sub", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Nat)), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))), "nil", Thk(Empty, Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty)))), "cons", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Arrow(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))), Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))), "gen", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), WR(Empty, Empty)))), "map", Thk(Empty, Cons(Arrow(Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Nat)), WR(Empty, Empty))), WR(Empty, Empty))), Cons(Arrow(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))), Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))), "filter", Thk(Empty, Cons(Arrow(Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Bool)), WR(Empty, Empty))), WR(Empty, Empty))), Cons(Arrow(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))), Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))), "f", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Bool)), WR(Empty, Empty))), WR(Empty, Empty)))), "l", IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), "sugar_match_unroll", Sum(Unit, Prod(Prim(Nat), Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))))), "_u", Unit), dir: Check(Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), term: Ret(Roll(Inj1(Unit))), clas: Ok(Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), rule: Ret(Der { ctx: Var(Var(Var(Var(Var(Var(Var(Var(Var(Var(Var(Var(Def(Def(Empty, "List", Type(Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), "OpNat", Type(Sum(Unit, Prim(Nat)))), "nat_is_zero", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Bool)), WR(Empty, Empty))), WR(Empty, Empty)))), "nat_is_odd", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Bool)), WR(Empty, Empty))), WR(Empty, Empty)))), "nat_sub", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Nat)), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))), "nil", Thk(Empty, Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty)))), "cons", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Arrow(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))), Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))), "gen", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), WR(Empty, Empty)))), "map", Thk(Empty, Cons(Arrow(Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Nat)), WR(Empty, Empty))), WR(Empty, Empty))), Cons(Arrow(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))), Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))), "filter", Thk(Empty, Cons(Arrow(Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Bool)), WR(Empty, Empty))), WR(Empty, Empty))), Cons(Arrow(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))), Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))), "f", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Bool)), WR(Empty, Empty))), WR(Empty, Empty)))), "l", IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), "sugar_match_unroll", Sum(Unit, Prod(Prim(Nat), Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))))), "_u", Unit), dir: Check(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), term: Roll(Inj1(Unit)), clas: Ok(Sum(Unit, Prod(Prim(Nat), Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))))), rule: Roll(Der { ctx: Var(Var(Var(Var(Var(Var(Var(Var(Var(Var(Var(Var(Def(Def(Empty, "List", Type(Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), "OpNat", Type(Sum(Unit, Prim(Nat)))), "nat_is_zero", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Bool)), WR(Empty, Empty))), WR(Empty, Empty)))), "nat_is_odd", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Bool)), WR(Empty, Empty))), WR(Empty, Empty)))), "nat_sub", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Nat)), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))), "nil", Thk(Empty, Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty)))), "cons", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Arrow(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))), Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))), "gen", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), WR(Empty, Empty)))), "map", Thk(Empty, Cons(Arrow(Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Nat)), WR(Empty, Empty))), WR(Empty, Empty))), Cons(Arrow(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))), Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))), "filter", Thk(Empty, Cons(Arrow(Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Bool)), WR(Empty, Empty))), WR(Empty, Empty))), Cons(Arrow(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))), Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))), "f", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Bool)), WR(Empty, Empty))), WR(Empty, Empty)))), "l", IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), "sugar_match_unroll", Sum(Unit, Prod(Prim(Nat), Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))))), "_u", Unit), dir: Check(Sum(Unit, Prod(Prim(Nat), Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))))), term: Inj1(Unit), clas: Ok(Sum(Unit, Prod(Prim(Nat), Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))))), rule: Inj1(Der { ctx: Var(Var(Var(Var(Var(Var(Var(Var(Var(Var(Var(Var(Def(Def(Empty, "List", Type(Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), "OpNat", Type(Sum(Unit, Prim(Nat)))), "nat_is_zero", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Bool)), WR(Empty, Empty))), WR(Empty, Empty)))), "nat_is_odd", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Bool)), WR(Empty, Empty))), WR(Empty, Empty)))), "nat_sub", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Nat)), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))), "nil", Thk(Empty, Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty)))), "cons", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Arrow(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))), Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))), "gen", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), WR(Empty, Empty)))), "map", Thk(Empty, Cons(Arrow(Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Nat)), WR(Empty, Empty))), WR(Empty, Empty))), Cons(Arrow(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))), Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))), "filter", Thk(Empty, Cons(Arrow(Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Bool)), WR(Empty, Empty))), WR(Empty, Empty))), Cons(Arrow(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))), Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))), "f", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Bool)), WR(Empty, Empty))), WR(Empty, Empty)))), "l", IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), "sugar_match_unroll", Sum(Unit, Prod(Prim(Nat), Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))))), "_u", Unit), dir: Check(Unit), term: Unit, clas: Ok(Unit), rule: Unit, vis: DerVis { tmfam: "Val", local_err: false } }), vis: DerVis { tmfam: "Val", local_err: false } }), vis: DerVis { tmfam: "Val", local_err: false } }), vis: DerVis { tmfam: "Exp", local_err: false } }, "c", Der { ctx: Var(Var(Var(Var(Var(Var(Var(Var(Var(Var(Var(Var(Def(Def(Empty, "List", Type(Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), "OpNat", Type(Sum(Unit, Prim(Nat)))), "nat_is_zero", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Bool)), WR(Empty, Empty))), WR(Empty, Empty)))), "nat_is_odd", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Bool)), WR(Empty, Empty))), WR(Empty, Empty)))), "nat_sub", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Nat)), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))), "nil", Thk(Empty, Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty)))), "cons", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Arrow(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))), Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))), "gen", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), WR(Empty, Empty)))), "map", Thk(Empty, Cons(Arrow(Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Nat)), WR(Empty, Empty))), WR(Empty, Empty))), Cons(Arrow(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))), Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))), "filter", Thk(Empty, Cons(Arrow(Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Bool)), WR(Empty, Empty))), WR(Empty, Empty))), Cons(Arrow(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))), Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))), "f", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Bool)), WR(Empty, Empty))), WR(Empty, Empty)))), "l", IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), "sugar_match_unroll", Sum(Unit, Prod(Prim(Nat), Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))))), "c", Prod(Prim(Nat), Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), dir: Check(Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), term: Let("let_split_sugar", Ret(Var("c")), Split(Var("let_split_sugar"), "h", "t", Let("t2", App(App(Force(Var("filter")), Var("f")), Var("t")), Let("sugar_if_scrutinee", App(Force(Var("f")), Var("h")), IfThenElse(Var("sugar_if_scrutinee"), App(App(Force(Var("cons")), Var("h")), Var("t2")), Ret(Var("t2"))))))), clas: Ok(Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), rule: Let("let_split_sugar", Der { ctx: Var(Var(Var(Var(Var(Var(Var(Var(Var(Var(Var(Var(Def(Def(Empty, "List", Type(Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), "OpNat", Type(Sum(Unit, Prim(Nat)))), "nat_is_zero", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Bool)), WR(Empty, Empty))), WR(Empty, Empty)))), "nat_is_odd", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Bool)), WR(Empty, Empty))), WR(Empty, Empty)))), "nat_sub", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Nat)), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))), "nil", Thk(Empty, Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty)))), "cons", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Arrow(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))), Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))), "gen", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), WR(Empty, Empty)))), "map", Thk(Empty, Cons(Arrow(Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Nat)), WR(Empty, Empty))), WR(Empty, Empty))), Cons(Arrow(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))), Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))), "filter", Thk(Empty, Cons(Arrow(Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Bool)), WR(Empty, Empty))), WR(Empty, Empty))), Cons(Arrow(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))), Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))), "f", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Bool)), WR(Empty, Empty))), WR(Empty, Empty)))), "l", IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), "sugar_match_unroll", Sum(Unit, Prod(Prim(Nat), Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))))), "c", Prod(Prim(Nat), Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), dir: Synth, term: Ret(Var("c")), clas: Ok(Cons(Lift(Prod(Prim(Nat), Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), rule: Ret(Der { ctx: Var(Var(Var(Var(Var(Var(Var(Var(Var(Var(Var(Var(Def(Def(Empty, "List", Type(Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), "OpNat", Type(Sum(Unit, Prim(Nat)))), "nat_is_zero", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Bool)), WR(Empty, Empty))), WR(Empty, Empty)))), "nat_is_odd", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Bool)), WR(Empty, Empty))), WR(Empty, Empty)))), "nat_sub", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Nat)), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))), "nil", Thk(Empty, Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty)))), "cons", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Arrow(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))), Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))), "gen", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), WR(Empty, Empty)))), "map", Thk(Empty, Cons(Arrow(Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Nat)), WR(Empty, Empty))), WR(Empty, Empty))), Cons(Arrow(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))), Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))), "filter", Thk(Empty, Cons(Arrow(Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Bool)), WR(Empty, Empty))), WR(Empty, Empty))), Cons(Arrow(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))), Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))), "f", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Bool)), WR(Empty, Empty))), WR(Empty, Empty)))), "l", IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), "sugar_match_unroll", Sum(Unit, Prod(Prim(Nat), Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))))), "c", Prod(Prim(Nat), Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), dir: Synth, term: Var("c"), clas: Ok(Prod(Prim(Nat), Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), rule: Var("c"), vis: DerVis { tmfam: "Val", local_err: false } }), vis: DerVis { tmfam: "Exp", local_err: false } }, Der { ctx: Var(Var(Var(Var(Var(Var(Var(Var(Var(Var(Var(Var(Var(Def(Def(Empty, "List", Type(Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), "OpNat", Type(Sum(Unit, Prim(Nat)))), "nat_is_zero", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Bool)), WR(Empty, Empty))), WR(Empty, Empty)))), "nat_is_odd", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Bool)), WR(Empty, Empty))), WR(Empty, Empty)))), "nat_sub", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Nat)), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))), "nil", Thk(Empty, Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty)))), "cons", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Arrow(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))), Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))), "gen", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), WR(Empty, Empty)))), "map", Thk(Empty, Cons(Arrow(Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Nat)), WR(Empty, Empty))), WR(Empty, Empty))), Cons(Arrow(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))), Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))), "filter", Thk(Empty, Cons(Arrow(Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Bool)), WR(Empty, Empty))), WR(Empty, Empty))), Cons(Arrow(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))), Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))), "f", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Bool)), WR(Empty, Empty))), WR(Empty, Empty)))), "l", IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), "sugar_match_unroll", Sum(Unit, Prod(Prim(Nat), Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))))), "c", Prod(Prim(Nat), Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), "let_split_sugar", Prod(Prim(Nat), Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), dir: Check(Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), term: Split(Var("let_split_sugar"), "h", "t", Let("t2", App(App(Force(Var("filter")), Var("f")), Var("t")), Let("sugar_if_scrutinee", App(Force(Var("f")), Var("h")), IfThenElse(Var("sugar_if_scrutinee"), App(App(Force(Var("cons")), Var("h")), Var("t2")), Ret(Var("t2")))))), clas: Ok(Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), rule: Split(Der { ctx: Var(Var(Var(Var(Var(Var(Var(Var(Var(Var(Var(Var(Var(Def(Def(Empty, "List", Type(Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), "OpNat", Type(Sum(Unit, Prim(Nat)))), "nat_is_zero", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Bool)), WR(Empty, Empty))), WR(Empty, Empty)))), "nat_is_odd", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Bool)), WR(Empty, Empty))), WR(Empty, Empty)))), "nat_sub", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Nat)), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))), "nil", Thk(Empty, Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty)))), "cons", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Arrow(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))), Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))), "gen", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), WR(Empty, Empty)))), "map", Thk(Empty, Cons(Arrow(Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Nat)), WR(Empty, Empty))), WR(Empty, Empty))), Cons(Arrow(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))), Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))), "filter", Thk(Empty, Cons(Arrow(Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Bool)), WR(Empty, Empty))), WR(Empty, Empty))), Cons(Arrow(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))), Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))), "f", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Bool)), WR(Empty, Empty))), WR(Empty, Empty)))), "l", IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), "sugar_match_unroll", Sum(Unit, Prod(Prim(Nat), Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))))), "c", Prod(Prim(Nat), Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), "let_split_sugar", Prod(Prim(Nat), Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), dir: Synth, term: Var("let_split_sugar"), clas: Ok(Prod(Prim(Nat), Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), rule: Var("let_split_sugar"), vis: DerVis { tmfam: "Val", local_err: false } }, "h", "t", Der { ctx: Var(Var(Var(Var(Var(Var(Var(Var(Var(Var(Var(Var(Var(Var(Var(Def(Def(Empty, "List", Type(Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), "OpNat", Type(Sum(Unit, Prim(Nat)))), "nat_is_zero", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Bool)), WR(Empty, Empty))), WR(Empty, Empty)))), "nat_is_odd", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Bool)), WR(Empty, Empty))), WR(Empty, Empty)))), "nat_sub", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Nat)), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))), "nil", Thk(Empty, Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty)))), "cons", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Arrow(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))), Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))), "gen", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), WR(Empty, Empty)))), "map", Thk(Empty, Cons(Arrow(Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Nat)), WR(Empty, Empty))), WR(Empty, Empty))), Cons(Arrow(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))), Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))), "filter", Thk(Empty, Cons(Arrow(Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Bool)), WR(Empty, Empty))), WR(Empty, Empty))), Cons(Arrow(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))), Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))), "f", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Bool)), WR(Empty, Empty))), WR(Empty, Empty)))), "l", IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), "sugar_match_unroll", Sum(Unit, Prod(Prim(Nat), Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))))), "c", Prod(Prim(Nat), Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), "let_split_sugar", Prod(Prim(Nat), Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), "h", Prim(Nat)), "t", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))), dir: Check(Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), term: Let("t2", App(App(Force(Var("filter")), Var("f")), Var("t")), Let("sugar_if_scrutinee", App(Force(Var("f")), Var("h")), IfThenElse(Var("sugar_if_scrutinee"), App(App(Force(Var("cons")), Var("h")), Var("t2")), Ret(Var("t2"))))), clas: Ok(Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), rule: Let("t2", Der { ctx: Var(Var(Var(Var(Var(Var(Var(Var(Var(Var(Var(Var(Var(Var(Var(Def(Def(Empty, "List", Type(Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), "OpNat", Type(Sum(Unit, Prim(Nat)))), "nat_is_zero", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Bool)), WR(Empty, Empty))), WR(Empty, Empty)))), "nat_is_odd", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Bool)), WR(Empty, Empty))), WR(Empty, Empty)))), "nat_sub", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Nat)), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))), "nil", Thk(Empty, Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty)))), "cons", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Arrow(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))), Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))), "gen", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), WR(Empty, Empty)))), "map", Thk(Empty, Cons(Arrow(Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Nat)), WR(Empty, Empty))), WR(Empty, Empty))), Cons(Arrow(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))), Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))), "filter", Thk(Empty, Cons(Arrow(Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Bool)), WR(Empty, Empty))), WR(Empty, Empty))), Cons(Arrow(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))), Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))), "f", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Bool)), WR(Empty, Empty))), WR(Empty, Empty)))), "l", IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), "sugar_match_unroll", Sum(Unit, Prod(Prim(Nat), Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))))), "c", Prod(Prim(Nat), Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), "let_split_sugar", Prod(Prim(Nat), Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), "h", Prim(Nat)), "t", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))), dir: Synth, term: App(App(Force(Var("filter")), Var("f")), Var("t")), clas: Ok(Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), rule: App(Der { ctx: Var(Var(Var(Var(Var(Var(Var(Var(Var(Var(Var(Var(Var(Var(Var(Def(Def(Empty, "List", Type(Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), "OpNat", Type(Sum(Unit, Prim(Nat)))), "nat_is_zero", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Bool)), WR(Empty, Empty))), WR(Empty, Empty)))), "nat_is_odd", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Bool)), WR(Empty, Empty))), WR(Empty, Empty)))), "nat_sub", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Nat)), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))), "nil", Thk(Empty, Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty)))), "cons", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Arrow(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))), Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))), "gen", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), WR(Empty, Empty)))), "map", Thk(Empty, Cons(Arrow(Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Nat)), WR(Empty, Empty))), WR(Empty, Empty))), Cons(Arrow(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))), Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))), "filter", Thk(Empty, Cons(Arrow(Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Bool)), WR(Empty, Empty))), WR(Empty, Empty))), Cons(Arrow(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))), Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))), "f", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Bool)), WR(Empty, Empty))), WR(Empty, Empty)))), "l", IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), "sugar_match_unroll", Sum(Unit, Prod(Prim(Nat), Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))))), "c", Prod(Prim(Nat), Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), "let_split_sugar", Prod(Prim(Nat), Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), "h", Prim(Nat)), "t", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))), dir: Synth, term: App(Force(Var("filter")), Var("f")), clas: Ok(Cons(Arrow(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))), Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), WR(Empty, Empty))), rule: App(Der { ctx: Var(Var(Var(Var(Var(Var(Var(Var(Var(Var(Var(Var(Var(Var(Var(Def(Def(Empty, "List", Type(Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), "OpNat", Type(Sum(Unit, Prim(Nat)))), "nat_is_zero", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Bool)), WR(Empty, Empty))), WR(Empty, Empty)))), "nat_is_odd", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Bool)), WR(Empty, Empty))), WR(Empty, Empty)))), "nat_sub", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Nat)), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))), "nil", Thk(Empty, Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty)))), "cons", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Arrow(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))), Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))), "gen", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), WR(Empty, Empty)))), "map", Thk(Empty, Cons(Arrow(Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Nat)), WR(Empty, Empty))), WR(Empty, Empty))), Cons(Arrow(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))), Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))), "filter", Thk(Empty, Cons(Arrow(Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Bool)), WR(Empty, Empty))), WR(Empty, Empty))), Cons(Arrow(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))), Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))), "f", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Bool)), WR(Empty, Empty))), WR(Empty, Empty)))), "l", IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), "sugar_match_unroll", Sum(Unit, Prod(Prim(Nat), Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))))), "c", Prod(Prim(Nat), Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), "let_split_sugar", Prod(Prim(Nat), Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), "h", Prim(Nat)), "t", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))), dir: Synth, term: Force(Var("filter")), clas: Ok(Cons(Arrow(Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Bool)), WR(Empty, Empty))), WR(Empty, Empty))), Cons(Arrow(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))), Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty))), rule: Force(Der { ctx: Var(Var(Var(Var(Var(Var(Var(Var(Var(Var(Var(Var(Var(Var(Var(Def(Def(Empty, "List", Type(Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), "OpNat", Type(Sum(Unit, Prim(Nat)))), "nat_is_zero", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Bool)), WR(Empty, Empty))), WR(Empty, Empty)))), "nat_is_odd", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Bool)), WR(Empty, Empty))), WR(Empty, Empty)))), "nat_sub", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Nat)), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))), "nil", Thk(Empty, Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty)))), "cons", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Arrow(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))), Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))), "gen", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), WR(Empty, Empty)))), "map", Thk(Empty, Cons(Arrow(Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Nat)), WR(Empty, Empty))), WR(Empty, Empty))), Cons(Arrow(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))), Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))), "filter", Thk(Empty, Cons(Arrow(Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Bool)), WR(Empty, Empty))), WR(Empty, Empty))), Cons(Arrow(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))), Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))), "f", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Bool)), WR(Empty, Empty))), WR(Empty, Empty)))), "l", IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), "sugar_match_unroll", Sum(Unit, Prod(Prim(Nat), Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))))), "c", Prod(Prim(Nat), Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), "let_split_sugar", Prod(Prim(Nat), Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), "h", Prim(Nat)), "t", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))), dir: Synth, term: Var("filter"), clas: Ok(Thk(Empty, Cons(Arrow(Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Bool)), WR(Empty, Empty))), WR(Empty, Empty))), Cons(Arrow(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))), Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))), rule: Var("filter"), vis: DerVis { tmfam: "Val", local_err: false } }), vis: DerVis { tmfam: "Exp", local_err: false } }, Der { ctx: Var(Var(Var(Var(Var(Var(Var(Var(Var(Var(Var(Var(Var(Var(Var(Def(Def(Empty, "List", Type(Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), "OpNat", Type(Sum(Unit, Prim(Nat)))), "nat_is_zero", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Bool)), WR(Empty, Empty))), WR(Empty, Empty)))), "nat_is_odd", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Bool)), WR(Empty, Empty))), WR(Empty, Empty)))), "nat_sub", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Nat)), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))), "nil", Thk(Empty, Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty)))), "cons", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Arrow(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))), Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))), "gen", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), WR(Empty, Empty)))), "map", Thk(Empty, Cons(Arrow(Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Nat)), WR(Empty, Empty))), WR(Empty, Empty))), Cons(Arrow(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))), Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))), "filter", Thk(Empty, Cons(Arrow(Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Bool)), WR(Empty, Empty))), WR(Empty, Empty))), Cons(Arrow(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))), Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))), "f", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Bool)), WR(Empty, Empty))), WR(Empty, Empty)))), "l", IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), "sugar_match_unroll", Sum(Unit, Prod(Prim(Nat), Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))))), "c", Prod(Prim(Nat), Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), "let_split_sugar", Prod(Prim(Nat), Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), "h", Prim(Nat)), "t", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))), dir: Check(Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Bool)), WR(Empty, Empty))), WR(Empty, Empty)))), term: Var("f"), clas: Ok(Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Bool)), WR(Empty, Empty))), WR(Empty, Empty)))), rule: Var("f"), vis: DerVis { tmfam: "Val", local_err: false } }), vis: DerVis { tmfam: "Exp", local_err: false } }, Der { ctx: Var(Var(Var(Var(Var(Var(Var(Var(Var(Var(Var(Var(Var(Var(Var(Def(Def(Empty, "List", Type(Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), "OpNat", Type(Sum(Unit, Prim(Nat)))), "nat_is_zero", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Bool)), WR(Empty, Empty))), WR(Empty, Empty)))), "nat_is_odd", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Bool)), WR(Empty, Empty))), WR(Empty, Empty)))), "nat_sub", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Nat)), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))), "nil", Thk(Empty, Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty)))), "cons", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Arrow(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))), Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))), "gen", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), WR(Empty, Empty)))), "map", Thk(Empty, Cons(Arrow(Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Nat)), WR(Empty, Empty))), WR(Empty, Empty))), Cons(Arrow(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))), Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))), "filter", Thk(Empty, Cons(Arrow(Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Bool)), WR(Empty, Empty))), WR(Empty, Empty))), Cons(Arrow(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))), Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))), "f", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Bool)), WR(Empty, Empty))), WR(Empty, Empty)))), "l", IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), "sugar_match_unroll", Sum(Unit, Prod(Prim(Nat), Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))))), "c", Prod(Prim(Nat), Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), "let_split_sugar", Prod(Prim(Nat), Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), "h", Prim(Nat)), "t", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))), dir: Check(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), term: Var("t"), clas: Ok(Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))), rule: Var("t"), vis: DerVis { tmfam: "Val", local_err: false } }), vis: DerVis { tmfam: "Exp", local_err: false } }, Der { ctx: Var(Var(Var(Var(Var(Var(Var(Var(Var(Var(Var(Var(Var(Var(Var(Var(Def(Def(Empty, "List", Type(Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), "OpNat", Type(Sum(Unit, Prim(Nat)))), "nat_is_zero", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Bool)), WR(Empty, Empty))), WR(Empty, Empty)))), "nat_is_odd", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Bool)), WR(Empty, Empty))), WR(Empty, Empty)))), "nat_sub", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Nat)), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))), "nil", Thk(Empty, Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty)))), "cons", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Arrow(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))), Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))), "gen", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), WR(Empty, Empty)))), "map", Thk(Empty, Cons(Arrow(Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Nat)), WR(Empty, Empty))), WR(Empty, Empty))), Cons(Arrow(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))), Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))), "filter", Thk(Empty, Cons(Arrow(Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Bool)), WR(Empty, Empty))), WR(Empty, Empty))), Cons(Arrow(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))), Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))), "f", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Bool)), WR(Empty, Empty))), WR(Empty, Empty)))), "l", IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), "sugar_match_unroll", Sum(Unit, Prod(Prim(Nat), Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))))), "c", Prod(Prim(Nat), Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), "let_split_sugar", Prod(Prim(Nat), Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), "h", Prim(Nat)), "t", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))), "t2", IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), dir: Check(Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), term: Let("sugar_if_scrutinee", App(Force(Var("f")), Var("h")), IfThenElse(Var("sugar_if_scrutinee"), App(App(Force(Var("cons")), Var("h")), Var("t2")), Ret(Var("t2")))), clas: Ok(Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), rule: Let("sugar_if_scrutinee", Der { ctx: Var(Var(Var(Var(Var(Var(Var(Var(Var(Var(Var(Var(Var(Var(Var(Var(Def(Def(Empty, "List", Type(Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), "OpNat", Type(Sum(Unit, Prim(Nat)))), "nat_is_zero", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Bool)), WR(Empty, Empty))), WR(Empty, Empty)))), "nat_is_odd", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Bool)), WR(Empty, Empty))), WR(Empty, Empty)))), "nat_sub", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Nat)), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))), "nil", Thk(Empty, Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty)))), "cons", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Arrow(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))), Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))), "gen", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), WR(Empty, Empty)))), "map", Thk(Empty, Cons(Arrow(Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Nat)), WR(Empty, Empty))), WR(Empty, Empty))), Cons(Arrow(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))), Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))), "filter", Thk(Empty, Cons(Arrow(Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Bool)), WR(Empty, Empty))), WR(Empty, Empty))), Cons(Arrow(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))), Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))), "f", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Bool)), WR(Empty, Empty))), WR(Empty, Empty)))), "l", IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), "sugar_match_unroll", Sum(Unit, Prod(Prim(Nat), Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))))), "c", Prod(Prim(Nat), Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), "let_split_sugar", Prod(Prim(Nat), Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), "h", Prim(Nat)), "t", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))), "t2", IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), dir: Synth, term: App(Force(Var("f")), Var("h")), clas: Ok(Cons(Lift(Prim(Bool)), WR(Empty, Empty))), rule: App(Der { ctx: Var(Var(Var(Var(Var(Var(Var(Var(Var(Var(Var(Var(Var(Var(Var(Var(Def(Def(Empty, "List", Type(Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), "OpNat", Type(Sum(Unit, Prim(Nat)))), "nat_is_zero", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Bool)), WR(Empty, Empty))), WR(Empty, Empty)))), "nat_is_odd", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Bool)), WR(Empty, Empty))), WR(Empty, Empty)))), "nat_sub", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Nat)), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))), "nil", Thk(Empty, Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty)))), "cons", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Arrow(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))), Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))), "gen", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), WR(Empty, Empty)))), "map", Thk(Empty, Cons(Arrow(Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Nat)), WR(Empty, Empty))), WR(Empty, Empty))), Cons(Arrow(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))), Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))), "filter", Thk(Empty, Cons(Arrow(Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Bool)), WR(Empty, Empty))), WR(Empty, Empty))), Cons(Arrow(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))), Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))), "f", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Bool)), WR(Empty, Empty))), WR(Empty, Empty)))), "l", IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), "sugar_match_unroll", Sum(Unit, Prod(Prim(Nat), Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))))), "c", Prod(Prim(Nat), Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), "let_split_sugar", Prod(Prim(Nat), Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), "h", Prim(Nat)), "t", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))), "t2", IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), dir: Synth, term: Force(Var("f")), clas: Ok(Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Bool)), WR(Empty, Empty))), WR(Empty, Empty))), rule: Force(Der { ctx: Var(Var(Var(Var(Var(Var(Var(Var(Var(Var(Var(Var(Var(Var(Var(Var(Def(Def(Empty, "List", Type(Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), "OpNat", Type(Sum(Unit, Prim(Nat)))), "nat_is_zero", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Bool)), WR(Empty, Empty))), WR(Empty, Empty)))), "nat_is_odd", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Bool)), WR(Empty, Empty))), WR(Empty, Empty)))), "nat_sub", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Nat)), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))), "nil", Thk(Empty, Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty)))), "cons", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Arrow(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))), Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))), "gen", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), WR(Empty, Empty)))), "map", Thk(Empty, Cons(Arrow(Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Nat)), WR(Empty, Empty))), WR(Empty, Empty))), Cons(Arrow(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))), Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))), "filter", Thk(Empty, Cons(Arrow(Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Bool)), WR(Empty, Empty))), WR(Empty, Empty))), Cons(Arrow(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))), Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))), "f", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Bool)), WR(Empty, Empty))), WR(Empty, Empty)))), "l", IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), "sugar_match_unroll", Sum(Unit, Prod(Prim(Nat), Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))))), "c", Prod(Prim(Nat), Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), "let_split_sugar", Prod(Prim(Nat), Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), "h", Prim(Nat)), "t", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))), "t2", IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), dir: Synth, term: Var("f"), clas: Ok(Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Bool)), WR(Empty, Empty))), WR(Empty, Empty)))), rule: Var("f"), vis: DerVis { tmfam: "Val", local_err: false } }), vis: DerVis { tmfam: "Exp", local_err: false } }, Der { ctx: Var(Var(Var(Var(Var(Var(Var(Var(Var(Var(Var(Var(Var(Var(Var(Var(Def(Def(Empty, "List", Type(Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), "OpNat", Type(Sum(Unit, Prim(Nat)))), "nat_is_zero", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Bool)), WR(Empty, Empty))), WR(Empty, Empty)))), "nat_is_odd", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Bool)), WR(Empty, Empty))), WR(Empty, Empty)))), "nat_sub", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Nat)), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))), "nil", Thk(Empty, Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty)))), "cons", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Arrow(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))), Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))), "gen", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), WR(Empty, Empty)))), "map", Thk(Empty, Cons(Arrow(Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Nat)), WR(Empty, Empty))), WR(Empty, Empty))), Cons(Arrow(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))), Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))), "filter", Thk(Empty, Cons(Arrow(Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Bool)), WR(Empty, Empty))), WR(Empty, Empty))), Cons(Arrow(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))), Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))), "f", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Bool)), WR(Empty, Empty))), WR(Empty, Empty)))), "l", IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), "sugar_match_unroll", Sum(Unit, Prod(Prim(Nat), Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))))), "c", Prod(Prim(Nat), Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), "let_split_sugar", Prod(Prim(Nat), Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), "h", Prim(Nat)), "t", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))), "t2", IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), dir: Check(Prim(Nat)), term: Var("h"), clas: Ok(Prim(Nat)), rule: Var("h"), vis: DerVis { tmfam: "Val", local_err: false } }), vis: DerVis { tmfam: "Exp", local_err: false } }, Der { ctx: Var(Var(Var(Var(Var(Var(Var(Var(Var(Var(Var(Var(Var(Var(Var(Var(Var(Def(Def(Empty, "List", Type(Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), "OpNat", Type(Sum(Unit, Prim(Nat)))), "nat_is_zero", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Bool)), WR(Empty, Empty))), WR(Empty, Empty)))), "nat_is_odd", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Bool)), WR(Empty, Empty))), WR(Empty, Empty)))), "nat_sub", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Nat)), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))), "nil", Thk(Empty, Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty)))), "cons", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Arrow(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))), Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))), "gen", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), WR(Empty, Empty)))), "map", Thk(Empty, Cons(Arrow(Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Nat)), WR(Empty, Empty))), WR(Empty, Empty))), Cons(Arrow(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))), Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))), "filter", Thk(Empty, Cons(Arrow(Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Bool)), WR(Empty, Empty))), WR(Empty, Empty))), Cons(Arrow(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))), Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))), "f", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Bool)), WR(Empty, Empty))), WR(Empty, Empty)))), "l", IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), "sugar_match_unroll", Sum(Unit, Prod(Prim(Nat), Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))))), "c", Prod(Prim(Nat), Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), "let_split_sugar", Prod(Prim(Nat), Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), "h", Prim(Nat)), "t", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))), "t2", IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), "sugar_if_scrutinee", Prim(Bool)), dir: Check(Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), term: IfThenElse(Var("sugar_if_scrutinee"), App(App(Force(Var("cons")), Var("h")), Var("t2")), Ret(Var("t2"))), clas: Ok(Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), rule: IfThenElse(Der { ctx: Var(Var(Var(Var(Var(Var(Var(Var(Var(Var(Var(Var(Var(Var(Var(Var(Var(Def(Def(Empty, "List", Type(Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), "OpNat", Type(Sum(Unit, Prim(Nat)))), "nat_is_zero", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Bool)), WR(Empty, Empty))), WR(Empty, Empty)))), "nat_is_odd", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Bool)), WR(Empty, Empty))), WR(Empty, Empty)))), "nat_sub", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Nat)), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))), "nil", Thk(Empty, Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty)))), "cons", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Arrow(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))), Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))), "gen", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), WR(Empty, Empty)))), "map", Thk(Empty, Cons(Arrow(Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Nat)), WR(Empty, Empty))), WR(Empty, Empty))), Cons(Arrow(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))), Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))), "filter", Thk(Empty, Cons(Arrow(Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Bool)), WR(Empty, Empty))), WR(Empty, Empty))), Cons(Arrow(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))), Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))), "f", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Bool)), WR(Empty, Empty))), WR(Empty, Empty)))), "l", IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), "sugar_match_unroll", Sum(Unit, Prod(Prim(Nat), Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))))), "c", Prod(Prim(Nat), Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), "let_split_sugar", Prod(Prim(Nat), Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), "h", Prim(Nat)), "t", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))), "t2", IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), "sugar_if_scrutinee", Prim(Bool)), dir: Synth, term: Var("sugar_if_scrutinee"), clas: Ok(Prim(Bool)), rule: Var("sugar_if_scrutinee"), vis: DerVis { tmfam: "Val", local_err: false } }, Der { ctx: Var(Var(Var(Var(Var(Var(Var(Var(Var(Var(Var(Var(Var(Var(Var(Var(Var(Def(Def(Empty, "List", Type(Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), "OpNat", Type(Sum(Unit, Prim(Nat)))), "nat_is_zero", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Bool)), WR(Empty, Empty))), WR(Empty, Empty)))), "nat_is_odd", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Bool)), WR(Empty, Empty))), WR(Empty, Empty)))), "nat_sub", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Nat)), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))), "nil", Thk(Empty, Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty)))), "cons", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Arrow(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))), Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))), "gen", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), WR(Empty, Empty)))), "map", Thk(Empty, Cons(Arrow(Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Nat)), WR(Empty, Empty))), WR(Empty, Empty))), Cons(Arrow(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))), Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))), "filter", Thk(Empty, Cons(Arrow(Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Bool)), WR(Empty, Empty))), WR(Empty, Empty))), Cons(Arrow(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))), Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))), "f", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Bool)), WR(Empty, Empty))), WR(Empty, Empty)))), "l", IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), "sugar_match_unroll", Sum(Unit, Prod(Prim(Nat), Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))))), "c", Prod(Prim(Nat), Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), "let_split_sugar", Prod(Prim(Nat), Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), "h", Prim(Nat)), "t", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))), "t2", IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), "sugar_if_scrutinee", Prim(Bool)), dir: Synth, term: App(App(Force(Var("cons")), Var("h")), Var("t2")), clas: Ok(Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), rule: App(Der { ctx: Var(Var(Var(Var(Var(Var(Var(Var(Var(Var(Var(Var(Var(Var(Var(Var(Var(Def(Def(Empty, "List", Type(Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), "OpNat", Type(Sum(Unit, Prim(Nat)))), "nat_is_zero", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Bool)), WR(Empty, Empty))), WR(Empty, Empty)))), "nat_is_odd", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Bool)), WR(Empty, Empty))), WR(Empty, Empty)))), "nat_sub", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Nat)), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))), "nil", Thk(Empty, Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty)))), "cons", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Arrow(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))), Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))), "gen", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), WR(Empty, Empty)))), "map", Thk(Empty, Cons(Arrow(Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Nat)), WR(Empty, Empty))), WR(Empty, Empty))), Cons(Arrow(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))), Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))), "filter", Thk(Empty, Cons(Arrow(Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Bool)), WR(Empty, Empty))), WR(Empty, Empty))), Cons(Arrow(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))), Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))), "f", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Bool)), WR(Empty, Empty))), WR(Empty, Empty)))), "l", IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), "sugar_match_unroll", Sum(Unit, Prod(Prim(Nat), Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))))), "c", Prod(Prim(Nat), Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), "let_split_sugar", Prod(Prim(Nat), Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), "h", Prim(Nat)), "t", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))), "t2", IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), "sugar_if_scrutinee", Prim(Bool)), dir: Synth, term: App(Force(Var("cons")), Var("h")), clas: Ok(Cons(Arrow(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))), Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), WR(Empty, Empty))), rule: App(Der { ctx: Var(Var(Var(Var(Var(Var(Var(Var(Var(Var(Var(Var(Var(Var(Var(Var(Var(Def(Def(Empty, "List", Type(Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), "OpNat", Type(Sum(Unit, Prim(Nat)))), "nat_is_zero", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Bool)), WR(Empty, Empty))), WR(Empty, Empty)))), "nat_is_odd", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Bool)), WR(Empty, Empty))), WR(Empty, Empty)))), "nat_sub", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Nat)), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))), "nil", Thk(Empty, Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty)))), "cons", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Arrow(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))), Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))), "gen", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), WR(Empty, Empty)))), "map", Thk(Empty, Cons(Arrow(Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Nat)), WR(Empty, Empty))), WR(Empty, Empty))), Cons(Arrow(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))), Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))), "filter", Thk(Empty, Cons(Arrow(Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Bool)), WR(Empty, Empty))), WR(Empty, Empty))), Cons(Arrow(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))), Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))), "f", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Bool)), WR(Empty, Empty))), WR(Empty, Empty)))), "l", IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), "sugar_match_unroll", Sum(Unit, Prod(Prim(Nat), Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))))), "c", Prod(Prim(Nat), Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), "let_split_sugar", Prod(Prim(Nat), Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), "h", Prim(Nat)), "t", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))), "t2", IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), "sugar_if_scrutinee", Prim(Bool)), dir: Synth, term: Force(Var("cons")), clas: Ok(Cons(Arrow(Prim(Nat), Cons(Arrow(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))), Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty))), rule: Force(Der { ctx: Var(Var(Var(Var(Var(Var(Var(Var(Var(Var(Var(Var(Var(Var(Var(Var(Var(Def(Def(Empty, "List", Type(Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), "OpNat", Type(Sum(Unit, Prim(Nat)))), "nat_is_zero", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Bool)), WR(Empty, Empty))), WR(Empty, Empty)))), "nat_is_odd", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Bool)), WR(Empty, Empty))), WR(Empty, Empty)))), "nat_sub", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Nat)), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))), "nil", Thk(Empty, Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty)))), "cons", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Arrow(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))), Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))), "gen", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), WR(Empty, Empty)))), "map", Thk(Empty, Cons(Arrow(Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Nat)), WR(Empty, Empty))), WR(Empty, Empty))), Cons(Arrow(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))), Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))), "filter", Thk(Empty, Cons(Arrow(Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Bool)), WR(Empty, Empty))), WR(Empty, Empty))), Cons(Arrow(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))), Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))), "f", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Bool)), WR(Empty, Empty))), WR(Empty, Empty)))), "l", IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), "sugar_match_unroll", Sum(Unit, Prod(Prim(Nat), Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))))), "c", Prod(Prim(Nat), Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), "let_split_sugar", Prod(Prim(Nat), Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), "h", Prim(Nat)), "t", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))), "t2", IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), "sugar_if_scrutinee", Prim(Bool)), dir: Synth, term: Var("cons"), clas: Ok(Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Arrow(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))), Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))), rule: Var("cons"), vis: DerVis { tmfam: "Val", local_err: false } }), vis: DerVis { tmfam: "Exp", local_err: false } }, Der { ctx: Var(Var(Var(Var(Var(Var(Var(Var(Var(Var(Var(Var(Var(Var(Var(Var(Var(Def(Def(Empty, "List", Type(Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), "OpNat", Type(Sum(Unit, Prim(Nat)))), "nat_is_zero", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Bool)), WR(Empty, Empty))), WR(Empty, Empty)))), "nat_is_odd", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Bool)), WR(Empty, Empty))), WR(Empty, Empty)))), "nat_sub", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Nat)), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))), "nil", Thk(Empty, Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty)))), "cons", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Arrow(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))), Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))), "gen", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), WR(Empty, Empty)))), "map", Thk(Empty, Cons(Arrow(Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Nat)), WR(Empty, Empty))), WR(Empty, Empty))), Cons(Arrow(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))), Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))), "filter", Thk(Empty, Cons(Arrow(Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Bool)), WR(Empty, Empty))), WR(Empty, Empty))), Cons(Arrow(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))), Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))), "f", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Bool)), WR(Empty, Empty))), WR(Empty, Empty)))), "l", IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), "sugar_match_unroll", Sum(Unit, Prod(Prim(Nat), Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))))), "c", Prod(Prim(Nat), Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), "let_split_sugar", Prod(Prim(Nat), Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), "h", Prim(Nat)), "t", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))), "t2", IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), "sugar_if_scrutinee", Prim(Bool)), dir: Check(Prim(Nat)), term: Var("h"), clas: Ok(Prim(Nat)), rule: Var("h"), vis: DerVis { tmfam: "Val", local_err: false } }), vis: DerVis { tmfam: "Exp", local_err: false } }, Der { ctx: Var(Var(Var(Var(Var(Var(Var(Var(Var(Var(Var(Var(Var(Var(Var(Var(Var(Def(Def(Empty, "List", Type(Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), "OpNat", Type(Sum(Unit, Prim(Nat)))), "nat_is_zero", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Bool)), WR(Empty, Empty))), WR(Empty, Empty)))), "nat_is_odd", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Bool)), WR(Empty, Empty))), WR(Empty, Empty)))), "nat_sub", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Nat)), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))), "nil", Thk(Empty, Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty)))), "cons", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Arrow(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))), Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))), "gen", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), WR(Empty, Empty)))), "map", Thk(Empty, Cons(Arrow(Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Nat)), WR(Empty, Empty))), WR(Empty, Empty))), Cons(Arrow(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))), Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))), "filter", Thk(Empty, Cons(Arrow(Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Bool)), WR(Empty, Empty))), WR(Empty, Empty))), Cons(Arrow(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))), Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))), "f", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Bool)), WR(Empty, Empty))), WR(Empty, Empty)))), "l", IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), "sugar_match_unroll", Sum(Unit, Prod(Prim(Nat), Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))))), "c", Prod(Prim(Nat), Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), "let_split_sugar", Prod(Prim(Nat), Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), "h", Prim(Nat)), "t", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))), "t2", IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), "sugar_if_scrutinee", Prim(Bool)), dir: Check(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), term: Var("t2"), clas: Ok(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), rule: Var("t2"), vis: DerVis { tmfam: "Val", local_err: false } }), vis: DerVis { tmfam: "Exp", local_err: false } }, Der { ctx: Var(Var(Var(Var(Var(Var(Var(Var(Var(Var(Var(Var(Var(Var(Var(Var(Var(Def(Def(Empty, "List", Type(Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), "OpNat", Type(Sum(Unit, Prim(Nat)))), "nat_is_zero", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Bool)), WR(Empty, Empty))), WR(Empty, Empty)))), "nat_is_odd", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Bool)), WR(Empty, Empty))), WR(Empty, Empty)))), "nat_sub", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Nat)), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))), "nil", Thk(Empty, Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty)))), "cons", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Arrow(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))), Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))), "gen", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), WR(Empty, Empty)))), "map", Thk(Empty, Cons(Arrow(Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Nat)), WR(Empty, Empty))), WR(Empty, Empty))), Cons(Arrow(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))), Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))), "filter", Thk(Empty, Cons(Arrow(Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Bool)), WR(Empty, Empty))), WR(Empty, Empty))), Cons(Arrow(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))), Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))), "f", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Bool)), WR(Empty, Empty))), WR(Empty, Empty)))), "l", IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), "sugar_match_unroll", Sum(Unit, Prod(Prim(Nat), Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))))), "c", Prod(Prim(Nat), Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), "let_split_sugar", Prod(Prim(Nat), Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), "h", Prim(Nat)), "t", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))), "t2", IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), "sugar_if_scrutinee", Prim(Bool)), dir: Check(Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), term: Ret(Var("t2")), clas: Ok(Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), rule: Ret(Der { ctx: Var(Var(Var(Var(Var(Var(Var(Var(Var(Var(Var(Var(Var(Var(Var(Var(Var(Def(Def(Empty, "List", Type(Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), "OpNat", Type(Sum(Unit, Prim(Nat)))), "nat_is_zero", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Bool)), WR(Empty, Empty))), WR(Empty, Empty)))), "nat_is_odd", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Bool)), WR(Empty, Empty))), WR(Empty, Empty)))), "nat_sub", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Nat)), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))), "nil", Thk(Empty, Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty)))), "cons", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Arrow(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))), Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))), "gen", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), WR(Empty, Empty)))), "map", Thk(Empty, Cons(Arrow(Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Nat)), WR(Empty, Empty))), WR(Empty, Empty))), Cons(Arrow(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))), Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))), "filter", Thk(Empty, Cons(Arrow(Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Bool)), WR(Empty, Empty))), WR(Empty, Empty))), Cons(Arrow(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))), Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))), "f", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Bool)), WR(Empty, Empty))), WR(Empty, Empty)))), "l", IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), "sugar_match_unroll", Sum(Unit, Prod(Prim(Nat), Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))))), "c", Prod(Prim(Nat), Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), "let_split_sugar", Prod(Prim(Nat), Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), "h", Prim(Nat)), "t", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))), "t2", IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), "sugar_if_scrutinee", Prim(Bool)), dir: Check(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), term: Var("t2"), clas: Ok(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), rule: Var("t2"), vis: DerVis { tmfam: "Val", local_err: false } }), vis: DerVis { tmfam: "Exp", local_err: false } }), vis: DerVis { tmfam: "Exp", local_err: false } }), vis: DerVis { tmfam: "Exp", local_err: false } }), vis: DerVis { tmfam: "Exp", local_err: false } }), vis: DerVis { tmfam: "Exp", local_err: false } }), vis: DerVis { tmfam: "Exp", local_err: false } }), vis: DerVis { tmfam: "Exp", local_err: false } }), vis: DerVis { tmfam: "Exp", local_err: false } }), vis: DerVis { tmfam: "Exp", local_err: false } }), vis: DerVis { tmfam: "Exp", local_err: false } }), vis: DerVis { tmfam: "Exp", local_err: false } }), vis: DerVis { tmfam: "Val", local_err: false } }), vis: DerVis { tmfam: "Module", local_err: false } } }), Bind(ItemDer { doc: None, qual: Val, var: "map_filter", der: Der { ctx: Var(Var(Var(Var(Var(Var(Var(Var(Def(Def(Empty, "List", Type(Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), "OpNat", Type(Sum(Unit, Prim(Nat)))), "nat_is_zero", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Bool)), WR(Empty, Empty))), WR(Empty, Empty)))), "nat_is_odd", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Bool)), WR(Empty, Empty))), WR(Empty, Empty)))), "nat_sub", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Nat)), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))), "nil", Thk(Empty, Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty)))), "cons", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Arrow(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))), Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))), "gen", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), WR(Empty, Empty)))), "map", Thk(Empty, Cons(Arrow(Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Nat)), WR(Empty, Empty))), WR(Empty, Empty))), Cons(Arrow(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))), Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))), "filter", Thk(Empty, Cons(Arrow(Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Bool)), WR(Empty, Empty))), WR(Empty, Empty))), Cons(Arrow(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))), Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))), dir: Synth, term: (), clas: Ok(Type(Thk(Empty, Cons(Arrow(Thk(Empty, Cons(Arrow(Ident("Nat"), Cons(Lift(Ident("OpNat")), WR(Empty, Empty))), WR(Empty, Empty))), Cons(Arrow(Ident("List"), Cons(Lift(Ident("List")), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty))))), rule: Fn("map_filter", Der { ctx: Var(Var(Var(Var(Var(Var(Var(Var(Def(Def(Empty, "List", Type(Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), "OpNat", Type(Sum(Unit, Prim(Nat)))), "nat_is_zero", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Bool)), WR(Empty, Empty))), WR(Empty, Empty)))), "nat_is_odd", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Bool)), WR(Empty, Empty))), WR(Empty, Empty)))), "nat_sub", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Nat)), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))), "nil", Thk(Empty, Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty)))), "cons", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Arrow(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))), Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))), "gen", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), WR(Empty, Empty)))), "map", Thk(Empty, Cons(Arrow(Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Nat)), WR(Empty, Empty))), WR(Empty, Empty))), Cons(Arrow(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))), Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))), "filter", Thk(Empty, Cons(Arrow(Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Bool)), WR(Empty, Empty))), WR(Empty, Empty))), Cons(Arrow(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))), Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))), dir: Check(Thk(Empty, Cons(Arrow(Thk(Empty, Cons(Arrow(Ident("Nat"), Cons(Lift(Ident("OpNat")), WR(Empty, Empty))), WR(Empty, Empty))), Cons(Arrow(Ident("List"), Cons(Lift(Ident("List")), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))), term: ThunkAnon(Fix("map_filter", Lam("f", Lam("l", Unroll(Var("l"), "sugar_match_unroll", Case(Var("sugar_match_unroll"), "_u", Ret(Roll(Inj1(Unit))), "c", Let("let_split_sugar", Ret(Var("c")), Split(Var("let_split_sugar"), "h", "t", Let("t2", App(App(Force(Var("map_filter")), Var("f")), Var("t")), Let("oh2", App(Force(Var("f")), Var("h")), Case(Var("oh2"), "_u", Ret(Var("t2")), "h2", App(App(Force(Var("cons")), Var("h")), Var("t2"))))))))))))), clas: Ok(Thk(Empty, Cons(Arrow(Thk(Empty, Cons(Arrow(Ident("Nat"), Cons(Lift(Ident("OpNat")), WR(Empty, Empty))), WR(Empty, Empty))), Cons(Arrow(Ident("List"), Cons(Lift(Ident("List")), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))), rule: ThunkAnon(Der { ctx: Var(Var(Var(Var(Var(Var(Var(Var(Def(Def(Empty, "List", Type(Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), "OpNat", Type(Sum(Unit, Prim(Nat)))), "nat_is_zero", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Bool)), WR(Empty, Empty))), WR(Empty, Empty)))), "nat_is_odd", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Bool)), WR(Empty, Empty))), WR(Empty, Empty)))), "nat_sub", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Nat)), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))), "nil", Thk(Empty, Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty)))), "cons", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Arrow(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))), Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))), "gen", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), WR(Empty, Empty)))), "map", Thk(Empty, Cons(Arrow(Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Nat)), WR(Empty, Empty))), WR(Empty, Empty))), Cons(Arrow(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))), Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))), "filter", Thk(Empty, Cons(Arrow(Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Bool)), WR(Empty, Empty))), WR(Empty, Empty))), Cons(Arrow(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))), Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))), dir: Check(Cons(Arrow(Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(IdentDef("OpNat", Sum(Unit, Prim(Nat)))), WR(Empty, Empty))), WR(Empty, Empty))), Cons(Arrow(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))), Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty))), term: Fix("map_filter", Lam("f", Lam("l", Unroll(Var("l"), "sugar_match_unroll", Case(Var("sugar_match_unroll"), "_u", Ret(Roll(Inj1(Unit))), "c", Let("let_split_sugar", Ret(Var("c")), Split(Var("let_split_sugar"), "h", "t", Let("t2", App(App(Force(Var("map_filter")), Var("f")), Var("t")), Let("oh2", App(Force(Var("f")), Var("h")), Case(Var("oh2"), "_u", Ret(Var("t2")), "h2", App(App(Force(Var("cons")), Var("h")), Var("t2")))))))))))), clas: Ok(Cons(Arrow(Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(IdentDef("OpNat", Sum(Unit, Prim(Nat)))), WR(Empty, Empty))), WR(Empty, Empty))), Cons(Arrow(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))), Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty))), rule: Fix("map_filter", Der { ctx: Var(Var(Var(Var(Var(Var(Var(Var(Var(Def(Def(Empty, "List", Type(Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), "OpNat", Type(Sum(Unit, Prim(Nat)))), "nat_is_zero", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Bool)), WR(Empty, Empty))), WR(Empty, Empty)))), "nat_is_odd", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Bool)), WR(Empty, Empty))), WR(Empty, Empty)))), "nat_sub", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Nat)), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))), "nil", Thk(Empty, Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty)))), "cons", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Arrow(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))), Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))), "gen", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), WR(Empty, Empty)))), "map", Thk(Empty, Cons(Arrow(Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Nat)), WR(Empty, Empty))), WR(Empty, Empty))), Cons(Arrow(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))), Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))), "filter", Thk(Empty, Cons(Arrow(Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Bool)), WR(Empty, Empty))), WR(Empty, Empty))), Cons(Arrow(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))), Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))), "map_filter", Thk(Empty, Cons(Arrow(Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(IdentDef("OpNat", Sum(Unit, Prim(Nat)))), WR(Empty, Empty))), WR(Empty, Empty))), Cons(Arrow(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))), Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))), dir: Check(Cons(Arrow(Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(IdentDef("OpNat", Sum(Unit, Prim(Nat)))), WR(Empty, Empty))), WR(Empty, Empty))), Cons(Arrow(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))), Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty))), term: Lam("f", Lam("l", Unroll(Var("l"), "sugar_match_unroll", Case(Var("sugar_match_unroll"), "_u", Ret(Roll(Inj1(Unit))), "c", Let("let_split_sugar", Ret(Var("c")), Split(Var("let_split_sugar"), "h", "t", Let("t2", App(App(Force(Var("map_filter")), Var("f")), Var("t")), Let("oh2", App(Force(Var("f")), Var("h")), Case(Var("oh2"), "_u", Ret(Var("t2")), "h2", App(App(Force(Var("cons")), Var("h")), Var("t2"))))))))))), clas: Ok(Cons(Arrow(Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(IdentDef("OpNat", Sum(Unit, Prim(Nat)))), WR(Empty, Empty))), WR(Empty, Empty))), Cons(Arrow(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))), Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty))), rule: Lam("f", Der { ctx: Var(Var(Var(Var(Var(Var(Var(Var(Var(Var(Def(Def(Empty, "List", Type(Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), "OpNat", Type(Sum(Unit, Prim(Nat)))), "nat_is_zero", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Bool)), WR(Empty, Empty))), WR(Empty, Empty)))), "nat_is_odd", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Bool)), WR(Empty, Empty))), WR(Empty, Empty)))), "nat_sub", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Nat)), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))), "nil", Thk(Empty, Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty)))), "cons", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Arrow(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))), Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))), "gen", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), WR(Empty, Empty)))), "map", Thk(Empty, Cons(Arrow(Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Nat)), WR(Empty, Empty))), WR(Empty, Empty))), Cons(Arrow(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))), Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))), "filter", Thk(Empty, Cons(Arrow(Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Bool)), WR(Empty, Empty))), WR(Empty, Empty))), Cons(Arrow(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))), Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))), "map_filter", Thk(Empty, Cons(Arrow(Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(IdentDef("OpNat", Sum(Unit, Prim(Nat)))), WR(Empty, Empty))), WR(Empty, Empty))), Cons(Arrow(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))), Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))), "f", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(IdentDef("OpNat", Sum(Unit, Prim(Nat)))), WR(Empty, Empty))), WR(Empty, Empty)))), dir: Check(Cons(Arrow(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))), Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), WR(Empty, Empty))), term: Lam("l", Unroll(Var("l"), "sugar_match_unroll", Case(Var("sugar_match_unroll"), "_u", Ret(Roll(Inj1(Unit))), "c", Let("let_split_sugar", Ret(Var("c")), Split(Var("let_split_sugar"), "h", "t", Let("t2", App(App(Force(Var("map_filter")), Var("f")), Var("t")), Let("oh2", App(Force(Var("f")), Var("h")), Case(Var("oh2"), "_u", Ret(Var("t2")), "h2", App(App(Force(Var("cons")), Var("h")), Var("t2")))))))))), clas: Ok(Cons(Arrow(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))), Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), WR(Empty, Empty))), rule: Lam("l", Der { ctx: Var(Var(Var(Var(Var(Var(Var(Var(Var(Var(Var(Def(Def(Empty, "List", Type(Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), "OpNat", Type(Sum(Unit, Prim(Nat)))), "nat_is_zero", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Bool)), WR(Empty, Empty))), WR(Empty, Empty)))), "nat_is_odd", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Bool)), WR(Empty, Empty))), WR(Empty, Empty)))), "nat_sub", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Nat)), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))), "nil", Thk(Empty, Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty)))), "cons", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Arrow(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))), Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))), "gen", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), WR(Empty, Empty)))), "map", Thk(Empty, Cons(Arrow(Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Nat)), WR(Empty, Empty))), WR(Empty, Empty))), Cons(Arrow(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))), Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))), "filter", Thk(Empty, Cons(Arrow(Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Bool)), WR(Empty, Empty))), WR(Empty, Empty))), Cons(Arrow(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))), Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))), "map_filter", Thk(Empty, Cons(Arrow(Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(IdentDef("OpNat", Sum(Unit, Prim(Nat)))), WR(Empty, Empty))), WR(Empty, Empty))), Cons(Arrow(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))), Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))), "f", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(IdentDef("OpNat", Sum(Unit, Prim(Nat)))), WR(Empty, Empty))), WR(Empty, Empty)))), "l", IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), dir: Check(Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), term: Unroll(Var("l"), "sugar_match_unroll", Case(Var("sugar_match_unroll"), "_u", Ret(Roll(Inj1(Unit))), "c", Let("let_split_sugar", Ret(Var("c")), Split(Var("let_split_sugar"), "h", "t", Let("t2", App(App(Force(Var("map_filter")), Var("f")), Var("t")), Let("oh2", App(Force(Var("f")), Var("h")), Case(Var("oh2"), "_u", Ret(Var("t2")), "h2", App(App(Force(Var("cons")), Var("h")), Var("t2"))))))))), clas: Ok(Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), rule: Unroll(Der { ctx: Var(Var(Var(Var(Var(Var(Var(Var(Var(Var(Var(Def(Def(Empty, "List", Type(Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), "OpNat", Type(Sum(Unit, Prim(Nat)))), "nat_is_zero", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Bool)), WR(Empty, Empty))), WR(Empty, Empty)))), "nat_is_odd", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Bool)), WR(Empty, Empty))), WR(Empty, Empty)))), "nat_sub", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Nat)), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))), "nil", Thk(Empty, Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty)))), "cons", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Arrow(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))), Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))), "gen", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), WR(Empty, Empty)))), "map", Thk(Empty, Cons(Arrow(Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Nat)), WR(Empty, Empty))), WR(Empty, Empty))), Cons(Arrow(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))), Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))), "filter", Thk(Empty, Cons(Arrow(Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Bool)), WR(Empty, Empty))), WR(Empty, Empty))), Cons(Arrow(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))), Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))), "map_filter", Thk(Empty, Cons(Arrow(Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(IdentDef("OpNat", Sum(Unit, Prim(Nat)))), WR(Empty, Empty))), WR(Empty, Empty))), Cons(Arrow(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))), Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))), "f", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(IdentDef("OpNat", Sum(Unit, Prim(Nat)))), WR(Empty, Empty))), WR(Empty, Empty)))), "l", IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), dir: Synth, term: Var("l"), clas: Ok(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), rule: Var("l"), vis: DerVis { tmfam: "Val", local_err: false } }, "sugar_match_unroll", Der { ctx: Var(Var(Var(Var(Var(Var(Var(Var(Var(Var(Var(Var(Def(Def(Empty, "List", Type(Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), "OpNat", Type(Sum(Unit, Prim(Nat)))), "nat_is_zero", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Bool)), WR(Empty, Empty))), WR(Empty, Empty)))), "nat_is_odd", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Bool)), WR(Empty, Empty))), WR(Empty, Empty)))), "nat_sub", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Nat)), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))), "nil", Thk(Empty, Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty)))), "cons", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Arrow(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))), Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))), "gen", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), WR(Empty, Empty)))), "map", Thk(Empty, Cons(Arrow(Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Nat)), WR(Empty, Empty))), WR(Empty, Empty))), Cons(Arrow(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))), Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))), "filter", Thk(Empty, Cons(Arrow(Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Bool)), WR(Empty, Empty))), WR(Empty, Empty))), Cons(Arrow(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))), Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))), "map_filter", Thk(Empty, Cons(Arrow(Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(IdentDef("OpNat", Sum(Unit, Prim(Nat)))), WR(Empty, Empty))), WR(Empty, Empty))), Cons(Arrow(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))), Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))), "f", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(IdentDef("OpNat", Sum(Unit, Prim(Nat)))), WR(Empty, Empty))), WR(Empty, Empty)))), "l", IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), "sugar_match_unroll", Sum(Unit, Prod(Prim(Nat), Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))))), dir: Check(Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), term: Case(Var("sugar_match_unroll"), "_u", Ret(Roll(Inj1(Unit))), "c", Let("let_split_sugar", Ret(Var("c")), Split(Var("let_split_sugar"), "h", "t", Let("t2", App(App(Force(Var("map_filter")), Var("f")), Var("t")), Let("oh2", App(Force(Var("f")), Var("h")), Case(Var("oh2"), "_u", Ret(Var("t2")), "h2", App(App(Force(Var("cons")), Var("h")), Var("t2")))))))), clas: Ok(Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), rule: Case(Der { ctx: Var(Var(Var(Var(Var(Var(Var(Var(Var(Var(Var(Var(Def(Def(Empty, "List", Type(Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), "OpNat", Type(Sum(Unit, Prim(Nat)))), "nat_is_zero", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Bool)), WR(Empty, Empty))), WR(Empty, Empty)))), "nat_is_odd", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Bool)), WR(Empty, Empty))), WR(Empty, Empty)))), "nat_sub", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Nat)), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))), "nil", Thk(Empty, Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty)))), "cons", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Arrow(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))), Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))), "gen", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), WR(Empty, Empty)))), "map", Thk(Empty, Cons(Arrow(Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Nat)), WR(Empty, Empty))), WR(Empty, Empty))), Cons(Arrow(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))), Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))), "filter", Thk(Empty, Cons(Arrow(Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Bool)), WR(Empty, Empty))), WR(Empty, Empty))), Cons(Arrow(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))), Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))), "map_filter", Thk(Empty, Cons(Arrow(Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(IdentDef("OpNat", Sum(Unit, Prim(Nat)))), WR(Empty, Empty))), WR(Empty, Empty))), Cons(Arrow(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))), Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))), "f", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(IdentDef("OpNat", Sum(Unit, Prim(Nat)))), WR(Empty, Empty))), WR(Empty, Empty)))), "l", IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), "sugar_match_unroll", Sum(Unit, Prod(Prim(Nat), Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))))), dir: Synth, term: Var("sugar_match_unroll"), clas: Ok(Sum(Unit, Prod(Prim(Nat), Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))))), rule: Var("sugar_match_unroll"), vis: DerVis { tmfam: "Val", local_err: false } }, "_u", Der { ctx: Var(Var(Var(Var(Var(Var(Var(Var(Var(Var(Var(Var(Var(Def(Def(Empty, "List", Type(Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), "OpNat", Type(Sum(Unit, Prim(Nat)))), "nat_is_zero", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Bool)), WR(Empty, Empty))), WR(Empty, Empty)))), "nat_is_odd", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Bool)), WR(Empty, Empty))), WR(Empty, Empty)))), "nat_sub", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Nat)), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))), "nil", Thk(Empty, Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty)))), "cons", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Arrow(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))), Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))), "gen", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), WR(Empty, Empty)))), "map", Thk(Empty, Cons(Arrow(Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Nat)), WR(Empty, Empty))), WR(Empty, Empty))), Cons(Arrow(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))), Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))), "filter", Thk(Empty, Cons(Arrow(Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Bool)), WR(Empty, Empty))), WR(Empty, Empty))), Cons(Arrow(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))), Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))), "map_filter", Thk(Empty, Cons(Arrow(Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(IdentDef("OpNat", Sum(Unit, Prim(Nat)))), WR(Empty, Empty))), WR(Empty, Empty))), Cons(Arrow(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))), Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))), "f", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(IdentDef("OpNat", Sum(Unit, Prim(Nat)))), WR(Empty, Empty))), WR(Empty, Empty)))), "l", IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), "sugar_match_unroll", Sum(Unit, Prod(Prim(Nat), Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))))), "_u", Unit), dir: Check(Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), term: Ret(Roll(Inj1(Unit))), clas: Ok(Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), rule: Ret(Der { ctx: Var(Var(Var(Var(Var(Var(Var(Var(Var(Var(Var(Var(Var(Def(Def(Empty, "List", Type(Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), "OpNat", Type(Sum(Unit, Prim(Nat)))), "nat_is_zero", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Bool)), WR(Empty, Empty))), WR(Empty, Empty)))), "nat_is_odd", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Bool)), WR(Empty, Empty))), WR(Empty, Empty)))), "nat_sub", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Nat)), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))), "nil", Thk(Empty, Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty)))), "cons", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Arrow(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))), Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))), "gen", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), WR(Empty, Empty)))), "map", Thk(Empty, Cons(Arrow(Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Nat)), WR(Empty, Empty))), WR(Empty, Empty))), Cons(Arrow(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))), Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))), "filter", Thk(Empty, Cons(Arrow(Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Bool)), WR(Empty, Empty))), WR(Empty, Empty))), Cons(Arrow(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))), Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))), "map_filter", Thk(Empty, Cons(Arrow(Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(IdentDef("OpNat", Sum(Unit, Prim(Nat)))), WR(Empty, Empty))), WR(Empty, Empty))), Cons(Arrow(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))), Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))), "f", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(IdentDef("OpNat", Sum(Unit, Prim(Nat)))), WR(Empty, Empty))), WR(Empty, Empty)))), "l", IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), "sugar_match_unroll", Sum(Unit, Prod(Prim(Nat), Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))))), "_u", Unit), dir: Check(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), term: Roll(Inj1(Unit)), clas: Ok(Sum(Unit, Prod(Prim(Nat), Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))))), rule: Roll(Der { ctx: Var(Var(Var(Var(Var(Var(Var(Var(Var(Var(Var(Var(Var(Def(Def(Empty, "List", Type(Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), "OpNat", Type(Sum(Unit, Prim(Nat)))), "nat_is_zero", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Bool)), WR(Empty, Empty))), WR(Empty, Empty)))), "nat_is_odd", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Bool)), WR(Empty, Empty))), WR(Empty, Empty)))), "nat_sub", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Nat)), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))), "nil", Thk(Empty, Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty)))), "cons", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Arrow(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))), Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))), "gen", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), WR(Empty, Empty)))), "map", Thk(Empty, Cons(Arrow(Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Nat)), WR(Empty, Empty))), WR(Empty, Empty))), Cons(Arrow(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))), Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))), "filter", Thk(Empty, Cons(Arrow(Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Bool)), WR(Empty, Empty))), WR(Empty, Empty))), Cons(Arrow(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))), Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))), "map_filter", Thk(Empty, Cons(Arrow(Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(IdentDef("OpNat", Sum(Unit, Prim(Nat)))), WR(Empty, Empty))), WR(Empty, Empty))), Cons(Arrow(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))), Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))), "f", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(IdentDef("OpNat", Sum(Unit, Prim(Nat)))), WR(Empty, Empty))), WR(Empty, Empty)))), "l", IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), "sugar_match_unroll", Sum(Unit, Prod(Prim(Nat), Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))))), "_u", Unit), dir: Check(Sum(Unit, Prod(Prim(Nat), Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))))), term: Inj1(Unit), clas: Ok(Sum(Unit, Prod(Prim(Nat), Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))))), rule: Inj1(Der { ctx: Var(Var(Var(Var(Var(Var(Var(Var(Var(Var(Var(Var(Var(Def(Def(Empty, "List", Type(Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), "OpNat", Type(Sum(Unit, Prim(Nat)))), "nat_is_zero", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Bool)), WR(Empty, Empty))), WR(Empty, Empty)))), "nat_is_odd", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Bool)), WR(Empty, Empty))), WR(Empty, Empty)))), "nat_sub", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Nat)), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))), "nil", Thk(Empty, Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty)))), "cons", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Arrow(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))), Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))), "gen", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), WR(Empty, Empty)))), "map", Thk(Empty, Cons(Arrow(Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Nat)), WR(Empty, Empty))), WR(Empty, Empty))), Cons(Arrow(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))), Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))), "filter", Thk(Empty, Cons(Arrow(Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Bool)), WR(Empty, Empty))), WR(Empty, Empty))), Cons(Arrow(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))), Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))), "map_filter", Thk(Empty, Cons(Arrow(Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(IdentDef("OpNat", Sum(Unit, Prim(Nat)))), WR(Empty, Empty))), WR(Empty, Empty))), Cons(Arrow(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))), Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))), "f", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(IdentDef("OpNat", Sum(Unit, Prim(Nat)))), WR(Empty, Empty))), WR(Empty, Empty)))), "l", IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), "sugar_match_unroll", Sum(Unit, Prod(Prim(Nat), Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))))), "_u", Unit), dir: Check(Unit), term: Unit, clas: Ok(Unit), rule: Unit, vis: DerVis { tmfam: "Val", local_err: false } }), vis: DerVis { tmfam: "Val", local_err: false } }), vis: DerVis { tmfam: "Val", local_err: false } }), vis: DerVis { tmfam: "Exp", local_err: false } }, "c", Der { ctx: Var(Var(Var(Var(Var(Var(Var(Var(Var(Var(Var(Var(Var(Def(Def(Empty, "List", Type(Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), "OpNat", Type(Sum(Unit, Prim(Nat)))), "nat_is_zero", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Bool)), WR(Empty, Empty))), WR(Empty, Empty)))), "nat_is_odd", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Bool)), WR(Empty, Empty))), WR(Empty, Empty)))), "nat_sub", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Nat)), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))), "nil", Thk(Empty, Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty)))), "cons", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Arrow(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))), Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))), "gen", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), WR(Empty, Empty)))), "map", Thk(Empty, Cons(Arrow(Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Nat)), WR(Empty, Empty))), WR(Empty, Empty))), Cons(Arrow(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))), Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))), "filter", Thk(Empty, Cons(Arrow(Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Bool)), WR(Empty, Empty))), WR(Empty, Empty))), Cons(Arrow(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))), Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))), "map_filter", Thk(Empty, Cons(Arrow(Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(IdentDef("OpNat", Sum(Unit, Prim(Nat)))), WR(Empty, Empty))), WR(Empty, Empty))), Cons(Arrow(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))), Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))), "f", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(IdentDef("OpNat", Sum(Unit, Prim(Nat)))), WR(Empty, Empty))), WR(Empty, Empty)))), "l", IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), "sugar_match_unroll", Sum(Unit, Prod(Prim(Nat), Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))))), "c", Prod(Prim(Nat), Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), dir: Check(Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), term: Let("let_split_sugar", Ret(Var("c")), Split(Var("let_split_sugar"), "h", "t", Let("t2", App(App(Force(Var("map_filter")), Var("f")), Var("t")), Let("oh2", App(Force(Var("f")), Var("h")), Case(Var("oh2"), "_u", Ret(Var("t2")), "h2", App(App(Force(Var("cons")), Var("h")), Var("t2"))))))), clas: Ok(Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), rule: Let("let_split_sugar", Der { ctx: Var(Var(Var(Var(Var(Var(Var(Var(Var(Var(Var(Var(Var(Def(Def(Empty, "List", Type(Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), "OpNat", Type(Sum(Unit, Prim(Nat)))), "nat_is_zero", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Bool)), WR(Empty, Empty))), WR(Empty, Empty)))), "nat_is_odd", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Bool)), WR(Empty, Empty))), WR(Empty, Empty)))), "nat_sub", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Nat)), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))), "nil", Thk(Empty, Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty)))), "cons", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Arrow(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))), Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))), "gen", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), WR(Empty, Empty)))), "map", Thk(Empty, Cons(Arrow(Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Nat)), WR(Empty, Empty))), WR(Empty, Empty))), Cons(Arrow(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))), Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))), "filter", Thk(Empty, Cons(Arrow(Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Bool)), WR(Empty, Empty))), WR(Empty, Empty))), Cons(Arrow(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))), Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))), "map_filter", Thk(Empty, Cons(Arrow(Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(IdentDef("OpNat", Sum(Unit, Prim(Nat)))), WR(Empty, Empty))), WR(Empty, Empty))), Cons(Arrow(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))), Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))), "f", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(IdentDef("OpNat", Sum(Unit, Prim(Nat)))), WR(Empty, Empty))), WR(Empty, Empty)))), "l", IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), "sugar_match_unroll", Sum(Unit, Prod(Prim(Nat), Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))))), "c", Prod(Prim(Nat), Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), dir: Synth, term: Ret(Var("c")), clas: Ok(Cons(Lift(Prod(Prim(Nat), Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), rule: Ret(Der { ctx: Var(Var(Var(Var(Var(Var(Var(Var(Var(Var(Var(Var(Var(Def(Def(Empty, "List", Type(Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), "OpNat", Type(Sum(Unit, Prim(Nat)))), "nat_is_zero", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Bool)), WR(Empty, Empty))), WR(Empty, Empty)))), "nat_is_odd", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Bool)), WR(Empty, Empty))), WR(Empty, Empty)))), "nat_sub", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Nat)), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))), "nil", Thk(Empty, Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty)))), "cons", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Arrow(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))), Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))), "gen", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), WR(Empty, Empty)))), "map", Thk(Empty, Cons(Arrow(Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Nat)), WR(Empty, Empty))), WR(Empty, Empty))), Cons(Arrow(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))), Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))), "filter", Thk(Empty, Cons(Arrow(Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Bool)), WR(Empty, Empty))), WR(Empty, Empty))), Cons(Arrow(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))), Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))), "map_filter", Thk(Empty, Cons(Arrow(Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(IdentDef("OpNat", Sum(Unit, Prim(Nat)))), WR(Empty, Empty))), WR(Empty, Empty))), Cons(Arrow(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))), Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))), "f", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(IdentDef("OpNat", Sum(Unit, Prim(Nat)))), WR(Empty, Empty))), WR(Empty, Empty)))), "l", IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), "sugar_match_unroll", Sum(Unit, Prod(Prim(Nat), Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))))), "c", Prod(Prim(Nat), Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), dir: Synth, term: Var("c"), clas: Ok(Prod(Prim(Nat), Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), rule: Var("c"), vis: DerVis { tmfam: "Val", local_err: false } }), vis: DerVis { tmfam: "Exp", local_err: false } }, Der { ctx: Var(Var(Var(Var(Var(Var(Var(Var(Var(Var(Var(Var(Var(Var(Def(Def(Empty, "List", Type(Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), "OpNat", Type(Sum(Unit, Prim(Nat)))), "nat_is_zero", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Bool)), WR(Empty, Empty))), WR(Empty, Empty)))), "nat_is_odd", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Bool)), WR(Empty, Empty))), WR(Empty, Empty)))), "nat_sub", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Nat)), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))), "nil", Thk(Empty, Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty)))), "cons", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Arrow(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))), Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))), "gen", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), WR(Empty, Empty)))), "map", Thk(Empty, Cons(Arrow(Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Nat)), WR(Empty, Empty))), WR(Empty, Empty))), Cons(Arrow(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))), Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))), "filter", Thk(Empty, Cons(Arrow(Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Bool)), WR(Empty, Empty))), WR(Empty, Empty))), Cons(Arrow(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))), Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))), "map_filter", Thk(Empty, Cons(Arrow(Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(IdentDef("OpNat", Sum(Unit, Prim(Nat)))), WR(Empty, Empty))), WR(Empty, Empty))), Cons(Arrow(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))), Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))), "f", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(IdentDef("OpNat", Sum(Unit, Prim(Nat)))), WR(Empty, Empty))), WR(Empty, Empty)))), "l", IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), "sugar_match_unroll", Sum(Unit, Prod(Prim(Nat), Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))))), "c", Prod(Prim(Nat), Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), "let_split_sugar", Prod(Prim(Nat), Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), dir: Check(Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), term: Split(Var("let_split_sugar"), "h", "t", Let("t2", App(App(Force(Var("map_filter")), Var("f")), Var("t")), Let("oh2", App(Force(Var("f")), Var("h")), Case(Var("oh2"), "_u", Ret(Var("t2")), "h2", App(App(Force(Var("cons")), Var("h")), Var("t2")))))), clas: Ok(Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), rule: Split(Der { ctx: Var(Var(Var(Var(Var(Var(Var(Var(Var(Var(Var(Var(Var(Var(Def(Def(Empty, "List", Type(Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), "OpNat", Type(Sum(Unit, Prim(Nat)))), "nat_is_zero", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Bool)), WR(Empty, Empty))), WR(Empty, Empty)))), "nat_is_odd", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Bool)), WR(Empty, Empty))), WR(Empty, Empty)))), "nat_sub", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Nat)), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))), "nil", Thk(Empty, Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty)))), "cons", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Arrow(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))), Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))), "gen", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), WR(Empty, Empty)))), "map", Thk(Empty, Cons(Arrow(Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Nat)), WR(Empty, Empty))), WR(Empty, Empty))), Cons(Arrow(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))), Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))), "filter", Thk(Empty, Cons(Arrow(Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Bool)), WR(Empty, Empty))), WR(Empty, Empty))), Cons(Arrow(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))), Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))), "map_filter", Thk(Empty, Cons(Arrow(Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(IdentDef("OpNat", Sum(Unit, Prim(Nat)))), WR(Empty, Empty))), WR(Empty, Empty))), Cons(Arrow(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))), Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))), "f", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(IdentDef("OpNat", Sum(Unit, Prim(Nat)))), WR(Empty, Empty))), WR(Empty, Empty)))), "l", IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), "sugar_match_unroll", Sum(Unit, Prod(Prim(Nat), Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))))), "c", Prod(Prim(Nat), Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), "let_split_sugar", Prod(Prim(Nat), Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), dir: Synth, term: Var("let_split_sugar"), clas: Ok(Prod(Prim(Nat), Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), rule: Var("let_split_sugar"), vis: DerVis { tmfam: "Val", local_err: false } }, "h", "t", Der { ctx: Var(Var(Var(Var(Var(Var(Var(Var(Var(Var(Var(Var(Var(Var(Var(Var(Def(Def(Empty, "List", Type(Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), "OpNat", Type(Sum(Unit, Prim(Nat)))), "nat_is_zero", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Bool)), WR(Empty, Empty))), WR(Empty, Empty)))), "nat_is_odd", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Bool)), WR(Empty, Empty))), WR(Empty, Empty)))), "nat_sub", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Nat)), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))), "nil", Thk(Empty, Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty)))), "cons", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Arrow(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))), Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))), "gen", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), WR(Empty, Empty)))), "map", Thk(Empty, Cons(Arrow(Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Nat)), WR(Empty, Empty))), WR(Empty, Empty))), Cons(Arrow(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))), Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))), "filter", Thk(Empty, Cons(Arrow(Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Bool)), WR(Empty, Empty))), WR(Empty, Empty))), Cons(Arrow(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))), Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))), "map_filter", Thk(Empty, Cons(Arrow(Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(IdentDef("OpNat", Sum(Unit, Prim(Nat)))), WR(Empty, Empty))), WR(Empty, Empty))), Cons(Arrow(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))), Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))), "f", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(IdentDef("OpNat", Sum(Unit, Prim(Nat)))), WR(Empty, Empty))), WR(Empty, Empty)))), "l", IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), "sugar_match_unroll", Sum(Unit, Prod(Prim(Nat), Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))))), "c", Prod(Prim(Nat), Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), "let_split_sugar", Prod(Prim(Nat), Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), "h", Prim(Nat)), "t", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))), dir: Check(Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), term: Let("t2", App(App(Force(Var("map_filter")), Var("f")), Var("t")), Let("oh2", App(Force(Var("f")), Var("h")), Case(Var("oh2"), "_u", Ret(Var("t2")), "h2", App(App(Force(Var("cons")), Var("h")), Var("t2"))))), clas: Ok(Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), rule: Let("t2", Der { ctx: Var(Var(Var(Var(Var(Var(Var(Var(Var(Var(Var(Var(Var(Var(Var(Var(Def(Def(Empty, "List", Type(Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), "OpNat", Type(Sum(Unit, Prim(Nat)))), "nat_is_zero", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Bool)), WR(Empty, Empty))), WR(Empty, Empty)))), "nat_is_odd", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Bool)), WR(Empty, Empty))), WR(Empty, Empty)))), "nat_sub", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Nat)), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))), "nil", Thk(Empty, Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty)))), "cons", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Arrow(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))), Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))), "gen", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), WR(Empty, Empty)))), "map", Thk(Empty, Cons(Arrow(Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Nat)), WR(Empty, Empty))), WR(Empty, Empty))), Cons(Arrow(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))), Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))), "filter", Thk(Empty, Cons(Arrow(Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Bool)), WR(Empty, Empty))), WR(Empty, Empty))), Cons(Arrow(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))), Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))), "map_filter", Thk(Empty, Cons(Arrow(Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(IdentDef("OpNat", Sum(Unit, Prim(Nat)))), WR(Empty, Empty))), WR(Empty, Empty))), Cons(Arrow(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))), Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))), "f", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(IdentDef("OpNat", Sum(Unit, Prim(Nat)))), WR(Empty, Empty))), WR(Empty, Empty)))), "l", IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), "sugar_match_unroll", Sum(Unit, Prod(Prim(Nat), Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))))), "c", Prod(Prim(Nat), Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), "let_split_sugar", Prod(Prim(Nat), Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), "h", Prim(Nat)), "t", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))), dir: Synth, term: App(App(Force(Var("map_filter")), Var("f")), Var("t")), clas: Ok(Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), rule: App(Der { ctx: Var(Var(Var(Var(Var(Var(Var(Var(Var(Var(Var(Var(Var(Var(Var(Var(Def(Def(Empty, "List", Type(Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), "OpNat", Type(Sum(Unit, Prim(Nat)))), "nat_is_zero", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Bool)), WR(Empty, Empty))), WR(Empty, Empty)))), "nat_is_odd", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Bool)), WR(Empty, Empty))), WR(Empty, Empty)))), "nat_sub", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Nat)), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))), "nil", Thk(Empty, Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty)))), "cons", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Arrow(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))), Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))), "gen", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), WR(Empty, Empty)))), "map", Thk(Empty, Cons(Arrow(Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Nat)), WR(Empty, Empty))), WR(Empty, Empty))), Cons(Arrow(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))), Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))), "filter", Thk(Empty, Cons(Arrow(Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Bool)), WR(Empty, Empty))), WR(Empty, Empty))), Cons(Arrow(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))), Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))), "map_filter", Thk(Empty, Cons(Arrow(Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(IdentDef("OpNat", Sum(Unit, Prim(Nat)))), WR(Empty, Empty))), WR(Empty, Empty))), Cons(Arrow(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))), Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))), "f", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(IdentDef("OpNat", Sum(Unit, Prim(Nat)))), WR(Empty, Empty))), WR(Empty, Empty)))), "l", IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), "sugar_match_unroll", Sum(Unit, Prod(Prim(Nat), Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))))), "c", Prod(Prim(Nat), Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), "let_split_sugar", Prod(Prim(Nat), Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), "h", Prim(Nat)), "t", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))), dir: Synth, term: App(Force(Var("map_filter")), Var("f")), clas: Ok(Cons(Arrow(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))), Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), WR(Empty, Empty))), rule: App(Der { ctx: Var(Var(Var(Var(Var(Var(Var(Var(Var(Var(Var(Var(Var(Var(Var(Var(Def(Def(Empty, "List", Type(Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), "OpNat", Type(Sum(Unit, Prim(Nat)))), "nat_is_zero", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Bool)), WR(Empty, Empty))), WR(Empty, Empty)))), "nat_is_odd", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Bool)), WR(Empty, Empty))), WR(Empty, Empty)))), "nat_sub", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Nat)), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))), "nil", Thk(Empty, Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty)))), "cons", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Arrow(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))), Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))), "gen", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), WR(Empty, Empty)))), "map", Thk(Empty, Cons(Arrow(Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Nat)), WR(Empty, Empty))), WR(Empty, Empty))), Cons(Arrow(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))), Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))), "filter", Thk(Empty, Cons(Arrow(Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Bool)), WR(Empty, Empty))), WR(Empty, Empty))), Cons(Arrow(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))), Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))), "map_filter", Thk(Empty, Cons(Arrow(Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(IdentDef("OpNat", Sum(Unit, Prim(Nat)))), WR(Empty, Empty))), WR(Empty, Empty))), Cons(Arrow(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))), Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))), "f", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(IdentDef("OpNat", Sum(Unit, Prim(Nat)))), WR(Empty, Empty))), WR(Empty, Empty)))), "l", IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), "sugar_match_unroll", Sum(Unit, Prod(Prim(Nat), Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))))), "c", Prod(Prim(Nat), Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), "let_split_sugar", Prod(Prim(Nat), Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), "h", Prim(Nat)), "t", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))), dir: Synth, term: Force(Var("map_filter")), clas: Ok(Cons(Arrow(Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(IdentDef("OpNat", Sum(Unit, Prim(Nat)))), WR(Empty, Empty))), WR(Empty, Empty))), Cons(Arrow(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))), Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty))), rule: Force(Der { ctx: Var(Var(Var(Var(Var(Var(Var(Var(Var(Var(Var(Var(Var(Var(Var(Var(Def(Def(Empty, "List", Type(Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), "OpNat", Type(Sum(Unit, Prim(Nat)))), "nat_is_zero", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Bool)), WR(Empty, Empty))), WR(Empty, Empty)))), "nat_is_odd", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Bool)), WR(Empty, Empty))), WR(Empty, Empty)))), "nat_sub", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Nat)), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))), "nil", Thk(Empty, Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty)))), "cons", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Arrow(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))), Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))), "gen", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), WR(Empty, Empty)))), "map", Thk(Empty, Cons(Arrow(Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Nat)), WR(Empty, Empty))), WR(Empty, Empty))), Cons(Arrow(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))), Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))), "filter", Thk(Empty, Cons(Arrow(Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Bool)), WR(Empty, Empty))), WR(Empty, Empty))), Cons(Arrow(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))), Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))), "map_filter", Thk(Empty, Cons(Arrow(Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(IdentDef("OpNat", Sum(Unit, Prim(Nat)))), WR(Empty, Empty))), WR(Empty, Empty))), Cons(Arrow(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))), Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))), "f", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(IdentDef("OpNat", Sum(Unit, Prim(Nat)))), WR(Empty, Empty))), WR(Empty, Empty)))), "l", IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), "sugar_match_unroll", Sum(Unit, Prod(Prim(Nat), Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))))), "c", Prod(Prim(Nat), Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), "let_split_sugar", Prod(Prim(Nat), Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), "h", Prim(Nat)), "t", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))), dir: Synth, term: Var("map_filter"), clas: Ok(Thk(Empty, Cons(Arrow(Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(IdentDef("OpNat", Sum(Unit, Prim(Nat)))), WR(Empty, Empty))), WR(Empty, Empty))), Cons(Arrow(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))), Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))), rule: Var("map_filter"), vis: DerVis { tmfam: "Val", local_err: false } }), vis: DerVis { tmfam: "Exp", local_err: false } }, Der { ctx: Var(Var(Var(Var(Var(Var(Var(Var(Var(Var(Var(Var(Var(Var(Var(Var(Def(Def(Empty, "List", Type(Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), "OpNat", Type(Sum(Unit, Prim(Nat)))), "nat_is_zero", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Bool)), WR(Empty, Empty))), WR(Empty, Empty)))), "nat_is_odd", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Bool)), WR(Empty, Empty))), WR(Empty, Empty)))), "nat_sub", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Nat)), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))), "nil", Thk(Empty, Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty)))), "cons", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Arrow(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))), Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))), "gen", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), WR(Empty, Empty)))), "map", Thk(Empty, Cons(Arrow(Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Nat)), WR(Empty, Empty))), WR(Empty, Empty))), Cons(Arrow(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))), Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))), "filter", Thk(Empty, Cons(Arrow(Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Bool)), WR(Empty, Empty))), WR(Empty, Empty))), Cons(Arrow(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))), Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))), "map_filter", Thk(Empty, Cons(Arrow(Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(IdentDef("OpNat", Sum(Unit, Prim(Nat)))), WR(Empty, Empty))), WR(Empty, Empty))), Cons(Arrow(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))), Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))), "f", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(IdentDef("OpNat", Sum(Unit, Prim(Nat)))), WR(Empty, Empty))), WR(Empty, Empty)))), "l", IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), "sugar_match_unroll", Sum(Unit, Prod(Prim(Nat), Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))))), "c", Prod(Prim(Nat), Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), "let_split_sugar", Prod(Prim(Nat), Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), "h", Prim(Nat)), "t", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))), dir: Check(Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(IdentDef("OpNat", Sum(Unit, Prim(Nat)))), WR(Empty, Empty))), WR(Empty, Empty)))), term: Var("f"), clas: Ok(Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(IdentDef("OpNat", Sum(Unit, Prim(Nat)))), WR(Empty, Empty))), WR(Empty, Empty)))), rule: Var("f"), vis: DerVis { tmfam: "Val", local_err: false } }), vis: DerVis { tmfam: "Exp", local_err: false } }, Der { ctx: Var(Var(Var(Var(Var(Var(Var(Var(Var(Var(Var(Var(Var(Var(Var(Var(Def(Def(Empty, "List", Type(Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), "OpNat", Type(Sum(Unit, Prim(Nat)))), "nat_is_zero", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Bool)), WR(Empty, Empty))), WR(Empty, Empty)))), "nat_is_odd", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Bool)), WR(Empty, Empty))), WR(Empty, Empty)))), "nat_sub", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Nat)), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))), "nil", Thk(Empty, Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty)))), "cons", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Arrow(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))), Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))), "gen", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), WR(Empty, Empty)))), "map", Thk(Empty, Cons(Arrow(Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Nat)), WR(Empty, Empty))), WR(Empty, Empty))), Cons(Arrow(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))), Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))), "filter", Thk(Empty, Cons(Arrow(Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Bool)), WR(Empty, Empty))), WR(Empty, Empty))), Cons(Arrow(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))), Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))), "map_filter", Thk(Empty, Cons(Arrow(Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(IdentDef("OpNat", Sum(Unit, Prim(Nat)))), WR(Empty, Empty))), WR(Empty, Empty))), Cons(Arrow(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))), Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))), "f", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(IdentDef("OpNat", Sum(Unit, Prim(Nat)))), WR(Empty, Empty))), WR(Empty, Empty)))), "l", IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), "sugar_match_unroll", Sum(Unit, Prod(Prim(Nat), Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))))), "c", Prod(Prim(Nat), Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), "let_split_sugar", Prod(Prim(Nat), Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), "h", Prim(Nat)), "t", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))), dir: Check(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), term: Var("t"), clas: Ok(Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))), rule: Var("t"), vis: DerVis { tmfam: "Val", local_err: false } }), vis: DerVis { tmfam: "Exp", local_err: false } }, Der { ctx: Var(Var(Var(Var(Var(Var(Var(Var(Var(Var(Var(Var(Var(Var(Var(Var(Var(Def(Def(Empty, "List", Type(Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), "OpNat", Type(Sum(Unit, Prim(Nat)))), "nat_is_zero", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Bool)), WR(Empty, Empty))), WR(Empty, Empty)))), "nat_is_odd", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Bool)), WR(Empty, Empty))), WR(Empty, Empty)))), "nat_sub", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Nat)), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))), "nil", Thk(Empty, Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty)))), "cons", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Arrow(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))), Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))), "gen", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), WR(Empty, Empty)))), "map", Thk(Empty, Cons(Arrow(Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Nat)), WR(Empty, Empty))), WR(Empty, Empty))), Cons(Arrow(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))), Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))), "filter", Thk(Empty, Cons(Arrow(Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Bool)), WR(Empty, Empty))), WR(Empty, Empty))), Cons(Arrow(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))), Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))), "map_filter", Thk(Empty, Cons(Arrow(Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(IdentDef("OpNat", Sum(Unit, Prim(Nat)))), WR(Empty, Empty))), WR(Empty, Empty))), Cons(Arrow(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))), Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))), "f", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(IdentDef("OpNat", Sum(Unit, Prim(Nat)))), WR(Empty, Empty))), WR(Empty, Empty)))), "l", IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), "sugar_match_unroll", Sum(Unit, Prod(Prim(Nat), Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))))), "c", Prod(Prim(Nat), Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), "let_split_sugar", Prod(Prim(Nat), Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), "h", Prim(Nat)), "t", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))), "t2", IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), dir: Check(Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), term: Let("oh2", App(Force(Var("f")), Var("h")), Case(Var("oh2"), "_u", Ret(Var("t2")), "h2", App(App(Force(Var("cons")), Var("h")), Var("t2")))), clas: Ok(Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), rule: Let("oh2", Der { ctx: Var(Var(Var(Var(Var(Var(Var(Var(Var(Var(Var(Var(Var(Var(Var(Var(Var(Def(Def(Empty, "List", Type(Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), "OpNat", Type(Sum(Unit, Prim(Nat)))), "nat_is_zero", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Bool)), WR(Empty, Empty))), WR(Empty, Empty)))), "nat_is_odd", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Bool)), WR(Empty, Empty))), WR(Empty, Empty)))), "nat_sub", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Nat)), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))), "nil", Thk(Empty, Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty)))), "cons", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Arrow(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))), Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))), "gen", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), WR(Empty, Empty)))), "map", Thk(Empty, Cons(Arrow(Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Nat)), WR(Empty, Empty))), WR(Empty, Empty))), Cons(Arrow(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))), Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))), "filter", Thk(Empty, Cons(Arrow(Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Bool)), WR(Empty, Empty))), WR(Empty, Empty))), Cons(Arrow(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))), Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))), "map_filter", Thk(Empty, Cons(Arrow(Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(IdentDef("OpNat", Sum(Unit, Prim(Nat)))), WR(Empty, Empty))), WR(Empty, Empty))), Cons(Arrow(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))), Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))), "f", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(IdentDef("OpNat", Sum(Unit, Prim(Nat)))), WR(Empty, Empty))), WR(Empty, Empty)))), "l", IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), "sugar_match_unroll", Sum(Unit, Prod(Prim(Nat), Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))))), "c", Prod(Prim(Nat), Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), "let_split_sugar", Prod(Prim(Nat), Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), "h", Prim(Nat)), "t", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))), "t2", IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), dir: Synth, term: App(Force(Var("f")), Var("h")), clas: Ok(Cons(Lift(IdentDef("OpNat", Sum(Unit, Prim(Nat)))), WR(Empty, Empty))), rule: App(Der { ctx: Var(Var(Var(Var(Var(Var(Var(Var(Var(Var(Var(Var(Var(Var(Var(Var(Var(Def(Def(Empty, "List", Type(Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), "OpNat", Type(Sum(Unit, Prim(Nat)))), "nat_is_zero", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Bool)), WR(Empty, Empty))), WR(Empty, Empty)))), "nat_is_odd", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Bool)), WR(Empty, Empty))), WR(Empty, Empty)))), "nat_sub", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Nat)), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))), "nil", Thk(Empty, Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty)))), "cons", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Arrow(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))), Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))), "gen", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), WR(Empty, Empty)))), "map", Thk(Empty, Cons(Arrow(Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Nat)), WR(Empty, Empty))), WR(Empty, Empty))), Cons(Arrow(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))), Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))), "filter", Thk(Empty, Cons(Arrow(Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Bool)), WR(Empty, Empty))), WR(Empty, Empty))), Cons(Arrow(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))), Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))), "map_filter", Thk(Empty, Cons(Arrow(Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(IdentDef("OpNat", Sum(Unit, Prim(Nat)))), WR(Empty, Empty))), WR(Empty, Empty))), Cons(Arrow(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))), Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))), "f", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(IdentDef("OpNat", Sum(Unit, Prim(Nat)))), WR(Empty, Empty))), WR(Empty, Empty)))), "l", IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), "sugar_match_unroll", Sum(Unit, Prod(Prim(Nat), Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))))), "c", Prod(Prim(Nat), Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), "let_split_sugar", Prod(Prim(Nat), Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), "h", Prim(Nat)), "t", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))), "t2", IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), dir: Synth, term: Force(Var("f")), clas: Ok(Cons(Arrow(Prim(Nat), Cons(Lift(IdentDef("OpNat", Sum(Unit, Prim(Nat)))), WR(Empty, Empty))), WR(Empty, Empty))), rule: Force(Der { ctx: Var(Var(Var(Var(Var(Var(Var(Var(Var(Var(Var(Var(Var(Var(Var(Var(Var(Def(Def(Empty, "List", Type(Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), "OpNat", Type(Sum(Unit, Prim(Nat)))), "nat_is_zero", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Bool)), WR(Empty, Empty))), WR(Empty, Empty)))), "nat_is_odd", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Bool)), WR(Empty, Empty))), WR(Empty, Empty)))), "nat_sub", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Nat)), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))), "nil", Thk(Empty, Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty)))), "cons", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Arrow(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))), Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))), "gen", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), WR(Empty, Empty)))), "map", Thk(Empty, Cons(Arrow(Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Nat)), WR(Empty, Empty))), WR(Empty, Empty))), Cons(Arrow(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))), Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))), "filter", Thk(Empty, Cons(Arrow(Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Bool)), WR(Empty, Empty))), WR(Empty, Empty))), Cons(Arrow(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))), Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))), "map_filter", Thk(Empty, Cons(Arrow(Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(IdentDef("OpNat", Sum(Unit, Prim(Nat)))), WR(Empty, Empty))), WR(Empty, Empty))), Cons(Arrow(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))), Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))), "f", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(IdentDef("OpNat", Sum(Unit, Prim(Nat)))), WR(Empty, Empty))), WR(Empty, Empty)))), "l", IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), "sugar_match_unroll", Sum(Unit, Prod(Prim(Nat), Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))))), "c", Prod(Prim(Nat), Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), "let_split_sugar", Prod(Prim(Nat), Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), "h", Prim(Nat)), "t", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))), "t2", IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), dir: Synth, term: Var("f"), clas: Ok(Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(IdentDef("OpNat", Sum(Unit, Prim(Nat)))), WR(Empty, Empty))), WR(Empty, Empty)))), rule: Var("f"), vis: DerVis { tmfam: "Val", local_err: false } }), vis: DerVis { tmfam: "Exp", local_err: false } }, Der { ctx: Var(Var(Var(Var(Var(Var(Var(Var(Var(Var(Var(Var(Var(Var(Var(Var(Var(Def(Def(Empty, "List", Type(Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), "OpNat", Type(Sum(Unit, Prim(Nat)))), "nat_is_zero", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Bool)), WR(Empty, Empty))), WR(Empty, Empty)))), "nat_is_odd", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Bool)), WR(Empty, Empty))), WR(Empty, Empty)))), "nat_sub", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Nat)), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))), "nil", Thk(Empty, Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty)))), "cons", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Arrow(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))), Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))), "gen", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), WR(Empty, Empty)))), "map", Thk(Empty, Cons(Arrow(Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Nat)), WR(Empty, Empty))), WR(Empty, Empty))), Cons(Arrow(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))), Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))), "filter", Thk(Empty, Cons(Arrow(Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Bool)), WR(Empty, Empty))), WR(Empty, Empty))), Cons(Arrow(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))), Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))), "map_filter", Thk(Empty, Cons(Arrow(Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(IdentDef("OpNat", Sum(Unit, Prim(Nat)))), WR(Empty, Empty))), WR(Empty, Empty))), Cons(Arrow(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))), Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))), "f", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(IdentDef("OpNat", Sum(Unit, Prim(Nat)))), WR(Empty, Empty))), WR(Empty, Empty)))), "l", IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), "sugar_match_unroll", Sum(Unit, Prod(Prim(Nat), Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))))), "c", Prod(Prim(Nat), Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), "let_split_sugar", Prod(Prim(Nat), Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), "h", Prim(Nat)), "t", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))), "t2", IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), dir: Check(Prim(Nat)), term: Var("h"), clas: Ok(Prim(Nat)), rule: Var("h"), vis: DerVis { tmfam: "Val", local_err: false } }), vis: DerVis { tmfam: "Exp", local_err: false } }, Der { ctx: Var(Var(Var(Var(Var(Var(Var(Var(Var(Var(Var(Var(Var(Var(Var(Var(Var(Var(Def(Def(Empty, "List", Type(Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), "OpNat", Type(Sum(Unit, Prim(Nat)))), "nat_is_zero", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Bool)), WR(Empty, Empty))), WR(Empty, Empty)))), "nat_is_odd", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Bool)), WR(Empty, Empty))), WR(Empty, Empty)))), "nat_sub", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Nat)), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))), "nil", Thk(Empty, Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty)))), "cons", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Arrow(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))), Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))), "gen", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), WR(Empty, Empty)))), "map", Thk(Empty, Cons(Arrow(Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Nat)), WR(Empty, Empty))), WR(Empty, Empty))), Cons(Arrow(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))), Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))), "filter", Thk(Empty, Cons(Arrow(Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Bool)), WR(Empty, Empty))), WR(Empty, Empty))), Cons(Arrow(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))), Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))), "map_filter", Thk(Empty, Cons(Arrow(Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(IdentDef("OpNat", Sum(Unit, Prim(Nat)))), WR(Empty, Empty))), WR(Empty, Empty))), Cons(Arrow(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))), Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))), "f", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(IdentDef("OpNat", Sum(Unit, Prim(Nat)))), WR(Empty, Empty))), WR(Empty, Empty)))), "l", IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), "sugar_match_unroll", Sum(Unit, Prod(Prim(Nat), Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))))), "c", Prod(Prim(Nat), Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), "let_split_sugar", Prod(Prim(Nat), Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), "h", Prim(Nat)), "t", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))), "t2", IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), "oh2", IdentDef("OpNat", Sum(Unit, Prim(Nat)))), dir: Check(Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), term: Case(Var("oh2"), "_u", Ret(Var("t2")), "h2", App(App(Force(Var("cons")), Var("h")), Var("t2"))), clas: Ok(Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), rule: Case(Der { ctx: Var(Var(Var(Var(Var(Var(Var(Var(Var(Var(Var(Var(Var(Var(Var(Var(Var(Var(Def(Def(Empty, "List", Type(Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), "OpNat", Type(Sum(Unit, Prim(Nat)))), "nat_is_zero", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Bool)), WR(Empty, Empty))), WR(Empty, Empty)))), "nat_is_odd", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Bool)), WR(Empty, Empty))), WR(Empty, Empty)))), "nat_sub", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Nat)), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))), "nil", Thk(Empty, Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty)))), "cons", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Arrow(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))), Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))), "gen", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), WR(Empty, Empty)))), "map", Thk(Empty, Cons(Arrow(Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Nat)), WR(Empty, Empty))), WR(Empty, Empty))), Cons(Arrow(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))), Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))), "filter", Thk(Empty, Cons(Arrow(Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Bool)), WR(Empty, Empty))), WR(Empty, Empty))), Cons(Arrow(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))), Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))), "map_filter", Thk(Empty, Cons(Arrow(Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(IdentDef("OpNat", Sum(Unit, Prim(Nat)))), WR(Empty, Empty))), WR(Empty, Empty))), Cons(Arrow(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))), Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))), "f", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(IdentDef("OpNat", Sum(Unit, Prim(Nat)))), WR(Empty, Empty))), WR(Empty, Empty)))), "l", IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), "sugar_match_unroll", Sum(Unit, Prod(Prim(Nat), Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))))), "c", Prod(Prim(Nat), Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), "let_split_sugar", Prod(Prim(Nat), Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), "h", Prim(Nat)), "t", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))), "t2", IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), "oh2", IdentDef("OpNat", Sum(Unit, Prim(Nat)))), dir: Synth, term: Var("oh2"), clas: Ok(IdentDef("OpNat", Sum(Unit, Prim(Nat)))), rule: Var("oh2"), vis: DerVis { tmfam: "Val", local_err: false } }, "_u", Der { ctx: Var(Var(Var(Var(Var(Var(Var(Var(Var(Var(Var(Var(Var(Var(Var(Var(Var(Var(Var(Def(Def(Empty, "List", Type(Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), "OpNat", Type(Sum(Unit, Prim(Nat)))), "nat_is_zero", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Bool)), WR(Empty, Empty))), WR(Empty, Empty)))), "nat_is_odd", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Bool)), WR(Empty, Empty))), WR(Empty, Empty)))), "nat_sub", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Nat)), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))), "nil", Thk(Empty, Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty)))), "cons", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Arrow(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))), Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))), "gen", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), WR(Empty, Empty)))), "map", Thk(Empty, Cons(Arrow(Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Nat)), WR(Empty, Empty))), WR(Empty, Empty))), Cons(Arrow(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))), Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))), "filter", Thk(Empty, Cons(Arrow(Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Bool)), WR(Empty, Empty))), WR(Empty, Empty))), Cons(Arrow(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))), Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))), "map_filter", Thk(Empty, Cons(Arrow(Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(IdentDef("OpNat", Sum(Unit, Prim(Nat)))), WR(Empty, Empty))), WR(Empty, Empty))), Cons(Arrow(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))), Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))), "f", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(IdentDef("OpNat", Sum(Unit, Prim(Nat)))), WR(Empty, Empty))), WR(Empty, Empty)))), "l", IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), "sugar_match_unroll", Sum(Unit, Prod(Prim(Nat), Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))))), "c", Prod(Prim(Nat), Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), "let_split_sugar", Prod(Prim(Nat), Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), "h", Prim(Nat)), "t", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))), "t2", IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), "oh2", IdentDef("OpNat", Sum(Unit, Prim(Nat)))), "_u", Unit), dir: Check(Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), term: Ret(Var("t2")), clas: Ok(Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), rule: Ret(Der { ctx: Var(Var(Var(Var(Var(Var(Var(Var(Var(Var(Var(Var(Var(Var(Var(Var(Var(Var(Var(Def(Def(Empty, "List", Type(Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), "OpNat", Type(Sum(Unit, Prim(Nat)))), "nat_is_zero", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Bool)), WR(Empty, Empty))), WR(Empty, Empty)))), "nat_is_odd", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Bool)), WR(Empty, Empty))), WR(Empty, Empty)))), "nat_sub", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Nat)), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))), "nil", Thk(Empty, Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty)))), "cons", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Arrow(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))), Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))), "gen", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), WR(Empty, Empty)))), "map", Thk(Empty, Cons(Arrow(Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Nat)), WR(Empty, Empty))), WR(Empty, Empty))), Cons(Arrow(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))), Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))), "filter", Thk(Empty, Cons(Arrow(Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Bool)), WR(Empty, Empty))), WR(Empty, Empty))), Cons(Arrow(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))), Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))), "map_filter", Thk(Empty, Cons(Arrow(Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(IdentDef("OpNat", Sum(Unit, Prim(Nat)))), WR(Empty, Empty))), WR(Empty, Empty))), Cons(Arrow(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))), Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))), "f", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(IdentDef("OpNat", Sum(Unit, Prim(Nat)))), WR(Empty, Empty))), WR(Empty, Empty)))), "l", IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), "sugar_match_unroll", Sum(Unit, Prod(Prim(Nat), Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))))), "c", Prod(Prim(Nat), Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), "let_split_sugar", Prod(Prim(Nat), Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), "h", Prim(Nat)), "t", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))), "t2", IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), "oh2", IdentDef("OpNat", Sum(Unit, Prim(Nat)))), "_u", Unit), dir: Check(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), term: Var("t2"), clas: Ok(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), rule: Var("t2"), vis: DerVis { tmfam: "Val", local_err: false } }), vis: DerVis { tmfam: "Exp", local_err: false } }, "h2", Der { ctx: Var(Var(Var(Var(Var(Var(Var(Var(Var(Var(Var(Var(Var(Var(Var(Var(Var(Var(Var(Def(Def(Empty, "List", Type(Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), "OpNat", Type(Sum(Unit, Prim(Nat)))), "nat_is_zero", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Bool)), WR(Empty, Empty))), WR(Empty, Empty)))), "nat_is_odd", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Bool)), WR(Empty, Empty))), WR(Empty, Empty)))), "nat_sub", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Nat)), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))), "nil", Thk(Empty, Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty)))), "cons", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Arrow(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))), Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))), "gen", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), WR(Empty, Empty)))), "map", Thk(Empty, Cons(Arrow(Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Nat)), WR(Empty, Empty))), WR(Empty, Empty))), Cons(Arrow(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))), Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))), "filter", Thk(Empty, Cons(Arrow(Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Bool)), WR(Empty, Empty))), WR(Empty, Empty))), Cons(Arrow(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))), Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))), "map_filter", Thk(Empty, Cons(Arrow(Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(IdentDef("OpNat", Sum(Unit, Prim(Nat)))), WR(Empty, Empty))), WR(Empty, Empty))), Cons(Arrow(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))), Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))), "f", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(IdentDef("OpNat", Sum(Unit, Prim(Nat)))), WR(Empty, Empty))), WR(Empty, Empty)))), "l", IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), "sugar_match_unroll", Sum(Unit, Prod(Prim(Nat), Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))))), "c", Prod(Prim(Nat), Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), "let_split_sugar", Prod(Prim(Nat), Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), "h", Prim(Nat)), "t", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))), "t2", IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), "oh2", IdentDef("OpNat", Sum(Unit, Prim(Nat)))), "h2", Prim(Nat)), dir: Synth, term: App(App(Force(Var("cons")), Var("h")), Var("t2")), clas: Ok(Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), rule: App(Der { ctx: Var(Var(Var(Var(Var(Var(Var(Var(Var(Var(Var(Var(Var(Var(Var(Var(Var(Var(Var(Def(Def(Empty, "List", Type(Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), "OpNat", Type(Sum(Unit, Prim(Nat)))), "nat_is_zero", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Bool)), WR(Empty, Empty))), WR(Empty, Empty)))), "nat_is_odd", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Bool)), WR(Empty, Empty))), WR(Empty, Empty)))), "nat_sub", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Nat)), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))), "nil", Thk(Empty, Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty)))), "cons", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Arrow(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))), Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))), "gen", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), WR(Empty, Empty)))), "map", Thk(Empty, Cons(Arrow(Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Nat)), WR(Empty, Empty))), WR(Empty, Empty))), Cons(Arrow(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))), Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))), "filter", Thk(Empty, Cons(Arrow(Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Bool)), WR(Empty, Empty))), WR(Empty, Empty))), Cons(Arrow(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))), Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))), "map_filter", Thk(Empty, Cons(Arrow(Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(IdentDef("OpNat", Sum(Unit, Prim(Nat)))), WR(Empty, Empty))), WR(Empty, Empty))), Cons(Arrow(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))), Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))), "f", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(IdentDef("OpNat", Sum(Unit, Prim(Nat)))), WR(Empty, Empty))), WR(Empty, Empty)))), "l", IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), "sugar_match_unroll", Sum(Unit, Prod(Prim(Nat), Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))))), "c", Prod(Prim(Nat), Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), "let_split_sugar", Prod(Prim(Nat), Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), "h", Prim(Nat)), "t", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))), "t2", IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), "oh2", IdentDef("OpNat", Sum(Unit, Prim(Nat)))), "h2", Prim(Nat)), dir: Synth, term: App(Force(Var("cons")), Var("h")), clas: Ok(Cons(Arrow(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))), Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), WR(Empty, Empty))), rule: App(Der { ctx: Var(Var(Var(Var(Var(Var(Var(Var(Var(Var(Var(Var(Var(Var(Var(Var(Var(Var(Var(Def(Def(Empty, "List", Type(Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), "OpNat", Type(Sum(Unit, Prim(Nat)))), "nat_is_zero", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Bool)), WR(Empty, Empty))), WR(Empty, Empty)))), "nat_is_odd", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Bool)), WR(Empty, Empty))), WR(Empty, Empty)))), "nat_sub", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Nat)), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))), "nil", Thk(Empty, Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty)))), "cons", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Arrow(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))), Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))), "gen", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), WR(Empty, Empty)))), "map", Thk(Empty, Cons(Arrow(Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Nat)), WR(Empty, Empty))), WR(Empty, Empty))), Cons(Arrow(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))), Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))), "filter", Thk(Empty, Cons(Arrow(Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Bool)), WR(Empty, Empty))), WR(Empty, Empty))), Cons(Arrow(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))), Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))), "map_filter", Thk(Empty, Cons(Arrow(Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(IdentDef("OpNat", Sum(Unit, Prim(Nat)))), WR(Empty, Empty))), WR(Empty, Empty))), Cons(Arrow(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))), Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))), "f", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(IdentDef("OpNat", Sum(Unit, Prim(Nat)))), WR(Empty, Empty))), WR(Empty, Empty)))), "l", IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), "sugar_match_unroll", Sum(Unit, Prod(Prim(Nat), Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))))), "c", Prod(Prim(Nat), Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), "let_split_sugar", Prod(Prim(Nat), Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), "h", Prim(Nat)), "t", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))), "t2", IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), "oh2", IdentDef("OpNat", Sum(Unit, Prim(Nat)))), "h2", Prim(Nat)), dir: Synth, term: Force(Var("cons")), clas: Ok(Cons(Arrow(Prim(Nat), Cons(Arrow(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))), Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty))), rule: Force(Der { ctx: Var(Var(Var(Var(Var(Var(Var(Var(Var(Var(Var(Var(Var(Var(Var(Var(Var(Var(Var(Def(Def(Empty, "List", Type(Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), "OpNat", Type(Sum(Unit, Prim(Nat)))), "nat_is_zero", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Bool)), WR(Empty, Empty))), WR(Empty, Empty)))), "nat_is_odd", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Bool)), WR(Empty, Empty))), WR(Empty, Empty)))), "nat_sub", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Nat)), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))), "nil", Thk(Empty, Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty)))), "cons", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Arrow(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))), Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))), "gen", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), WR(Empty, Empty)))), "map", Thk(Empty, Cons(Arrow(Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Nat)), WR(Empty, Empty))), WR(Empty, Empty))), Cons(Arrow(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))), Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))), "filter", Thk(Empty, Cons(Arrow(Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Bool)), WR(Empty, Empty))), WR(Empty, Empty))), Cons(Arrow(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))), Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))), "map_filter", Thk(Empty, Cons(Arrow(Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(IdentDef("OpNat", Sum(Unit, Prim(Nat)))), WR(Empty, Empty))), WR(Empty, Empty))), Cons(Arrow(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))), Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))), "f", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(IdentDef("OpNat", Sum(Unit, Prim(Nat)))), WR(Empty, Empty))), WR(Empty, Empty)))), "l", IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), "sugar_match_unroll", Sum(Unit, Prod(Prim(Nat), Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))))), "c", Prod(Prim(Nat), Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), "let_split_sugar", Prod(Prim(Nat), Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), "h", Prim(Nat)), "t", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))), "t2", IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), "oh2", IdentDef("OpNat", Sum(Unit, Prim(Nat)))), "h2", Prim(Nat)), dir: Synth, term: Var("cons"), clas: Ok(Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Arrow(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))), Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))), rule: Var("cons"), vis: DerVis { tmfam: "Val", local_err: false } }), vis: DerVis { tmfam: "Exp", local_err: false } }, Der { ctx: Var(Var(Var(Var(Var(Var(Var(Var(Var(Var(Var(Var(Var(Var(Var(Var(Var(Var(Var(Def(Def(Empty, "List", Type(Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), "OpNat", Type(Sum(Unit, Prim(Nat)))), "nat_is_zero", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Bool)), WR(Empty, Empty))), WR(Empty, Empty)))), "nat_is_odd", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Bool)), WR(Empty, Empty))), WR(Empty, Empty)))), "nat_sub", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Nat)), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))), "nil", Thk(Empty, Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty)))), "cons", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Arrow(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))), Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))), "gen", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), WR(Empty, Empty)))), "map", Thk(Empty, Cons(Arrow(Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Nat)), WR(Empty, Empty))), WR(Empty, Empty))), Cons(Arrow(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))), Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))), "filter", Thk(Empty, Cons(Arrow(Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Bool)), WR(Empty, Empty))), WR(Empty, Empty))), Cons(Arrow(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))), Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))), "map_filter", Thk(Empty, Cons(Arrow(Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(IdentDef("OpNat", Sum(Unit, Prim(Nat)))), WR(Empty, Empty))), WR(Empty, Empty))), Cons(Arrow(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))), Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))), "f", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(IdentDef("OpNat", Sum(Unit, Prim(Nat)))), WR(Empty, Empty))), WR(Empty, Empty)))), "l", IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), "sugar_match_unroll", Sum(Unit, Prod(Prim(Nat), Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))))), "c", Prod(Prim(Nat), Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), "let_split_sugar", Prod(Prim(Nat), Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), "h", Prim(Nat)), "t", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))), "t2", IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), "oh2", IdentDef("OpNat", Sum(Unit, Prim(Nat)))), "h2", Prim(Nat)), dir: Check(Prim(Nat)), term: Var("h"), clas: Ok(Prim(Nat)), rule: Var("h"), vis: DerVis { tmfam: "Val", local_err: false } }), vis: DerVis { tmfam: "Exp", local_err: false } }, Der { ctx: Var(Var(Var(Var(Var(Var(Var(Var(Var(Var(Var(Var(Var(Var(Var(Var(Var(Var(Var(Def(Def(Empty, "List", Type(Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), "OpNat", Type(Sum(Unit, Prim(Nat)))), "nat_is_zero", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Bool)), WR(Empty, Empty))), WR(Empty, Empty)))), "nat_is_odd", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Bool)), WR(Empty, Empty))), WR(Empty, Empty)))), "nat_sub", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Nat)), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))), "nil", Thk(Empty, Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty)))), "cons", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Arrow(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))), Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))), "gen", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), WR(Empty, Empty)))), "map", Thk(Empty, Cons(Arrow(Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Nat)), WR(Empty, Empty))), WR(Empty, Empty))), Cons(Arrow(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))), Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))), "filter", Thk(Empty, Cons(Arrow(Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Bool)), WR(Empty, Empty))), WR(Empty, Empty))), Cons(Arrow(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))), Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))), "map_filter", Thk(Empty, Cons(Arrow(Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(IdentDef("OpNat", Sum(Unit, Prim(Nat)))), WR(Empty, Empty))), WR(Empty, Empty))), Cons(Arrow(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))), Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))), "f", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(IdentDef("OpNat", Sum(Unit, Prim(Nat)))), WR(Empty, Empty))), WR(Empty, Empty)))), "l", IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), "sugar_match_unroll", Sum(Unit, Prod(Prim(Nat), Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))))), "c", Prod(Prim(Nat), Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), "let_split_sugar", Prod(Prim(Nat), Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), "h", Prim(Nat)), "t", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))), "t2", IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), "oh2", IdentDef("OpNat", Sum(Unit, Prim(Nat)))), "h2", Prim(Nat)), dir: Check(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), term: Var("t2"), clas: Ok(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), rule: Var("t2"), vis: DerVis { tmfam: "Val", local_err: false } }), vis: DerVis { tmfam: "Exp", local_err: false } }), vis: DerVis { tmfam: "Exp", local_err: false } }), vis: DerVis { tmfam: "Exp", local_err: false } }), vis: DerVis { tmfam: "Exp", local_err: false } }), vis: DerVis { tmfam: "Exp", local_err: false } }), vis: DerVis { tmfam: "Exp", local_err: false } }), vis: DerVis { tmfam: "Exp", local_err: false } }), vis: DerVis { tmfam: "Exp", local_err: false } }), vis: DerVis { tmfam: "Exp", local_err: false } }), vis: DerVis { tmfam: "Exp", local_err: false } }), vis: DerVis { tmfam: "Exp", local_err: false } }), vis: DerVis { tmfam: "Val", local_err: false } }), vis: DerVis { tmfam: "Module", local_err: false } } }), Bind(ItemDer { doc: None, qual: Val, var: "reverse", der: Der { ctx: Var(Var(Var(Var(Var(Var(Var(Var(Var(Def(Def(Empty, "List", Type(Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), "OpNat", Type(Sum(Unit, Prim(Nat)))), "nat_is_zero", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Bool)), WR(Empty, Empty))), WR(Empty, Empty)))), "nat_is_odd", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Bool)), WR(Empty, Empty))), WR(Empty, Empty)))), "nat_sub", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Nat)), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))), "nil", Thk(Empty, Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty)))), "cons", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Arrow(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))), Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))), "gen", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), WR(Empty, Empty)))), "map", Thk(Empty, Cons(Arrow(Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Nat)), WR(Empty, Empty))), WR(Empty, Empty))), Cons(Arrow(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))), Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))), "filter", Thk(Empty, Cons(Arrow(Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Bool)), WR(Empty, Empty))), WR(Empty, Empty))), Cons(Arrow(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))), Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))), "map_filter", Thk(Empty, Cons(Arrow(Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(IdentDef("OpNat", Sum(Unit, Prim(Nat)))), WR(Empty, Empty))), WR(Empty, Empty))), Cons(Arrow(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))), Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))), dir: Synth, term: (), clas: Ok(Type(Thk(Empty, Cons(Arrow(Ident("List"), Cons(Arrow(Ident("List"), Cons(Lift(Ident("List")), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty))))), rule: Fn("reverse", Der { ctx: Var(Var(Var(Var(Var(Var(Var(Var(Var(Def(Def(Empty, "List", Type(Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), "OpNat", Type(Sum(Unit, Prim(Nat)))), "nat_is_zero", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Bool)), WR(Empty, Empty))), WR(Empty, Empty)))), "nat_is_odd", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Bool)), WR(Empty, Empty))), WR(Empty, Empty)))), "nat_sub", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Nat)), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))), "nil", Thk(Empty, Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty)))), "cons", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Arrow(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))), Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))), "gen", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), WR(Empty, Empty)))), "map", Thk(Empty, Cons(Arrow(Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Nat)), WR(Empty, Empty))), WR(Empty, Empty))), Cons(Arrow(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))), Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))), "filter", Thk(Empty, Cons(Arrow(Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Bool)), WR(Empty, Empty))), WR(Empty, Empty))), Cons(Arrow(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))), Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))), "map_filter", Thk(Empty, Cons(Arrow(Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(IdentDef("OpNat", Sum(Unit, Prim(Nat)))), WR(Empty, Empty))), WR(Empty, Empty))), Cons(Arrow(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))), Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))), dir: Check(Thk(Empty, Cons(Arrow(Ident("List"), Cons(Arrow(Ident("List"), Cons(Lift(Ident("List")), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))), term: ThunkAnon(Fix("reverse", Lam("l", Lam("r", Unroll(Var("l"), "sugar_match_unroll", Case(Var("sugar_match_unroll"), "_u", Ret(Var("r")), "c", Let("let_split_sugar", Ret(Var("c")), Split(Var("let_split_sugar"), "h", "t", Let("r2", App(App(Force(Var("cons")), Var("h")), Var("r")), App(App(Force(Var("reverse")), Var("t")), Var("r2"))))))))))), clas: Ok(Thk(Empty, Cons(Arrow(Ident("List"), Cons(Arrow(Ident("List"), Cons(Lift(Ident("List")), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))), rule: ThunkAnon(Der { ctx: Var(Var(Var(Var(Var(Var(Var(Var(Var(Def(Def(Empty, "List", Type(Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), "OpNat", Type(Sum(Unit, Prim(Nat)))), "nat_is_zero", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Bool)), WR(Empty, Empty))), WR(Empty, Empty)))), "nat_is_odd", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Bool)), WR(Empty, Empty))), WR(Empty, Empty)))), "nat_sub", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Nat)), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))), "nil", Thk(Empty, Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty)))), "cons", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Arrow(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))), Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))), "gen", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), WR(Empty, Empty)))), "map", Thk(Empty, Cons(Arrow(Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Nat)), WR(Empty, Empty))), WR(Empty, Empty))), Cons(Arrow(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))), Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))), "filter", Thk(Empty, Cons(Arrow(Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Bool)), WR(Empty, Empty))), WR(Empty, Empty))), Cons(Arrow(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))), Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))), "map_filter", Thk(Empty, Cons(Arrow(Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(IdentDef("OpNat", Sum(Unit, Prim(Nat)))), WR(Empty, Empty))), WR(Empty, Empty))), Cons(Arrow(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))), Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))), dir: Check(Cons(Arrow(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))), Cons(Arrow(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))), Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty))), term: Fix("reverse", Lam("l", Lam("r", Unroll(Var("l"), "sugar_match_unroll", Case(Var("sugar_match_unroll"), "_u", Ret(Var("r")), "c", Let("let_split_sugar", Ret(Var("c")), Split(Var("let_split_sugar"), "h", "t", Let("r2", App(App(Force(Var("cons")), Var("h")), Var("r")), App(App(Force(Var("reverse")), Var("t")), Var("r2")))))))))), clas: Ok(Cons(Arrow(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))), Cons(Arrow(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))), Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty))), rule: Fix("reverse", Der { ctx: Var(Var(Var(Var(Var(Var(Var(Var(Var(Var(Def(Def(Empty, "List", Type(Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), "OpNat", Type(Sum(Unit, Prim(Nat)))), "nat_is_zero", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Bool)), WR(Empty, Empty))), WR(Empty, Empty)))), "nat_is_odd", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Bool)), WR(Empty, Empty))), WR(Empty, Empty)))), "nat_sub", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Nat)), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))), "nil", Thk(Empty, Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty)))), "cons", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Arrow(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))), Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))), "gen", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), WR(Empty, Empty)))), "map", Thk(Empty, Cons(Arrow(Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Nat)), WR(Empty, Empty))), WR(Empty, Empty))), Cons(Arrow(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))), Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))), "filter", Thk(Empty, Cons(Arrow(Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Bool)), WR(Empty, Empty))), WR(Empty, Empty))), Cons(Arrow(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))), Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))), "map_filter", Thk(Empty, Cons(Arrow(Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(IdentDef("OpNat", Sum(Unit, Prim(Nat)))), WR(Empty, Empty))), WR(Empty, Empty))), Cons(Arrow(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))), Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))), "reverse", Thk(Empty, Cons(Arrow(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))), Cons(Arrow(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))), Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))), dir: Check(Cons(Arrow(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))), Cons(Arrow(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))), Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty))), term: Lam("l", Lam("r", Unroll(Var("l"), "sugar_match_unroll", Case(Var("sugar_match_unroll"), "_u", Ret(Var("r")), "c", Let("let_split_sugar", Ret(Var("c")), Split(Var("let_split_sugar"), "h", "t", Let("r2", App(App(Force(Var("cons")), Var("h")), Var("r")), App(App(Force(Var("reverse")), Var("t")), Var("r2"))))))))), clas: Ok(Cons(Arrow(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))), Cons(Arrow(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))), Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty))), rule: Lam("l", Der { ctx: Var(Var(Var(Var(Var(Var(Var(Var(Var(Var(Var(Def(Def(Empty, "List", Type(Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), "OpNat", Type(Sum(Unit, Prim(Nat)))), "nat_is_zero", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Bool)), WR(Empty, Empty))), WR(Empty, Empty)))), "nat_is_odd", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Bool)), WR(Empty, Empty))), WR(Empty, Empty)))), "nat_sub", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Nat)), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))), "nil", Thk(Empty, Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty)))), "cons", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Arrow(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))), Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))), "gen", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), WR(Empty, Empty)))), "map", Thk(Empty, Cons(Arrow(Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Nat)), WR(Empty, Empty))), WR(Empty, Empty))), Cons(Arrow(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))), Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))), "filter", Thk(Empty, Cons(Arrow(Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Bool)), WR(Empty, Empty))), WR(Empty, Empty))), Cons(Arrow(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))), Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))), "map_filter", Thk(Empty, Cons(Arrow(Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(IdentDef("OpNat", Sum(Unit, Prim(Nat)))), WR(Empty, Empty))), WR(Empty, Empty))), Cons(Arrow(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))), Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))), "reverse", Thk(Empty, Cons(Arrow(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))), Cons(Arrow(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))), Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))), "l", IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), dir: Check(Cons(Arrow(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))), Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), WR(Empty, Empty))), term: Lam("r", Unroll(Var("l"), "sugar_match_unroll", Case(Var("sugar_match_unroll"), "_u", Ret(Var("r")), "c", Let("let_split_sugar", Ret(Var("c")), Split(Var("let_split_sugar"), "h", "t", Let("r2", App(App(Force(Var("cons")), Var("h")), Var("r")), App(App(Force(Var("reverse")), Var("t")), Var("r2")))))))), clas: Ok(Cons(Arrow(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))), Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), WR(Empty, Empty))), rule: Lam("r", Der { ctx: Var(Var(Var(Var(Var(Var(Var(Var(Var(Var(Var(Var(Def(Def(Empty, "List", Type(Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), "OpNat", Type(Sum(Unit, Prim(Nat)))), "nat_is_zero", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Bool)), WR(Empty, Empty))), WR(Empty, Empty)))), "nat_is_odd", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Bool)), WR(Empty, Empty))), WR(Empty, Empty)))), "nat_sub", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Nat)), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))), "nil", Thk(Empty, Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty)))), "cons", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Arrow(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))), Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))), "gen", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), WR(Empty, Empty)))), "map", Thk(Empty, Cons(Arrow(Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Nat)), WR(Empty, Empty))), WR(Empty, Empty))), Cons(Arrow(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))), Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))), "filter", Thk(Empty, Cons(Arrow(Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Bool)), WR(Empty, Empty))), WR(Empty, Empty))), Cons(Arrow(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))), Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))), "map_filter", Thk(Empty, Cons(Arrow(Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(IdentDef("OpNat", Sum(Unit, Prim(Nat)))), WR(Empty, Empty))), WR(Empty, Empty))), Cons(Arrow(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))), Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))), "reverse", Thk(Empty, Cons(Arrow(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))), Cons(Arrow(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))), Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))), "l", IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), "r", IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), dir: Check(Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), term: Unroll(Var("l"), "sugar_match_unroll", Case(Var("sugar_match_unroll"), "_u", Ret(Var("r")), "c", Let("let_split_sugar", Ret(Var("c")), Split(Var("let_split_sugar"), "h", "t", Let("r2", App(App(Force(Var("cons")), Var("h")), Var("r")), App(App(Force(Var("reverse")), Var("t")), Var("r2"))))))), clas: Ok(Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), rule: Unroll(Der { ctx: Var(Var(Var(Var(Var(Var(Var(Var(Var(Var(Var(Var(Def(Def(Empty, "List", Type(Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), "OpNat", Type(Sum(Unit, Prim(Nat)))), "nat_is_zero", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Bool)), WR(Empty, Empty))), WR(Empty, Empty)))), "nat_is_odd", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Bool)), WR(Empty, Empty))), WR(Empty, Empty)))), "nat_sub", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Nat)), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))), "nil", Thk(Empty, Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty)))), "cons", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Arrow(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))), Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))), "gen", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), WR(Empty, Empty)))), "map", Thk(Empty, Cons(Arrow(Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Nat)), WR(Empty, Empty))), WR(Empty, Empty))), Cons(Arrow(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))), Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))), "filter", Thk(Empty, Cons(Arrow(Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Bool)), WR(Empty, Empty))), WR(Empty, Empty))), Cons(Arrow(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))), Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))), "map_filter", Thk(Empty, Cons(Arrow(Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(IdentDef("OpNat", Sum(Unit, Prim(Nat)))), WR(Empty, Empty))), WR(Empty, Empty))), Cons(Arrow(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))), Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))), "reverse", Thk(Empty, Cons(Arrow(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))), Cons(Arrow(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))), Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))), "l", IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), "r", IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), dir: Synth, term: Var("l"), clas: Ok(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), rule: Var("l"), vis: DerVis { tmfam: "Val", local_err: false } }, "sugar_match_unroll", Der { ctx: Var(Var(Var(Var(Var(Var(Var(Var(Var(Var(Var(Var(Var(Def(Def(Empty, "List", Type(Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), "OpNat", Type(Sum(Unit, Prim(Nat)))), "nat_is_zero", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Bool)), WR(Empty, Empty))), WR(Empty, Empty)))), "nat_is_odd", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Bool)), WR(Empty, Empty))), WR(Empty, Empty)))), "nat_sub", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Nat)), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))), "nil", Thk(Empty, Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty)))), "cons", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Arrow(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))), Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))), "gen", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), WR(Empty, Empty)))), "map", Thk(Empty, Cons(Arrow(Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Nat)), WR(Empty, Empty))), WR(Empty, Empty))), Cons(Arrow(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))), Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))), "filter", Thk(Empty, Cons(Arrow(Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Bool)), WR(Empty, Empty))), WR(Empty, Empty))), Cons(Arrow(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))), Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))), "map_filter", Thk(Empty, Cons(Arrow(Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(IdentDef("OpNat", Sum(Unit, Prim(Nat)))), WR(Empty, Empty))), WR(Empty, Empty))), Cons(Arrow(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))), Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))), "reverse", Thk(Empty, Cons(Arrow(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))), Cons(Arrow(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))), Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))), "l", IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), "r", IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), "sugar_match_unroll", Sum(Unit, Prod(Prim(Nat), Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))))), dir: Check(Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), term: Case(Var("sugar_match_unroll"), "_u", Ret(Var("r")), "c", Let("let_split_sugar", Ret(Var("c")), Split(Var("let_split_sugar"), "h", "t", Let("r2", App(App(Force(Var("cons")), Var("h")), Var("r")), App(App(Force(Var("reverse")), Var("t")), Var("r2")))))), clas: Ok(Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), rule: Case(Der { ctx: Var(Var(Var(Var(Var(Var(Var(Var(Var(Var(Var(Var(Var(Def(Def(Empty, "List", Type(Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), "OpNat", Type(Sum(Unit, Prim(Nat)))), "nat_is_zero", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Bool)), WR(Empty, Empty))), WR(Empty, Empty)))), "nat_is_odd", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Bool)), WR(Empty, Empty))), WR(Empty, Empty)))), "nat_sub", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Nat)), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))), "nil", Thk(Empty, Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty)))), "cons", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Arrow(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))), Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))), "gen", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), WR(Empty, Empty)))), "map", Thk(Empty, Cons(Arrow(Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Nat)), WR(Empty, Empty))), WR(Empty, Empty))), Cons(Arrow(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))), Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))), "filter", Thk(Empty, Cons(Arrow(Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Bool)), WR(Empty, Empty))), WR(Empty, Empty))), Cons(Arrow(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))), Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))), "map_filter", Thk(Empty, Cons(Arrow(Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(IdentDef("OpNat", Sum(Unit, Prim(Nat)))), WR(Empty, Empty))), WR(Empty, Empty))), Cons(Arrow(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))), Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))), "reverse", Thk(Empty, Cons(Arrow(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))), Cons(Arrow(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))), Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))), "l", IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), "r", IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), "sugar_match_unroll", Sum(Unit, Prod(Prim(Nat), Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))))), dir: Synth, term: Var("sugar_match_unroll"), clas: Ok(Sum(Unit, Prod(Prim(Nat), Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))))), rule: Var("sugar_match_unroll"), vis: DerVis { tmfam: "Val", local_err: false } }, "_u", Der { ctx: Var(Var(Var(Var(Var(Var(Var(Var(Var(Var(Var(Var(Var(Var(Def(Def(Empty, "List", Type(Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), "OpNat", Type(Sum(Unit, Prim(Nat)))), "nat_is_zero", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Bool)), WR(Empty, Empty))), WR(Empty, Empty)))), "nat_is_odd", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Bool)), WR(Empty, Empty))), WR(Empty, Empty)))), "nat_sub", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Nat)), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))), "nil", Thk(Empty, Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty)))), "cons", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Arrow(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))), Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))), "gen", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), WR(Empty, Empty)))), "map", Thk(Empty, Cons(Arrow(Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Nat)), WR(Empty, Empty))), WR(Empty, Empty))), Cons(Arrow(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))), Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))), "filter", Thk(Empty, Cons(Arrow(Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Bool)), WR(Empty, Empty))), WR(Empty, Empty))), Cons(Arrow(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))), Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))), "map_filter", Thk(Empty, Cons(Arrow(Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(IdentDef("OpNat", Sum(Unit, Prim(Nat)))), WR(Empty, Empty))), WR(Empty, Empty))), Cons(Arrow(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))), Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))), "reverse", Thk(Empty, Cons(Arrow(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))), Cons(Arrow(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))), Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))), "l", IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), "r", IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), "sugar_match_unroll", Sum(Unit, Prod(Prim(Nat), Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))))), "_u", Unit), dir: Check(Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), term: Ret(Var("r")), clas: Ok(Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), rule: Ret(Der { ctx: Var(Var(Var(Var(Var(Var(Var(Var(Var(Var(Var(Var(Var(Var(Def(Def(Empty, "List", Type(Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), "OpNat", Type(Sum(Unit, Prim(Nat)))), "nat_is_zero", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Bool)), WR(Empty, Empty))), WR(Empty, Empty)))), "nat_is_odd", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Bool)), WR(Empty, Empty))), WR(Empty, Empty)))), "nat_sub", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Nat)), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))), "nil", Thk(Empty, Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty)))), "cons", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Arrow(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))), Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))), "gen", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), WR(Empty, Empty)))), "map", Thk(Empty, Cons(Arrow(Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Nat)), WR(Empty, Empty))), WR(Empty, Empty))), Cons(Arrow(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))), Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))), "filter", Thk(Empty, Cons(Arrow(Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Bool)), WR(Empty, Empty))), WR(Empty, Empty))), Cons(Arrow(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))), Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))), "map_filter", Thk(Empty, Cons(Arrow(Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(IdentDef("OpNat", Sum(Unit, Prim(Nat)))), WR(Empty, Empty))), WR(Empty, Empty))), Cons(Arrow(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))), Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))), "reverse", Thk(Empty, Cons(Arrow(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))), Cons(Arrow(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))), Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))), "l", IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), "r", IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), "sugar_match_unroll", Sum(Unit, Prod(Prim(Nat), Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))))), "_u", Unit), dir: Check(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), term: Var("r"), clas: Ok(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), rule: Var("r"), vis: DerVis { tmfam: "Val", local_err: false } }), vis: DerVis { tmfam: "Exp", local_err: false } }, "c", Der { ctx: Var(Var(Var(Var(Var(Var(Var(Var(Var(Var(Var(Var(Var(Var(Def(Def(Empty, "List", Type(Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), "OpNat", Type(Sum(Unit, Prim(Nat)))), "nat_is_zero", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Bool)), WR(Empty, Empty))), WR(Empty, Empty)))), "nat_is_odd", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Bool)), WR(Empty, Empty))), WR(Empty, Empty)))), "nat_sub", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Nat)), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))), "nil", Thk(Empty, Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty)))), "cons", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Arrow(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))), Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))), "gen", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), WR(Empty, Empty)))), "map", Thk(Empty, Cons(Arrow(Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Nat)), WR(Empty, Empty))), WR(Empty, Empty))), Cons(Arrow(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))), Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))), "filter", Thk(Empty, Cons(Arrow(Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Bool)), WR(Empty, Empty))), WR(Empty, Empty))), Cons(Arrow(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))), Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))), "map_filter", Thk(Empty, Cons(Arrow(Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(IdentDef("OpNat", Sum(Unit, Prim(Nat)))), WR(Empty, Empty))), WR(Empty, Empty))), Cons(Arrow(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))), Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))), "reverse", Thk(Empty, Cons(Arrow(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))), Cons(Arrow(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))), Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))), "l", IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), "r", IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), "sugar_match_unroll", Sum(Unit, Prod(Prim(Nat), Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))))), "c", Prod(Prim(Nat), Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), dir: Check(Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), term: Let("let_split_sugar", Ret(Var("c")), Split(Var("let_split_sugar"), "h", "t", Let("r2", App(App(Force(Var("cons")), Var("h")), Var("r")), App(App(Force(Var("reverse")), Var("t")), Var("r2"))))), clas: Ok(Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), rule: Let("let_split_sugar", Der { ctx: Var(Var(Var(Var(Var(Var(Var(Var(Var(Var(Var(Var(Var(Var(Def(Def(Empty, "List", Type(Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), "OpNat", Type(Sum(Unit, Prim(Nat)))), "nat_is_zero", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Bool)), WR(Empty, Empty))), WR(Empty, Empty)))), "nat_is_odd", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Bool)), WR(Empty, Empty))), WR(Empty, Empty)))), "nat_sub", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Nat)), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))), "nil", Thk(Empty, Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty)))), "cons", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Arrow(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))), Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))), "gen", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), WR(Empty, Empty)))), "map", Thk(Empty, Cons(Arrow(Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Nat)), WR(Empty, Empty))), WR(Empty, Empty))), Cons(Arrow(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))), Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))), "filter", Thk(Empty, Cons(Arrow(Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Bool)), WR(Empty, Empty))), WR(Empty, Empty))), Cons(Arrow(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))), Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))), "map_filter", Thk(Empty, Cons(Arrow(Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(IdentDef("OpNat", Sum(Unit, Prim(Nat)))), WR(Empty, Empty))), WR(Empty, Empty))), Cons(Arrow(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))), Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))), "reverse", Thk(Empty, Cons(Arrow(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))), Cons(Arrow(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))), Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))), "l", IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), "r", IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), "sugar_match_unroll", Sum(Unit, Prod(Prim(Nat), Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))))), "c", Prod(Prim(Nat), Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), dir: Synth, term: Ret(Var("c")), clas: Ok(Cons(Lift(Prod(Prim(Nat), Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), rule: Ret(Der { ctx: Var(Var(Var(Var(Var(Var(Var(Var(Var(Var(Var(Var(Var(Var(Def(Def(Empty, "List", Type(Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), "OpNat", Type(Sum(Unit, Prim(Nat)))), "nat_is_zero", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Bool)), WR(Empty, Empty))), WR(Empty, Empty)))), "nat_is_odd", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Bool)), WR(Empty, Empty))), WR(Empty, Empty)))), "nat_sub", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Nat)), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))), "nil", Thk(Empty, Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty)))), "cons", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Arrow(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))), Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))), "gen", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), WR(Empty, Empty)))), "map", Thk(Empty, Cons(Arrow(Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Nat)), WR(Empty, Empty))), WR(Empty, Empty))), Cons(Arrow(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))), Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))), "filter", Thk(Empty, Cons(Arrow(Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Bool)), WR(Empty, Empty))), WR(Empty, Empty))), Cons(Arrow(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))), Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))), "map_filter", Thk(Empty, Cons(Arrow(Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(IdentDef("OpNat", Sum(Unit, Prim(Nat)))), WR(Empty, Empty))), WR(Empty, Empty))), Cons(Arrow(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))), Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))), "reverse", Thk(Empty, Cons(Arrow(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))), Cons(Arrow(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))), Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))), "l", IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), "r", IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), "sugar_match_unroll", Sum(Unit, Prod(Prim(Nat), Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))))), "c", Prod(Prim(Nat), Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), dir: Synth, term: Var("c"), clas: Ok(Prod(Prim(Nat), Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), rule: Var("c"), vis: DerVis { tmfam: "Val", local_err: false } }), vis: DerVis { tmfam: "Exp", local_err: false } }, Der { ctx: Var(Var(Var(Var(Var(Var(Var(Var(Var(Var(Var(Var(Var(Var(Var(Def(Def(Empty, "List", Type(Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), "OpNat", Type(Sum(Unit, Prim(Nat)))), "nat_is_zero", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Bool)), WR(Empty, Empty))), WR(Empty, Empty)))), "nat_is_odd", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Bool)), WR(Empty, Empty))), WR(Empty, Empty)))), "nat_sub", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Nat)), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))), "nil", Thk(Empty, Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty)))), "cons", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Arrow(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))), Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))), "gen", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), WR(Empty, Empty)))), "map", Thk(Empty, Cons(Arrow(Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Nat)), WR(Empty, Empty))), WR(Empty, Empty))), Cons(Arrow(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))), Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))), "filter", Thk(Empty, Cons(Arrow(Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Bool)), WR(Empty, Empty))), WR(Empty, Empty))), Cons(Arrow(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))), Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))), "map_filter", Thk(Empty, Cons(Arrow(Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(IdentDef("OpNat", Sum(Unit, Prim(Nat)))), WR(Empty, Empty))), WR(Empty, Empty))), Cons(Arrow(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))), Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))), "reverse", Thk(Empty, Cons(Arrow(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))), Cons(Arrow(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))), Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))), "l", IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), "r", IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), "sugar_match_unroll", Sum(Unit, Prod(Prim(Nat), Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))))), "c", Prod(Prim(Nat), Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), "let_split_sugar", Prod(Prim(Nat), Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), dir: Check(Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), term: Split(Var("let_split_sugar"), "h", "t", Let("r2", App(App(Force(Var("cons")), Var("h")), Var("r")), App(App(Force(Var("reverse")), Var("t")), Var("r2")))), clas: Ok(Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), rule: Split(Der { ctx: Var(Var(Var(Var(Var(Var(Var(Var(Var(Var(Var(Var(Var(Var(Var(Def(Def(Empty, "List", Type(Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), "OpNat", Type(Sum(Unit, Prim(Nat)))), "nat_is_zero", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Bool)), WR(Empty, Empty))), WR(Empty, Empty)))), "nat_is_odd", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Bool)), WR(Empty, Empty))), WR(Empty, Empty)))), "nat_sub", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Nat)), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))), "nil", Thk(Empty, Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty)))), "cons", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Arrow(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))), Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))), "gen", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), WR(Empty, Empty)))), "map", Thk(Empty, Cons(Arrow(Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Nat)), WR(Empty, Empty))), WR(Empty, Empty))), Cons(Arrow(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))), Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))), "filter", Thk(Empty, Cons(Arrow(Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Bool)), WR(Empty, Empty))), WR(Empty, Empty))), Cons(Arrow(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))), Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))), "map_filter", Thk(Empty, Cons(Arrow(Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(IdentDef("OpNat", Sum(Unit, Prim(Nat)))), WR(Empty, Empty))), WR(Empty, Empty))), Cons(Arrow(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))), Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))), "reverse", Thk(Empty, Cons(Arrow(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))), Cons(Arrow(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))), Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))), "l", IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), "r", IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), "sugar_match_unroll", Sum(Unit, Prod(Prim(Nat), Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))))), "c", Prod(Prim(Nat), Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), "let_split_sugar", Prod(Prim(Nat), Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), dir: Synth, term: Var("let_split_sugar"), clas: Ok(Prod(Prim(Nat), Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), rule: Var("let_split_sugar"), vis: DerVis { tmfam: "Val", local_err: false } }, "h", "t", Der { ctx: Var(Var(Var(Var(Var(Var(Var(Var(Var(Var(Var(Var(Var(Var(Var(Var(Var(Def(Def(Empty, "List", Type(Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), "OpNat", Type(Sum(Unit, Prim(Nat)))), "nat_is_zero", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Bool)), WR(Empty, Empty))), WR(Empty, Empty)))), "nat_is_odd", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Bool)), WR(Empty, Empty))), WR(Empty, Empty)))), "nat_sub", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Nat)), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))), "nil", Thk(Empty, Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty)))), "cons", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Arrow(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))), Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))), "gen", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), WR(Empty, Empty)))), "map", Thk(Empty, Cons(Arrow(Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Nat)), WR(Empty, Empty))), WR(Empty, Empty))), Cons(Arrow(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))), Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))), "filter", Thk(Empty, Cons(Arrow(Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Bool)), WR(Empty, Empty))), WR(Empty, Empty))), Cons(Arrow(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))), Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))), "map_filter", Thk(Empty, Cons(Arrow(Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(IdentDef("OpNat", Sum(Unit, Prim(Nat)))), WR(Empty, Empty))), WR(Empty, Empty))), Cons(Arrow(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))), Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))), "reverse", Thk(Empty, Cons(Arrow(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))), Cons(Arrow(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))), Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))), "l", IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), "r", IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), "sugar_match_unroll", Sum(Unit, Prod(Prim(Nat), Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))))), "c", Prod(Prim(Nat), Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), "let_split_sugar", Prod(Prim(Nat), Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), "h", Prim(Nat)), "t", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))), dir: Check(Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), term: Let("r2", App(App(Force(Var("cons")), Var("h")), Var("r")), App(App(Force(Var("reverse")), Var("t")), Var("r2"))), clas: Ok(Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), rule: Let("r2", Der { ctx: Var(Var(Var(Var(Var(Var(Var(Var(Var(Var(Var(Var(Var(Var(Var(Var(Var(Def(Def(Empty, "List", Type(Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), "OpNat", Type(Sum(Unit, Prim(Nat)))), "nat_is_zero", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Bool)), WR(Empty, Empty))), WR(Empty, Empty)))), "nat_is_odd", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Bool)), WR(Empty, Empty))), WR(Empty, Empty)))), "nat_sub", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Nat)), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))), "nil", Thk(Empty, Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty)))), "cons", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Arrow(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))), Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))), "gen", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), WR(Empty, Empty)))), "map", Thk(Empty, Cons(Arrow(Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Nat)), WR(Empty, Empty))), WR(Empty, Empty))), Cons(Arrow(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))), Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))), "filter", Thk(Empty, Cons(Arrow(Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Bool)), WR(Empty, Empty))), WR(Empty, Empty))), Cons(Arrow(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))), Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))), "map_filter", Thk(Empty, Cons(Arrow(Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(IdentDef("OpNat", Sum(Unit, Prim(Nat)))), WR(Empty, Empty))), WR(Empty, Empty))), Cons(Arrow(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))), Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))), "reverse", Thk(Empty, Cons(Arrow(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))), Cons(Arrow(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))), Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))), "l", IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), "r", IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), "sugar_match_unroll", Sum(Unit, Prod(Prim(Nat), Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))))), "c", Prod(Prim(Nat), Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), "let_split_sugar", Prod(Prim(Nat), Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), "h", Prim(Nat)), "t", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))), dir: Synth, term: App(App(Force(Var("cons")), Var("h")), Var("r")), clas: Ok(Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), rule: App(Der { ctx: Var(Var(Var(Var(Var(Var(Var(Var(Var(Var(Var(Var(Var(Var(Var(Var(Var(Def(Def(Empty, "List", Type(Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), "OpNat", Type(Sum(Unit, Prim(Nat)))), "nat_is_zero", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Bool)), WR(Empty, Empty))), WR(Empty, Empty)))), "nat_is_odd", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Bool)), WR(Empty, Empty))), WR(Empty, Empty)))), "nat_sub", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Nat)), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))), "nil", Thk(Empty, Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty)))), "cons", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Arrow(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))), Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))), "gen", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), WR(Empty, Empty)))), "map", Thk(Empty, Cons(Arrow(Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Nat)), WR(Empty, Empty))), WR(Empty, Empty))), Cons(Arrow(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))), Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))), "filter", Thk(Empty, Cons(Arrow(Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Bool)), WR(Empty, Empty))), WR(Empty, Empty))), Cons(Arrow(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))), Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))), "map_filter", Thk(Empty, Cons(Arrow(Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(IdentDef("OpNat", Sum(Unit, Prim(Nat)))), WR(Empty, Empty))), WR(Empty, Empty))), Cons(Arrow(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))), Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))), "reverse", Thk(Empty, Cons(Arrow(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))), Cons(Arrow(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))), Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))), "l", IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), "r", IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), "sugar_match_unroll", Sum(Unit, Prod(Prim(Nat), Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))))), "c", Prod(Prim(Nat), Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), "let_split_sugar", Prod(Prim(Nat), Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), "h", Prim(Nat)), "t", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))), dir: Synth, term: App(Force(Var("cons")), Var("h")), clas: Ok(Cons(Arrow(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))), Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), WR(Empty, Empty))), rule: App(Der { ctx: Var(Var(Var(Var(Var(Var(Var(Var(Var(Var(Var(Var(Var(Var(Var(Var(Var(Def(Def(Empty, "List", Type(Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), "OpNat", Type(Sum(Unit, Prim(Nat)))), "nat_is_zero", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Bool)), WR(Empty, Empty))), WR(Empty, Empty)))), "nat_is_odd", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Bool)), WR(Empty, Empty))), WR(Empty, Empty)))), "nat_sub", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Nat)), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))), "nil", Thk(Empty, Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty)))), "cons", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Arrow(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))), Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))), "gen", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), WR(Empty, Empty)))), "map", Thk(Empty, Cons(Arrow(Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Nat)), WR(Empty, Empty))), WR(Empty, Empty))), Cons(Arrow(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))), Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))), "filter", Thk(Empty, Cons(Arrow(Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Bool)), WR(Empty, Empty))), WR(Empty, Empty))), Cons(Arrow(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))), Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))), "map_filter", Thk(Empty, Cons(Arrow(Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(IdentDef("OpNat", Sum(Unit, Prim(Nat)))), WR(Empty, Empty))), WR(Empty, Empty))), Cons(Arrow(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))), Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))), "reverse", Thk(Empty, Cons(Arrow(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))), Cons(Arrow(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))), Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))), "l", IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), "r", IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), "sugar_match_unroll", Sum(Unit, Prod(Prim(Nat), Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))))), "c", Prod(Prim(Nat), Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), "let_split_sugar", Prod(Prim(Nat), Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), "h", Prim(Nat)), "t", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))), dir: Synth, term: Force(Var("cons")), clas: Ok(Cons(Arrow(Prim(Nat), Cons(Arrow(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))), Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty))), rule: Force(Der { ctx: Var(Var(Var(Var(Var(Var(Var(Var(Var(Var(Var(Var(Var(Var(Var(Var(Var(Def(Def(Empty, "List", Type(Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), "OpNat", Type(Sum(Unit, Prim(Nat)))), "nat_is_zero", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Bool)), WR(Empty, Empty))), WR(Empty, Empty)))), "nat_is_odd", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Bool)), WR(Empty, Empty))), WR(Empty, Empty)))), "nat_sub", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Nat)), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))), "nil", Thk(Empty, Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty)))), "cons", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Arrow(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))), Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))), "gen", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), WR(Empty, Empty)))), "map", Thk(Empty, Cons(Arrow(Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Nat)), WR(Empty, Empty))), WR(Empty, Empty))), Cons(Arrow(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))), Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))), "filter", Thk(Empty, Cons(Arrow(Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Bool)), WR(Empty, Empty))), WR(Empty, Empty))), Cons(Arrow(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))), Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))), "map_filter", Thk(Empty, Cons(Arrow(Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(IdentDef("OpNat", Sum(Unit, Prim(Nat)))), WR(Empty, Empty))), WR(Empty, Empty))), Cons(Arrow(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))), Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))), "reverse", Thk(Empty, Cons(Arrow(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))), Cons(Arrow(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))), Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))), "l", IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), "r", IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), "sugar_match_unroll", Sum(Unit, Prod(Prim(Nat), Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))))), "c", Prod(Prim(Nat), Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), "let_split_sugar", Prod(Prim(Nat), Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), "h", Prim(Nat)), "t", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))), dir: Synth, term: Var("cons"), clas: Ok(Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Arrow(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))), Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))), rule: Var("cons"), vis: DerVis { tmfam: "Val", local_err: false } }), vis: DerVis { tmfam: "Exp", local_err: false } }, Der { ctx: Var(Var(Var(Var(Var(Var(Var(Var(Var(Var(Var(Var(Var(Var(Var(Var(Var(Def(Def(Empty, "List", Type(Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), "OpNat", Type(Sum(Unit, Prim(Nat)))), "nat_is_zero", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Bool)), WR(Empty, Empty))), WR(Empty, Empty)))), "nat_is_odd", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Bool)), WR(Empty, Empty))), WR(Empty, Empty)))), "nat_sub", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Nat)), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))), "nil", Thk(Empty, Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty)))), "cons", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Arrow(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))), Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))), "gen", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), WR(Empty, Empty)))), "map", Thk(Empty, Cons(Arrow(Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Nat)), WR(Empty, Empty))), WR(Empty, Empty))), Cons(Arrow(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))), Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))), "filter", Thk(Empty, Cons(Arrow(Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Bool)), WR(Empty, Empty))), WR(Empty, Empty))), Cons(Arrow(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))), Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))), "map_filter", Thk(Empty, Cons(Arrow(Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(IdentDef("OpNat", Sum(Unit, Prim(Nat)))), WR(Empty, Empty))), WR(Empty, Empty))), Cons(Arrow(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))), Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))), "reverse", Thk(Empty, Cons(Arrow(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))), Cons(Arrow(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))), Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))), "l", IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), "r", IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), "sugar_match_unroll", Sum(Unit, Prod(Prim(Nat), Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))))), "c", Prod(Prim(Nat), Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), "let_split_sugar", Prod(Prim(Nat), Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), "h", Prim(Nat)), "t", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))), dir: Check(Prim(Nat)), term: Var("h"), clas: Ok(Prim(Nat)), rule: Var("h"), vis: DerVis { tmfam: "Val", local_err: false } }), vis: DerVis { tmfam: "Exp", local_err: false } }, Der { ctx: Var(Var(Var(Var(Var(Var(Var(Var(Var(Var(Var(Var(Var(Var(Var(Var(Var(Def(Def(Empty, "List", Type(Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), "OpNat", Type(Sum(Unit, Prim(Nat)))), "nat_is_zero", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Bool)), WR(Empty, Empty))), WR(Empty, Empty)))), "nat_is_odd", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Bool)), WR(Empty, Empty))), WR(Empty, Empty)))), "nat_sub", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Nat)), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))), "nil", Thk(Empty, Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty)))), "cons", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Arrow(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))), Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))), "gen", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), WR(Empty, Empty)))), "map", Thk(Empty, Cons(Arrow(Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Nat)), WR(Empty, Empty))), WR(Empty, Empty))), Cons(Arrow(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))), Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))), "filter", Thk(Empty, Cons(Arrow(Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Bool)), WR(Empty, Empty))), WR(Empty, Empty))), Cons(Arrow(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))), Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))), "map_filter", Thk(Empty, Cons(Arrow(Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(IdentDef("OpNat", Sum(Unit, Prim(Nat)))), WR(Empty, Empty))), WR(Empty, Empty))), Cons(Arrow(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))), Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))), "reverse", Thk(Empty, Cons(Arrow(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))), Cons(Arrow(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))), Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))), "l", IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), "r", IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), "sugar_match_unroll", Sum(Unit, Prod(Prim(Nat), Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))))), "c", Prod(Prim(Nat), Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), "let_split_sugar", Prod(Prim(Nat), Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), "h", Prim(Nat)), "t", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))), dir: Check(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), term: Var("r"), clas: Ok(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), rule: Var("r"), vis: DerVis { tmfam: "Val", local_err: false } }), vis: DerVis { tmfam: "Exp", local_err: false } }, Der { ctx: Var(Var(Var(Var(Var(Var(Var(Var(Var(Var(Var(Var(Var(Var(Var(Var(Var(Var(Def(Def(Empty, "List", Type(Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), "OpNat", Type(Sum(Unit, Prim(Nat)))), "nat_is_zero", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Bool)), WR(Empty, Empty))), WR(Empty, Empty)))), "nat_is_odd", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Bool)), WR(Empty, Empty))), WR(Empty, Empty)))), "nat_sub", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Nat)), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))), "nil", Thk(Empty, Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty)))), "cons", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Arrow(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))), Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))), "gen", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), WR(Empty, Empty)))), "map", Thk(Empty, Cons(Arrow(Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Nat)), WR(Empty, Empty))), WR(Empty, Empty))), Cons(Arrow(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))), Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))), "filter", Thk(Empty, Cons(Arrow(Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Bool)), WR(Empty, Empty))), WR(Empty, Empty))), Cons(Arrow(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))), Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))), "map_filter", Thk(Empty, Cons(Arrow(Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(IdentDef("OpNat", Sum(Unit, Prim(Nat)))), WR(Empty, Empty))), WR(Empty, Empty))), Cons(Arrow(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))), Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))), "reverse", Thk(Empty, Cons(Arrow(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))), Cons(Arrow(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))), Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))), "l", IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), "r", IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), "sugar_match_unroll", Sum(Unit, Prod(Prim(Nat), Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))))), "c", Prod(Prim(Nat), Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), "let_split_sugar", Prod(Prim(Nat), Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), "h", Prim(Nat)), "t", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))), "r2", IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), dir: Synth, term: App(App(Force(Var("reverse")), Var("t")), Var("r2")), clas: Ok(Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), rule: App(Der { ctx: Var(Var(Var(Var(Var(Var(Var(Var(Var(Var(Var(Var(Var(Var(Var(Var(Var(Var(Def(Def(Empty, "List", Type(Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), "OpNat", Type(Sum(Unit, Prim(Nat)))), "nat_is_zero", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Bool)), WR(Empty, Empty))), WR(Empty, Empty)))), "nat_is_odd", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Bool)), WR(Empty, Empty))), WR(Empty, Empty)))), "nat_sub", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Nat)), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))), "nil", Thk(Empty, Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty)))), "cons", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Arrow(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))), Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))), "gen", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), WR(Empty, Empty)))), "map", Thk(Empty, Cons(Arrow(Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Nat)), WR(Empty, Empty))), WR(Empty, Empty))), Cons(Arrow(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))), Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))), "filter", Thk(Empty, Cons(Arrow(Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Bool)), WR(Empty, Empty))), WR(Empty, Empty))), Cons(Arrow(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))), Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))), "map_filter", Thk(Empty, Cons(Arrow(Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(IdentDef("OpNat", Sum(Unit, Prim(Nat)))), WR(Empty, Empty))), WR(Empty, Empty))), Cons(Arrow(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))), Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))), "reverse", Thk(Empty, Cons(Arrow(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))), Cons(Arrow(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))), Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))), "l", IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), "r", IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), "sugar_match_unroll", Sum(Unit, Prod(Prim(Nat), Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))))), "c", Prod(Prim(Nat), Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), "let_split_sugar", Prod(Prim(Nat), Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), "h", Prim(Nat)), "t", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))), "r2", IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), dir: Synth, term: App(Force(Var("reverse")), Var("t")), clas: Ok(Cons(Arrow(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))), Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), WR(Empty, Empty))), rule: App(Der { ctx: Var(Var(Var(Var(Var(Var(Var(Var(Var(Var(Var(Var(Var(Var(Var(Var(Var(Var(Def(Def(Empty, "List", Type(Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), "OpNat", Type(Sum(Unit, Prim(Nat)))), "nat_is_zero", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Bool)), WR(Empty, Empty))), WR(Empty, Empty)))), "nat_is_odd", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Bool)), WR(Empty, Empty))), WR(Empty, Empty)))), "nat_sub", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Nat)), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))), "nil", Thk(Empty, Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty)))), "cons", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Arrow(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))), Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))), "gen", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), WR(Empty, Empty)))), "map", Thk(Empty, Cons(Arrow(Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Nat)), WR(Empty, Empty))), WR(Empty, Empty))), Cons(Arrow(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))), Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))), "filter", Thk(Empty, Cons(Arrow(Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Bool)), WR(Empty, Empty))), WR(Empty, Empty))), Cons(Arrow(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))), Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))), "map_filter", Thk(Empty, Cons(Arrow(Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(IdentDef("OpNat", Sum(Unit, Prim(Nat)))), WR(Empty, Empty))), WR(Empty, Empty))), Cons(Arrow(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))), Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))), "reverse", Thk(Empty, Cons(Arrow(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))), Cons(Arrow(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))), Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))), "l", IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), "r", IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), "sugar_match_unroll", Sum(Unit, Prod(Prim(Nat), Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))))), "c", Prod(Prim(Nat), Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), "let_split_sugar", Prod(Prim(Nat), Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), "h", Prim(Nat)), "t", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))), "r2", IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), dir: Synth, term: Force(Var("reverse")), clas: Ok(Cons(Arrow(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))), Cons(Arrow(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))), Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty))), rule: Force(Der { ctx: Var(Var(Var(Var(Var(Var(Var(Var(Var(Var(Var(Var(Var(Var(Var(Var(Var(Var(Def(Def(Empty, "List", Type(Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), "OpNat", Type(Sum(Unit, Prim(Nat)))), "nat_is_zero", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Bool)), WR(Empty, Empty))), WR(Empty, Empty)))), "nat_is_odd", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Bool)), WR(Empty, Empty))), WR(Empty, Empty)))), "nat_sub", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Nat)), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))), "nil", Thk(Empty, Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty)))), "cons", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Arrow(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))), Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))), "gen", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), WR(Empty, Empty)))), "map", Thk(Empty, Cons(Arrow(Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Nat)), WR(Empty, Empty))), WR(Empty, Empty))), Cons(Arrow(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))), Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))), "filter", Thk(Empty, Cons(Arrow(Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Bool)), WR(Empty, Empty))), WR(Empty, Empty))), Cons(Arrow(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))), Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))), "map_filter", Thk(Empty, Cons(Arrow(Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(IdentDef("OpNat", Sum(Unit, Prim(Nat)))), WR(Empty, Empty))), WR(Empty, Empty))), Cons(Arrow(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))), Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))), "reverse", Thk(Empty, Cons(Arrow(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))), Cons(Arrow(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))), Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))), "l", IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), "r", IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), "sugar_match_unroll", Sum(Unit, Prod(Prim(Nat), Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))))), "c", Prod(Prim(Nat), Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), "let_split_sugar", Prod(Prim(Nat), Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), "h", Prim(Nat)), "t", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))), "r2", IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), dir: Synth, term: Var("reverse"), clas: Ok(Thk(Empty, Cons(Arrow(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))), Cons(Arrow(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))), Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))), rule: Var("reverse"), vis: DerVis { tmfam: "Val", local_err: false } }), vis: DerVis { tmfam: "Exp", local_err: false } }, Der { ctx: Var(Var(Var(Var(Var(Var(Var(Var(Var(Var(Var(Var(Var(Var(Var(Var(Var(Var(Def(Def(Empty, "List", Type(Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), "OpNat", Type(Sum(Unit, Prim(Nat)))), "nat_is_zero", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Bool)), WR(Empty, Empty))), WR(Empty, Empty)))), "nat_is_odd", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Bool)), WR(Empty, Empty))), WR(Empty, Empty)))), "nat_sub", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Nat)), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))), "nil", Thk(Empty, Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty)))), "cons", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Arrow(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))), Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))), "gen", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), WR(Empty, Empty)))), "map", Thk(Empty, Cons(Arrow(Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Nat)), WR(Empty, Empty))), WR(Empty, Empty))), Cons(Arrow(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))), Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))), "filter", Thk(Empty, Cons(Arrow(Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Bool)), WR(Empty, Empty))), WR(Empty, Empty))), Cons(Arrow(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))), Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))), "map_filter", Thk(Empty, Cons(Arrow(Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(IdentDef("OpNat", Sum(Unit, Prim(Nat)))), WR(Empty, Empty))), WR(Empty, Empty))), Cons(Arrow(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))), Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))), "reverse", Thk(Empty, Cons(Arrow(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))), Cons(Arrow(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))), Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))), "l", IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), "r", IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), "sugar_match_unroll", Sum(Unit, Prod(Prim(Nat), Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))))), "c", Prod(Prim(Nat), Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), "let_split_sugar", Prod(Prim(Nat), Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), "h", Prim(Nat)), "t", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))), "r2", IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), dir: Check(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), term: Var("t"), clas: Ok(Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))), rule: Var("t"), vis: DerVis { tmfam: "Val", local_err: false } }), vis: DerVis { tmfam: "Exp", local_err: false } }, Der { ctx: Var(Var(Var(Var(Var(Var(Var(Var(Var(Var(Var(Var(Var(Var(Var(Var(Var(Var(Def(Def(Empty, "List", Type(Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), "OpNat", Type(Sum(Unit, Prim(Nat)))), "nat_is_zero", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Bool)), WR(Empty, Empty))), WR(Empty, Empty)))), "nat_is_odd", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Bool)), WR(Empty, Empty))), WR(Empty, Empty)))), "nat_sub", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Nat)), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))), "nil", Thk(Empty, Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty)))), "cons", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Arrow(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))), Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))), "gen", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), WR(Empty, Empty)))), "map", Thk(Empty, Cons(Arrow(Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Nat)), WR(Empty, Empty))), WR(Empty, Empty))), Cons(Arrow(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))), Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))), "filter", Thk(Empty, Cons(Arrow(Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Bool)), WR(Empty, Empty))), WR(Empty, Empty))), Cons(Arrow(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))), Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))), "map_filter", Thk(Empty, Cons(Arrow(Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(IdentDef("OpNat", Sum(Unit, Prim(Nat)))), WR(Empty, Empty))), WR(Empty, Empty))), Cons(Arrow(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))), Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))), "reverse", Thk(Empty, Cons(Arrow(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))), Cons(Arrow(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))), Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))), "l", IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), "r", IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), "sugar_match_unroll", Sum(Unit, Prod(Prim(Nat), Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))))), "c", Prod(Prim(Nat), Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), "let_split_sugar", Prod(Prim(Nat), Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), "h", Prim(Nat)), "t", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))), "r2", IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), dir: Check(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), term: Var("r2"), clas: Ok(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), rule: Var("r2"), vis: DerVis { tmfam: "Val", local_err: false } }), vis: DerVis { tmfam: "Exp", local_err: false } }), vis: DerVis { tmfam: "Exp", local_err: false } }), vis: DerVis { tmfam: "Exp", local_err: false } }), vis: DerVis { tmfam: "Exp", local_err: false } }), vis: DerVis { tmfam: "Exp", local_err: false } }), vis: DerVis { tmfam: "Exp", local_err: false } }), vis: DerVis { tmfam: "Exp", local_err: false } }), vis: DerVis { tmfam: "Exp", local_err: false } }), vis: DerVis { tmfam: "Exp", local_err: false } }), vis: DerVis { tmfam: "Val", local_err: false } }), vis: DerVis { tmfam: "Module", local_err: false } } }), Bind(ItemDer { doc: None, qual: Val, var: "fold", der: Der { ctx: Var(Var(Var(Var(Var(Var(Var(Var(Var(Var(Def(Def(Empty, "List", Type(Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), "OpNat", Type(Sum(Unit, Prim(Nat)))), "nat_is_zero", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Bool)), WR(Empty, Empty))), WR(Empty, Empty)))), "nat_is_odd", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Bool)), WR(Empty, Empty))), WR(Empty, Empty)))), "nat_sub", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Nat)), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))), "nil", Thk(Empty, Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty)))), "cons", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Arrow(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))), Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))), "gen", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), WR(Empty, Empty)))), "map", Thk(Empty, Cons(Arrow(Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Nat)), WR(Empty, Empty))), WR(Empty, Empty))), Cons(Arrow(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))), Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))), "filter", Thk(Empty, Cons(Arrow(Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Bool)), WR(Empty, Empty))), WR(Empty, Empty))), Cons(Arrow(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))), Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))), "map_filter", Thk(Empty, Cons(Arrow(Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(IdentDef("OpNat", Sum(Unit, Prim(Nat)))), WR(Empty, Empty))), WR(Empty, Empty))), Cons(Arrow(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))), Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))), "reverse", Thk(Empty, Cons(Arrow(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))), Cons(Arrow(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))), Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))), dir: Synth, term: (), clas: Ok(Type(Thk(Empty, Cons(Arrow(Ident("List"), Cons(Arrow(Ident("Nat"), Cons(Arrow(Thk(Empty, Cons(Arrow(Ident("Nat"), Cons(Arrow(Ident("Nat"), Cons(Lift(Ident("Nat")), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty))), Cons(Lift(Ident("Nat")), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty))))), rule: Fn("fold", Der { ctx: Var(Var(Var(Var(Var(Var(Var(Var(Var(Var(Def(Def(Empty, "List", Type(Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), "OpNat", Type(Sum(Unit, Prim(Nat)))), "nat_is_zero", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Bool)), WR(Empty, Empty))), WR(Empty, Empty)))), "nat_is_odd", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Bool)), WR(Empty, Empty))), WR(Empty, Empty)))), "nat_sub", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Nat)), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))), "nil", Thk(Empty, Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty)))), "cons", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Arrow(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))), Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))), "gen", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), WR(Empty, Empty)))), "map", Thk(Empty, Cons(Arrow(Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Nat)), WR(Empty, Empty))), WR(Empty, Empty))), Cons(Arrow(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))), Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))), "filter", Thk(Empty, Cons(Arrow(Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Bool)), WR(Empty, Empty))), WR(Empty, Empty))), Cons(Arrow(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))), Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))), "map_filter", Thk(Empty, Cons(Arrow(Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(IdentDef("OpNat", Sum(Unit, Prim(Nat)))), WR(Empty, Empty))), WR(Empty, Empty))), Cons(Arrow(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))), Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))), "reverse", Thk(Empty, Cons(Arrow(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))), Cons(Arrow(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))), Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))), dir: Check(Thk(Empty, Cons(Arrow(Ident("List"), Cons(Arrow(Ident("Nat"), Cons(Arrow(Thk(Empty, Cons(Arrow(Ident("Nat"), Cons(Arrow(Ident("Nat"), Cons(Lift(Ident("Nat")), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty))), Cons(Lift(Ident("Nat")), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))), term: ThunkAnon(Fix("fold", Lam("l", Lam("a", Lam("f", Unroll(Var("l"), "sugar_match_unroll", Case(Var("sugar_match_unroll"), "_u", Ret(Var("a")), "c", Let("let_split_sugar", Ret(Var("c")), Split(Var("let_split_sugar"), "h", "t", Let("a2", App(App(Force(Var("f")), Var("a")), Var("h")), App(App(App(Force(Var("fold")), Var("t")), Var("a2")), Var("f")))))))))))), clas: Ok(Thk(Empty, Cons(Arrow(Ident("List"), Cons(Arrow(Ident("Nat"), Cons(Arrow(Thk(Empty, Cons(Arrow(Ident("Nat"), Cons(Arrow(Ident("Nat"), Cons(Lift(Ident("Nat")), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty))), Cons(Lift(Ident("Nat")), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))), rule: ThunkAnon(Der { ctx: Var(Var(Var(Var(Var(Var(Var(Var(Var(Var(Def(Def(Empty, "List", Type(Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), "OpNat", Type(Sum(Unit, Prim(Nat)))), "nat_is_zero", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Bool)), WR(Empty, Empty))), WR(Empty, Empty)))), "nat_is_odd", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Bool)), WR(Empty, Empty))), WR(Empty, Empty)))), "nat_sub", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Nat)), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))), "nil", Thk(Empty, Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty)))), "cons", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Arrow(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))), Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))), "gen", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), WR(Empty, Empty)))), "map", Thk(Empty, Cons(Arrow(Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Nat)), WR(Empty, Empty))), WR(Empty, Empty))), Cons(Arrow(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))), Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))), "filter", Thk(Empty, Cons(Arrow(Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Bool)), WR(Empty, Empty))), WR(Empty, Empty))), Cons(Arrow(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))), Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))), "map_filter", Thk(Empty, Cons(Arrow(Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(IdentDef("OpNat", Sum(Unit, Prim(Nat)))), WR(Empty, Empty))), WR(Empty, Empty))), Cons(Arrow(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))), Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))), "reverse", Thk(Empty, Cons(Arrow(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))), Cons(Arrow(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))), Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))), dir: Check(Cons(Arrow(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))), Cons(Arrow(Prim(Nat), Cons(Arrow(Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Nat)), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty))), Cons(Lift(Prim(Nat)), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty))), term: Fix("fold", Lam("l", Lam("a", Lam("f", Unroll(Var("l"), "sugar_match_unroll", Case(Var("sugar_match_unroll"), "_u", Ret(Var("a")), "c", Let("let_split_sugar", Ret(Var("c")), Split(Var("let_split_sugar"), "h", "t", Let("a2", App(App(Force(Var("f")), Var("a")), Var("h")), App(App(App(Force(Var("fold")), Var("t")), Var("a2")), Var("f"))))))))))), clas: Ok(Cons(Arrow(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))), Cons(Arrow(Prim(Nat), Cons(Arrow(Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Nat)), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty))), Cons(Lift(Prim(Nat)), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty))), rule: Fix("fold", Der { ctx: Var(Var(Var(Var(Var(Var(Var(Var(Var(Var(Var(Def(Def(Empty, "List", Type(Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), "OpNat", Type(Sum(Unit, Prim(Nat)))), "nat_is_zero", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Bool)), WR(Empty, Empty))), WR(Empty, Empty)))), "nat_is_odd", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Bool)), WR(Empty, Empty))), WR(Empty, Empty)))), "nat_sub", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Nat)), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))), "nil", Thk(Empty, Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty)))), "cons", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Arrow(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))), Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))), "gen", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), WR(Empty, Empty)))), "map", Thk(Empty, Cons(Arrow(Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Nat)), WR(Empty, Empty))), WR(Empty, Empty))), Cons(Arrow(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))), Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))), "filter", Thk(Empty, Cons(Arrow(Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Bool)), WR(Empty, Empty))), WR(Empty, Empty))), Cons(Arrow(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))), Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))), "map_filter", Thk(Empty, Cons(Arrow(Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(IdentDef("OpNat", Sum(Unit, Prim(Nat)))), WR(Empty, Empty))), WR(Empty, Empty))), Cons(Arrow(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))), Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))), "reverse", Thk(Empty, Cons(Arrow(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))), Cons(Arrow(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))), Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))), "fold", Thk(Empty, Cons(Arrow(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))), Cons(Arrow(Prim(Nat), Cons(Arrow(Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Nat)), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty))), Cons(Lift(Prim(Nat)), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))), dir: Check(Cons(Arrow(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))), Cons(Arrow(Prim(Nat), Cons(Arrow(Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Nat)), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty))), Cons(Lift(Prim(Nat)), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty))), term: Lam("l", Lam("a", Lam("f", Unroll(Var("l"), "sugar_match_unroll", Case(Var("sugar_match_unroll"), "_u", Ret(Var("a")), "c", Let("let_split_sugar", Ret(Var("c")), Split(Var("let_split_sugar"), "h", "t", Let("a2", App(App(Force(Var("f")), Var("a")), Var("h")), App(App(App(Force(Var("fold")), Var("t")), Var("a2")), Var("f")))))))))), clas: Ok(Cons(Arrow(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))), Cons(Arrow(Prim(Nat), Cons(Arrow(Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Nat)), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty))), Cons(Lift(Prim(Nat)), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty))), rule: Lam("l", Der { ctx: Var(Var(Var(Var(Var(Var(Var(Var(Var(Var(Var(Var(Def(Def(Empty, "List", Type(Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), "OpNat", Type(Sum(Unit, Prim(Nat)))), "nat_is_zero", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Bool)), WR(Empty, Empty))), WR(Empty, Empty)))), "nat_is_odd", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Bool)), WR(Empty, Empty))), WR(Empty, Empty)))), "nat_sub", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Nat)), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))), "nil", Thk(Empty, Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty)))), "cons", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Arrow(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))), Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))), "gen", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), WR(Empty, Empty)))), "map", Thk(Empty, Cons(Arrow(Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Nat)), WR(Empty, Empty))), WR(Empty, Empty))), Cons(Arrow(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))), Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))), "filter", Thk(Empty, Cons(Arrow(Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Bool)), WR(Empty, Empty))), WR(Empty, Empty))), Cons(Arrow(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))), Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))), "map_filter", Thk(Empty, Cons(Arrow(Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(IdentDef("OpNat", Sum(Unit, Prim(Nat)))), WR(Empty, Empty))), WR(Empty, Empty))), Cons(Arrow(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))), Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))), "reverse", Thk(Empty, Cons(Arrow(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))), Cons(Arrow(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))), Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))), "fold", Thk(Empty, Cons(Arrow(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))), Cons(Arrow(Prim(Nat), Cons(Arrow(Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Nat)), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty))), Cons(Lift(Prim(Nat)), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))), "l", IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), dir: Check(Cons(Arrow(Prim(Nat), Cons(Arrow(Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Nat)), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty))), Cons(Lift(Prim(Nat)), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty))), term: Lam("a", Lam("f", Unroll(Var("l"), "sugar_match_unroll", Case(Var("sugar_match_unroll"), "_u", Ret(Var("a")), "c", Let("let_split_sugar", Ret(Var("c")), Split(Var("let_split_sugar"), "h", "t", Let("a2", App(App(Force(Var("f")), Var("a")), Var("h")), App(App(App(Force(Var("fold")), Var("t")), Var("a2")), Var("f"))))))))), clas: Ok(Cons(Arrow(Prim(Nat), Cons(Arrow(Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Nat)), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty))), Cons(Lift(Prim(Nat)), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty))), rule: Lam("a", Der { ctx: Var(Var(Var(Var(Var(Var(Var(Var(Var(Var(Var(Var(Var(Def(Def(Empty, "List", Type(Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), "OpNat", Type(Sum(Unit, Prim(Nat)))), "nat_is_zero", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Bool)), WR(Empty, Empty))), WR(Empty, Empty)))), "nat_is_odd", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Bool)), WR(Empty, Empty))), WR(Empty, Empty)))), "nat_sub", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Nat)), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))), "nil", Thk(Empty, Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty)))), "cons", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Arrow(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))), Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))), "gen", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), WR(Empty, Empty)))), "map", Thk(Empty, Cons(Arrow(Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Nat)), WR(Empty, Empty))), WR(Empty, Empty))), Cons(Arrow(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))), Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))), "filter", Thk(Empty, Cons(Arrow(Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Bool)), WR(Empty, Empty))), WR(Empty, Empty))), Cons(Arrow(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))), Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))), "map_filter", Thk(Empty, Cons(Arrow(Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(IdentDef("OpNat", Sum(Unit, Prim(Nat)))), WR(Empty, Empty))), WR(Empty, Empty))), Cons(Arrow(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))), Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))), "reverse", Thk(Empty, Cons(Arrow(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))), Cons(Arrow(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))), Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))), "fold", Thk(Empty, Cons(Arrow(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))), Cons(Arrow(Prim(Nat), Cons(Arrow(Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Nat)), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty))), Cons(Lift(Prim(Nat)), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))), "l", IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), "a", Prim(Nat)), dir: Check(Cons(Arrow(Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Nat)), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty))), Cons(Lift(Prim(Nat)), WR(Empty, Empty))), WR(Empty, Empty))), term: Lam("f", Unroll(Var("l"), "sugar_match_unroll", Case(Var("sugar_match_unroll"), "_u", Ret(Var("a")), "c", Let("let_split_sugar", Ret(Var("c")), Split(Var("let_split_sugar"), "h", "t", Let("a2", App(App(Force(Var("f")), Var("a")), Var("h")), App(App(App(Force(Var("fold")), Var("t")), Var("a2")), Var("f")))))))), clas: Ok(Cons(Arrow(Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Nat)), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty))), Cons(Lift(Prim(Nat)), WR(Empty, Empty))), WR(Empty, Empty))), rule: Lam("f", Der { ctx: Var(Var(Var(Var(Var(Var(Var(Var(Var(Var(Var(Var(Var(Var(Def(Def(Empty, "List", Type(Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), "OpNat", Type(Sum(Unit, Prim(Nat)))), "nat_is_zero", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Bool)), WR(Empty, Empty))), WR(Empty, Empty)))), "nat_is_odd", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Bool)), WR(Empty, Empty))), WR(Empty, Empty)))), "nat_sub", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Nat)), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))), "nil", Thk(Empty, Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty)))), "cons", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Arrow(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))), Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))), "gen", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), WR(Empty, Empty)))), "map", Thk(Empty, Cons(Arrow(Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Nat)), WR(Empty, Empty))), WR(Empty, Empty))), Cons(Arrow(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))), Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))), "filter", Thk(Empty, Cons(Arrow(Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Bool)), WR(Empty, Empty))), WR(Empty, Empty))), Cons(Arrow(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))), Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))), "map_filter", Thk(Empty, Cons(Arrow(Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(IdentDef("OpNat", Sum(Unit, Prim(Nat)))), WR(Empty, Empty))), WR(Empty, Empty))), Cons(Arrow(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))), Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))), "reverse", Thk(Empty, Cons(Arrow(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))), Cons(Arrow(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))), Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))), "fold", Thk(Empty, Cons(Arrow(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))), Cons(Arrow(Prim(Nat), Cons(Arrow(Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Nat)), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty))), Cons(Lift(Prim(Nat)), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))), "l", IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), "a", Prim(Nat)), "f", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Nat)), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))), dir: Check(Cons(Lift(Prim(Nat)), WR(Empty, Empty))), term: Unroll(Var("l"), "sugar_match_unroll", Case(Var("sugar_match_unroll"), "_u", Ret(Var("a")), "c", Let("let_split_sugar", Ret(Var("c")), Split(Var("let_split_sugar"), "h", "t", Let("a2", App(App(Force(Var("f")), Var("a")), Var("h")), App(App(App(Force(Var("fold")), Var("t")), Var("a2")), Var("f"))))))), clas: Ok(Cons(Lift(Prim(Nat)), WR(Empty, Empty))), rule: Unroll(Der { ctx: Var(Var(Var(Var(Var(Var(Var(Var(Var(Var(Var(Var(Var(Var(Def(Def(Empty, "List", Type(Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), "OpNat", Type(Sum(Unit, Prim(Nat)))), "nat_is_zero", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Bool)), WR(Empty, Empty))), WR(Empty, Empty)))), "nat_is_odd", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Bool)), WR(Empty, Empty))), WR(Empty, Empty)))), "nat_sub", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Nat)), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))), "nil", Thk(Empty, Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty)))), "cons", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Arrow(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))), Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))), "gen", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), WR(Empty, Empty)))), "map", Thk(Empty, Cons(Arrow(Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Nat)), WR(Empty, Empty))), WR(Empty, Empty))), Cons(Arrow(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))), Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))), "filter", Thk(Empty, Cons(Arrow(Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Bool)), WR(Empty, Empty))), WR(Empty, Empty))), Cons(Arrow(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))), Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))), "map_filter", Thk(Empty, Cons(Arrow(Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(IdentDef("OpNat", Sum(Unit, Prim(Nat)))), WR(Empty, Empty))), WR(Empty, Empty))), Cons(Arrow(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))), Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))), "reverse", Thk(Empty, Cons(Arrow(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))), Cons(Arrow(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))), Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))), "fold", Thk(Empty, Cons(Arrow(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))), Cons(Arrow(Prim(Nat), Cons(Arrow(Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Nat)), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty))), Cons(Lift(Prim(Nat)), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))), "l", IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), "a", Prim(Nat)), "f", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Nat)), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))), dir: Synth, term: Var("l"), clas: Ok(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), rule: Var("l"), vis: DerVis { tmfam: "Val", local_err: false } }, "sugar_match_unroll", Der { ctx: Var(Var(Var(Var(Var(Var(Var(Var(Var(Var(Var(Var(Var(Var(Var(Def(Def(Empty, "List", Type(Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), "OpNat", Type(Sum(Unit, Prim(Nat)))), "nat_is_zero", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Bool)), WR(Empty, Empty))), WR(Empty, Empty)))), "nat_is_odd", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Bool)), WR(Empty, Empty))), WR(Empty, Empty)))), "nat_sub", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Nat)), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))), "nil", Thk(Empty, Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty)))), "cons", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Arrow(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))), Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))), "gen", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), WR(Empty, Empty)))), "map", Thk(Empty, Cons(Arrow(Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Nat)), WR(Empty, Empty))), WR(Empty, Empty))), Cons(Arrow(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))), Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))), "filter", Thk(Empty, Cons(Arrow(Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Bool)), WR(Empty, Empty))), WR(Empty, Empty))), Cons(Arrow(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))), Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))), "map_filter", Thk(Empty, Cons(Arrow(Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(IdentDef("OpNat", Sum(Unit, Prim(Nat)))), WR(Empty, Empty))), WR(Empty, Empty))), Cons(Arrow(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))), Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))), "reverse", Thk(Empty, Cons(Arrow(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))), Cons(Arrow(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))), Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))), "fold", Thk(Empty, Cons(Arrow(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))), Cons(Arrow(Prim(Nat), Cons(Arrow(Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Nat)), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty))), Cons(Lift(Prim(Nat)), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))), "l", IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), "a", Prim(Nat)), "f", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Nat)), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))), "sugar_match_unroll", Sum(Unit, Prod(Prim(Nat), Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))))), dir: Check(Cons(Lift(Prim(Nat)), WR(Empty, Empty))), term: Case(Var("sugar_match_unroll"), "_u", Ret(Var("a")), "c", Let("let_split_sugar", Ret(Var("c")), Split(Var("let_split_sugar"), "h", "t", Let("a2", App(App(Force(Var("f")), Var("a")), Var("h")), App(App(App(Force(Var("fold")), Var("t")), Var("a2")), Var("f")))))), clas: Ok(Cons(Lift(Prim(Nat)), WR(Empty, Empty))), rule: Case(Der { ctx: Var(Var(Var(Var(Var(Var(Var(Var(Var(Var(Var(Var(Var(Var(Var(Def(Def(Empty, "List", Type(Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), "OpNat", Type(Sum(Unit, Prim(Nat)))), "nat_is_zero", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Bool)), WR(Empty, Empty))), WR(Empty, Empty)))), "nat_is_odd", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Bool)), WR(Empty, Empty))), WR(Empty, Empty)))), "nat_sub", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Nat)), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))), "nil", Thk(Empty, Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty)))), "cons", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Arrow(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))), Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))), "gen", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), WR(Empty, Empty)))), "map", Thk(Empty, Cons(Arrow(Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Nat)), WR(Empty, Empty))), WR(Empty, Empty))), Cons(Arrow(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))), Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))), "filter", Thk(Empty, Cons(Arrow(Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Bool)), WR(Empty, Empty))), WR(Empty, Empty))), Cons(Arrow(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))), Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))), "map_filter", Thk(Empty, Cons(Arrow(Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(IdentDef("OpNat", Sum(Unit, Prim(Nat)))), WR(Empty, Empty))), WR(Empty, Empty))), Cons(Arrow(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))), Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))), "reverse", Thk(Empty, Cons(Arrow(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))), Cons(Arrow(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))), Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))), "fold", Thk(Empty, Cons(Arrow(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))), Cons(Arrow(Prim(Nat), Cons(Arrow(Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Nat)), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty))), Cons(Lift(Prim(Nat)), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))), "l", IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), "a", Prim(Nat)), "f", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Nat)), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))), "sugar_match_unroll", Sum(Unit, Prod(Prim(Nat), Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))))), dir: Synth, term: Var("sugar_match_unroll"), clas: Ok(Sum(Unit, Prod(Prim(Nat), Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))))), rule: Var("sugar_match_unroll"), vis: DerVis { tmfam: "Val", local_err: false } }, "_u", Der { ctx: Var(Var(Var(Var(Var(Var(Var(Var(Var(Var(Var(Var(Var(Var(Var(Var(Def(Def(Empty, "List", Type(Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), "OpNat", Type(Sum(Unit, Prim(Nat)))), "nat_is_zero", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Bool)), WR(Empty, Empty))), WR(Empty, Empty)))), "nat_is_odd", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Bool)), WR(Empty, Empty))), WR(Empty, Empty)))), "nat_sub", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Nat)), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))), "nil", Thk(Empty, Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty)))), "cons", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Arrow(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))), Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))), "gen", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), WR(Empty, Empty)))), "map", Thk(Empty, Cons(Arrow(Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Nat)), WR(Empty, Empty))), WR(Empty, Empty))), Cons(Arrow(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))), Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))), "filter", Thk(Empty, Cons(Arrow(Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Bool)), WR(Empty, Empty))), WR(Empty, Empty))), Cons(Arrow(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))), Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))), "map_filter", Thk(Empty, Cons(Arrow(Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(IdentDef("OpNat", Sum(Unit, Prim(Nat)))), WR(Empty, Empty))), WR(Empty, Empty))), Cons(Arrow(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))), Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))), "reverse", Thk(Empty, Cons(Arrow(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))), Cons(Arrow(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))), Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))), "fold", Thk(Empty, Cons(Arrow(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))), Cons(Arrow(Prim(Nat), Cons(Arrow(Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Nat)), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty))), Cons(Lift(Prim(Nat)), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))), "l", IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), "a", Prim(Nat)), "f", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Nat)), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))), "sugar_match_unroll", Sum(Unit, Prod(Prim(Nat), Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))))), "_u", Unit), dir: Check(Cons(Lift(Prim(Nat)), WR(Empty, Empty))), term: Ret(Var("a")), clas: Ok(Cons(Lift(Prim(Nat)), WR(Empty, Empty))), rule: Ret(Der { ctx: Var(Var(Var(Var(Var(Var(Var(Var(Var(Var(Var(Var(Var(Var(Var(Var(Def(Def(Empty, "List", Type(Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), "OpNat", Type(Sum(Unit, Prim(Nat)))), "nat_is_zero", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Bool)), WR(Empty, Empty))), WR(Empty, Empty)))), "nat_is_odd", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Bool)), WR(Empty, Empty))), WR(Empty, Empty)))), "nat_sub", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Nat)), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))), "nil", Thk(Empty, Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty)))), "cons", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Arrow(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))), Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))), "gen", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), WR(Empty, Empty)))), "map", Thk(Empty, Cons(Arrow(Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Nat)), WR(Empty, Empty))), WR(Empty, Empty))), Cons(Arrow(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))), Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))), "filter", Thk(Empty, Cons(Arrow(Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Bool)), WR(Empty, Empty))), WR(Empty, Empty))), Cons(Arrow(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))), Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))), "map_filter", Thk(Empty, Cons(Arrow(Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(IdentDef("OpNat", Sum(Unit, Prim(Nat)))), WR(Empty, Empty))), WR(Empty, Empty))), Cons(Arrow(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))), Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))), "reverse", Thk(Empty, Cons(Arrow(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))), Cons(Arrow(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))), Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))), "fold", Thk(Empty, Cons(Arrow(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))), Cons(Arrow(Prim(Nat), Cons(Arrow(Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Nat)), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty))), Cons(Lift(Prim(Nat)), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))), "l", IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), "a", Prim(Nat)), "f", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Nat)), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))), "sugar_match_unroll", Sum(Unit, Prod(Prim(Nat), Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))))), "_u", Unit), dir: Check(Prim(Nat)), term: Var("a"), clas: Ok(Prim(Nat)), rule: Var("a"), vis: DerVis { tmfam: "Val", local_err: false } }), vis: DerVis { tmfam: "Exp", local_err: false } }, "c", Der { ctx: Var(Var(Var(Var(Var(Var(Var(Var(Var(Var(Var(Var(Var(Var(Var(Var(Def(Def(Empty, "List", Type(Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), "OpNat", Type(Sum(Unit, Prim(Nat)))), "nat_is_zero", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Bool)), WR(Empty, Empty))), WR(Empty, Empty)))), "nat_is_odd", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Bool)), WR(Empty, Empty))), WR(Empty, Empty)))), "nat_sub", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Nat)), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))), "nil", Thk(Empty, Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty)))), "cons", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Arrow(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))), Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))), "gen", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), WR(Empty, Empty)))), "map", Thk(Empty, Cons(Arrow(Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Nat)), WR(Empty, Empty))), WR(Empty, Empty))), Cons(Arrow(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))), Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))), "filter", Thk(Empty, Cons(Arrow(Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Bool)), WR(Empty, Empty))), WR(Empty, Empty))), Cons(Arrow(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))), Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))), "map_filter", Thk(Empty, Cons(Arrow(Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(IdentDef("OpNat", Sum(Unit, Prim(Nat)))), WR(Empty, Empty))), WR(Empty, Empty))), Cons(Arrow(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))), Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))), "reverse", Thk(Empty, Cons(Arrow(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))), Cons(Arrow(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))), Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))), "fold", Thk(Empty, Cons(Arrow(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))), Cons(Arrow(Prim(Nat), Cons(Arrow(Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Nat)), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty))), Cons(Lift(Prim(Nat)), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))), "l", IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), "a", Prim(Nat)), "f", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Nat)), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))), "sugar_match_unroll", Sum(Unit, Prod(Prim(Nat), Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))))), "c", Prod(Prim(Nat), Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), dir: Check(Cons(Lift(Prim(Nat)), WR(Empty, Empty))), term: Let("let_split_sugar", Ret(Var("c")), Split(Var("let_split_sugar"), "h", "t", Let("a2", App(App(Force(Var("f")), Var("a")), Var("h")), App(App(App(Force(Var("fold")), Var("t")), Var("a2")), Var("f"))))), clas: Ok(Cons(Lift(Prim(Nat)), WR(Empty, Empty))), rule: Let("let_split_sugar", Der { ctx: Var(Var(Var(Var(Var(Var(Var(Var(Var(Var(Var(Var(Var(Var(Var(Var(Def(Def(Empty, "List", Type(Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), "OpNat", Type(Sum(Unit, Prim(Nat)))), "nat_is_zero", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Bool)), WR(Empty, Empty))), WR(Empty, Empty)))), "nat_is_odd", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Bool)), WR(Empty, Empty))), WR(Empty, Empty)))), "nat_sub", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Nat)), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))), "nil", Thk(Empty, Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty)))), "cons", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Arrow(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))), Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))), "gen", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), WR(Empty, Empty)))), "map", Thk(Empty, Cons(Arrow(Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Nat)), WR(Empty, Empty))), WR(Empty, Empty))), Cons(Arrow(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))), Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))), "filter", Thk(Empty, Cons(Arrow(Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Bool)), WR(Empty, Empty))), WR(Empty, Empty))), Cons(Arrow(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))), Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))), "map_filter", Thk(Empty, Cons(Arrow(Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(IdentDef("OpNat", Sum(Unit, Prim(Nat)))), WR(Empty, Empty))), WR(Empty, Empty))), Cons(Arrow(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))), Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))), "reverse", Thk(Empty, Cons(Arrow(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))), Cons(Arrow(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))), Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))), "fold", Thk(Empty, Cons(Arrow(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))), Cons(Arrow(Prim(Nat), Cons(Arrow(Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Nat)), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty))), Cons(Lift(Prim(Nat)), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))), "l", IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), "a", Prim(Nat)), "f", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Nat)), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))), "sugar_match_unroll", Sum(Unit, Prod(Prim(Nat), Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))))), "c", Prod(Prim(Nat), Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), dir: Synth, term: Ret(Var("c")), clas: Ok(Cons(Lift(Prod(Prim(Nat), Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), rule: Ret(Der { ctx: Var(Var(Var(Var(Var(Var(Var(Var(Var(Var(Var(Var(Var(Var(Var(Var(Def(Def(Empty, "List", Type(Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), "OpNat", Type(Sum(Unit, Prim(Nat)))), "nat_is_zero", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Bool)), WR(Empty, Empty))), WR(Empty, Empty)))), "nat_is_odd", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Bool)), WR(Empty, Empty))), WR(Empty, Empty)))), "nat_sub", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Nat)), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))), "nil", Thk(Empty, Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty)))), "cons", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Arrow(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))), Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))), "gen", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), WR(Empty, Empty)))), "map", Thk(Empty, Cons(Arrow(Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Nat)), WR(Empty, Empty))), WR(Empty, Empty))), Cons(Arrow(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))), Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))), "filter", Thk(Empty, Cons(Arrow(Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Bool)), WR(Empty, Empty))), WR(Empty, Empty))), Cons(Arrow(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))), Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))), "map_filter", Thk(Empty, Cons(Arrow(Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(IdentDef("OpNat", Sum(Unit, Prim(Nat)))), WR(Empty, Empty))), WR(Empty, Empty))), Cons(Arrow(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))), Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))), "reverse", Thk(Empty, Cons(Arrow(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))), Cons(Arrow(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))), Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))), "fold", Thk(Empty, Cons(Arrow(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))), Cons(Arrow(Prim(Nat), Cons(Arrow(Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Nat)), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty))), Cons(Lift(Prim(Nat)), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))), "l", IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), "a", Prim(Nat)), "f", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Nat)), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))), "sugar_match_unroll", Sum(Unit, Prod(Prim(Nat), Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))))), "c", Prod(Prim(Nat), Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), dir: Synth, term: Var("c"), clas: Ok(Prod(Prim(Nat), Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), rule: Var("c"), vis: DerVis { tmfam: "Val", local_err: false } }), vis: DerVis { tmfam: "Exp", local_err: false } }, Der { ctx: Var(Var(Var(Var(Var(Var(Var(Var(Var(Var(Var(Var(Var(Var(Var(Var(Var(Def(Def(Empty, "List", Type(Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), "OpNat", Type(Sum(Unit, Prim(Nat)))), "nat_is_zero", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Bool)), WR(Empty, Empty))), WR(Empty, Empty)))), "nat_is_odd", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Bool)), WR(Empty, Empty))), WR(Empty, Empty)))), "nat_sub", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Nat)), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))), "nil", Thk(Empty, Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty)))), "cons", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Arrow(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))), Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))), "gen", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), WR(Empty, Empty)))), "map", Thk(Empty, Cons(Arrow(Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Nat)), WR(Empty, Empty))), WR(Empty, Empty))), Cons(Arrow(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))), Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))), "filter", Thk(Empty, Cons(Arrow(Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Bool)), WR(Empty, Empty))), WR(Empty, Empty))), Cons(Arrow(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))), Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))), "map_filter", Thk(Empty, Cons(Arrow(Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(IdentDef("OpNat", Sum(Unit, Prim(Nat)))), WR(Empty, Empty))), WR(Empty, Empty))), Cons(Arrow(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))), Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))), "reverse", Thk(Empty, Cons(Arrow(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))), Cons(Arrow(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))), Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))), "fold", Thk(Empty, Cons(Arrow(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))), Cons(Arrow(Prim(Nat), Cons(Arrow(Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Nat)), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty))), Cons(Lift(Prim(Nat)), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))), "l", IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), "a", Prim(Nat)), "f", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Nat)), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))), "sugar_match_unroll", Sum(Unit, Prod(Prim(Nat), Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))))), "c", Prod(Prim(Nat), Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), "let_split_sugar", Prod(Prim(Nat), Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), dir: Check(Cons(Lift(Prim(Nat)), WR(Empty, Empty))), term: Split(Var("let_split_sugar"), "h", "t", Let("a2", App(App(Force(Var("f")), Var("a")), Var("h")), App(App(App(Force(Var("fold")), Var("t")), Var("a2")), Var("f")))), clas: Ok(Cons(Lift(Prim(Nat)), WR(Empty, Empty))), rule: Split(Der { ctx: Var(Var(Var(Var(Var(Var(Var(Var(Var(Var(Var(Var(Var(Var(Var(Var(Var(Def(Def(Empty, "List", Type(Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), "OpNat", Type(Sum(Unit, Prim(Nat)))), "nat_is_zero", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Bool)), WR(Empty, Empty))), WR(Empty, Empty)))), "nat_is_odd", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Bool)), WR(Empty, Empty))), WR(Empty, Empty)))), "nat_sub", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Nat)), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))), "nil", Thk(Empty, Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty)))), "cons", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Arrow(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))), Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))), "gen", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), WR(Empty, Empty)))), "map", Thk(Empty, Cons(Arrow(Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Nat)), WR(Empty, Empty))), WR(Empty, Empty))), Cons(Arrow(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))), Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))), "filter", Thk(Empty, Cons(Arrow(Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Bool)), WR(Empty, Empty))), WR(Empty, Empty))), Cons(Arrow(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))), Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))), "map_filter", Thk(Empty, Cons(Arrow(Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(IdentDef("OpNat", Sum(Unit, Prim(Nat)))), WR(Empty, Empty))), WR(Empty, Empty))), Cons(Arrow(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))), Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))), "reverse", Thk(Empty, Cons(Arrow(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))), Cons(Arrow(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))), Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))), "fold", Thk(Empty, Cons(Arrow(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))), Cons(Arrow(Prim(Nat), Cons(Arrow(Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Nat)), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty))), Cons(Lift(Prim(Nat)), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))), "l", IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), "a", Prim(Nat)), "f", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Nat)), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))), "sugar_match_unroll", Sum(Unit, Prod(Prim(Nat), Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))))), "c", Prod(Prim(Nat), Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), "let_split_sugar", Prod(Prim(Nat), Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), dir: Synth, term: Var("let_split_sugar"), clas: Ok(Prod(Prim(Nat), Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), rule: Var("let_split_sugar"), vis: DerVis { tmfam: "Val", local_err: false } }, "h", "t", Der { ctx: Var(Var(Var(Var(Var(Var(Var(Var(Var(Var(Var(Var(Var(Var(Var(Var(Var(Var(Var(Def(Def(Empty, "List", Type(Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), "OpNat", Type(Sum(Unit, Prim(Nat)))), "nat_is_zero", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Bool)), WR(Empty, Empty))), WR(Empty, Empty)))), "nat_is_odd", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Bool)), WR(Empty, Empty))), WR(Empty, Empty)))), "nat_sub", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Nat)), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))), "nil", Thk(Empty, Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty)))), "cons", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Arrow(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))), Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))), "gen", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), WR(Empty, Empty)))), "map", Thk(Empty, Cons(Arrow(Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Nat)), WR(Empty, Empty))), WR(Empty, Empty))), Cons(Arrow(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))), Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))), "filter", Thk(Empty, Cons(Arrow(Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Bool)), WR(Empty, Empty))), WR(Empty, Empty))), Cons(Arrow(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))), Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))), "map_filter", Thk(Empty, Cons(Arrow(Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(IdentDef("OpNat", Sum(Unit, Prim(Nat)))), WR(Empty, Empty))), WR(Empty, Empty))), Cons(Arrow(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))), Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))), "reverse", Thk(Empty, Cons(Arrow(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))), Cons(Arrow(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))), Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))), "fold", Thk(Empty, Cons(Arrow(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))), Cons(Arrow(Prim(Nat), Cons(Arrow(Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Nat)), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty))), Cons(Lift(Prim(Nat)), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))), "l", IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), "a", Prim(Nat)), "f", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Nat)), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))), "sugar_match_unroll", Sum(Unit, Prod(Prim(Nat), Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))))), "c", Prod(Prim(Nat), Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), "let_split_sugar", Prod(Prim(Nat), Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), "h", Prim(Nat)), "t", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))), dir: Check(Cons(Lift(Prim(Nat)), WR(Empty, Empty))), term: Let("a2", App(App(Force(Var("f")), Var("a")), Var("h")), App(App(App(Force(Var("fold")), Var("t")), Var("a2")), Var("f"))), clas: Ok(Cons(Lift(Prim(Nat)), WR(Empty, Empty))), rule: Let("a2", Der { ctx: Var(Var(Var(Var(Var(Var(Var(Var(Var(Var(Var(Var(Var(Var(Var(Var(Var(Var(Var(Def(Def(Empty, "List", Type(Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), "OpNat", Type(Sum(Unit, Prim(Nat)))), "nat_is_zero", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Bool)), WR(Empty, Empty))), WR(Empty, Empty)))), "nat_is_odd", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Bool)), WR(Empty, Empty))), WR(Empty, Empty)))), "nat_sub", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Nat)), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))), "nil", Thk(Empty, Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty)))), "cons", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Arrow(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))), Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))), "gen", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), WR(Empty, Empty)))), "map", Thk(Empty, Cons(Arrow(Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Nat)), WR(Empty, Empty))), WR(Empty, Empty))), Cons(Arrow(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))), Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))), "filter", Thk(Empty, Cons(Arrow(Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Bool)), WR(Empty, Empty))), WR(Empty, Empty))), Cons(Arrow(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))), Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))), "map_filter", Thk(Empty, Cons(Arrow(Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(IdentDef("OpNat", Sum(Unit, Prim(Nat)))), WR(Empty, Empty))), WR(Empty, Empty))), Cons(Arrow(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))), Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))), "reverse", Thk(Empty, Cons(Arrow(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))), Cons(Arrow(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))), Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))), "fold", Thk(Empty, Cons(Arrow(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))), Cons(Arrow(Prim(Nat), Cons(Arrow(Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Nat)), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty))), Cons(Lift(Prim(Nat)), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))), "l", IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), "a", Prim(Nat)), "f", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Nat)), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))), "sugar_match_unroll", Sum(Unit, Prod(Prim(Nat), Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))))), "c", Prod(Prim(Nat), Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), "let_split_sugar", Prod(Prim(Nat), Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), "h", Prim(Nat)), "t", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))), dir: Synth, term: App(App(Force(Var("f")), Var("a")), Var("h")), clas: Ok(Cons(Lift(Prim(Nat)), WR(Empty, Empty))), rule: App(Der { ctx: Var(Var(Var(Var(Var(Var(Var(Var(Var(Var(Var(Var(Var(Var(Var(Var(Var(Var(Var(Def(Def(Empty, "List", Type(Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), "OpNat", Type(Sum(Unit, Prim(Nat)))), "nat_is_zero", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Bool)), WR(Empty, Empty))), WR(Empty, Empty)))), "nat_is_odd", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Bool)), WR(Empty, Empty))), WR(Empty, Empty)))), "nat_sub", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Nat)), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))), "nil", Thk(Empty, Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty)))), "cons", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Arrow(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))), Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))), "gen", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), WR(Empty, Empty)))), "map", Thk(Empty, Cons(Arrow(Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Nat)), WR(Empty, Empty))), WR(Empty, Empty))), Cons(Arrow(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))), Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))), "filter", Thk(Empty, Cons(Arrow(Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Bool)), WR(Empty, Empty))), WR(Empty, Empty))), Cons(Arrow(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))), Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))), "map_filter", Thk(Empty, Cons(Arrow(Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(IdentDef("OpNat", Sum(Unit, Prim(Nat)))), WR(Empty, Empty))), WR(Empty, Empty))), Cons(Arrow(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))), Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))), "reverse", Thk(Empty, Cons(Arrow(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))), Cons(Arrow(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))), Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))), "fold", Thk(Empty, Cons(Arrow(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))), Cons(Arrow(Prim(Nat), Cons(Arrow(Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Nat)), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty))), Cons(Lift(Prim(Nat)), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))), "l", IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), "a", Prim(Nat)), "f", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Nat)), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))), "sugar_match_unroll", Sum(Unit, Prod(Prim(Nat), Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))))), "c", Prod(Prim(Nat), Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), "let_split_sugar", Prod(Prim(Nat), Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), "h", Prim(Nat)), "t", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))), dir: Synth, term: App(Force(Var("f")), Var("a")), clas: Ok(Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Nat)), WR(Empty, Empty))), WR(Empty, Empty))), rule: App(Der { ctx: Var(Var(Var(Var(Var(Var(Var(Var(Var(Var(Var(Var(Var(Var(Var(Var(Var(Var(Var(Def(Def(Empty, "List", Type(Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), "OpNat", Type(Sum(Unit, Prim(Nat)))), "nat_is_zero", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Bool)), WR(Empty, Empty))), WR(Empty, Empty)))), "nat_is_odd", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Bool)), WR(Empty, Empty))), WR(Empty, Empty)))), "nat_sub", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Nat)), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))), "nil", Thk(Empty, Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty)))), "cons", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Arrow(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))), Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))), "gen", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), WR(Empty, Empty)))), "map", Thk(Empty, Cons(Arrow(Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Nat)), WR(Empty, Empty))), WR(Empty, Empty))), Cons(Arrow(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))), Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))), "filter", Thk(Empty, Cons(Arrow(Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Bool)), WR(Empty, Empty))), WR(Empty, Empty))), Cons(Arrow(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))), Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))), "map_filter", Thk(Empty, Cons(Arrow(Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(IdentDef("OpNat", Sum(Unit, Prim(Nat)))), WR(Empty, Empty))), WR(Empty, Empty))), Cons(Arrow(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))), Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))), "reverse", Thk(Empty, Cons(Arrow(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))), Cons(Arrow(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))), Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))), "fold", Thk(Empty, Cons(Arrow(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))), Cons(Arrow(Prim(Nat), Cons(Arrow(Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Nat)), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty))), Cons(Lift(Prim(Nat)), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))), "l", IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), "a", Prim(Nat)), "f", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Nat)), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))), "sugar_match_unroll", Sum(Unit, Prod(Prim(Nat), Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))))), "c", Prod(Prim(Nat), Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), "let_split_sugar", Prod(Prim(Nat), Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), "h", Prim(Nat)), "t", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))), dir: Synth, term: Force(Var("f")), clas: Ok(Cons(Arrow(Prim(Nat), Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Nat)), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty))), rule: Force(Der { ctx: Var(Var(Var(Var(Var(Var(Var(Var(Var(Var(Var(Var(Var(Var(Var(Var(Var(Var(Var(Def(Def(Empty, "List", Type(Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), "OpNat", Type(Sum(Unit, Prim(Nat)))), "nat_is_zero", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Bool)), WR(Empty, Empty))), WR(Empty, Empty)))), "nat_is_odd", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Bool)), WR(Empty, Empty))), WR(Empty, Empty)))), "nat_sub", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Nat)), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))), "nil", Thk(Empty, Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty)))), "cons", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Arrow(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))), Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))), "gen", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), WR(Empty, Empty)))), "map", Thk(Empty, Cons(Arrow(Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Nat)), WR(Empty, Empty))), WR(Empty, Empty))), Cons(Arrow(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))), Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))), "filter", Thk(Empty, Cons(Arrow(Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Bool)), WR(Empty, Empty))), WR(Empty, Empty))), Cons(Arrow(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))), Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))), "map_filter", Thk(Empty, Cons(Arrow(Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(IdentDef("OpNat", Sum(Unit, Prim(Nat)))), WR(Empty, Empty))), WR(Empty, Empty))), Cons(Arrow(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))), Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))), "reverse", Thk(Empty, Cons(Arrow(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))), Cons(Arrow(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))), Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))), "fold", Thk(Empty, Cons(Arrow(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))), Cons(Arrow(Prim(Nat), Cons(Arrow(Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Nat)), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty))), Cons(Lift(Prim(Nat)), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))), "l", IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), "a", Prim(Nat)), "f", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Nat)), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))), "sugar_match_unroll", Sum(Unit, Prod(Prim(Nat), Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))))), "c", Prod(Prim(Nat), Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), "let_split_sugar", Prod(Prim(Nat), Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), "h", Prim(Nat)), "t", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))), dir: Synth, term: Var("f"), clas: Ok(Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Nat)), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))), rule: Var("f"), vis: DerVis { tmfam: "Val", local_err: false } }), vis: DerVis { tmfam: "Exp", local_err: false } }, Der { ctx: Var(Var(Var(Var(Var(Var(Var(Var(Var(Var(Var(Var(Var(Var(Var(Var(Var(Var(Var(Def(Def(Empty, "List", Type(Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), "OpNat", Type(Sum(Unit, Prim(Nat)))), "nat_is_zero", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Bool)), WR(Empty, Empty))), WR(Empty, Empty)))), "nat_is_odd", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Bool)), WR(Empty, Empty))), WR(Empty, Empty)))), "nat_sub", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Nat)), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))), "nil", Thk(Empty, Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty)))), "cons", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Arrow(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))), Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))), "gen", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), WR(Empty, Empty)))), "map", Thk(Empty, Cons(Arrow(Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Nat)), WR(Empty, Empty))), WR(Empty, Empty))), Cons(Arrow(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))), Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))), "filter", Thk(Empty, Cons(Arrow(Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Bool)), WR(Empty, Empty))), WR(Empty, Empty))), Cons(Arrow(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))), Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))), "map_filter", Thk(Empty, Cons(Arrow(Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(IdentDef("OpNat", Sum(Unit, Prim(Nat)))), WR(Empty, Empty))), WR(Empty, Empty))), Cons(Arrow(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))), Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))), "reverse", Thk(Empty, Cons(Arrow(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))), Cons(Arrow(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))), Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))), "fold", Thk(Empty, Cons(Arrow(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))), Cons(Arrow(Prim(Nat), Cons(Arrow(Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Nat)), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty))), Cons(Lift(Prim(Nat)), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))), "l", IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), "a", Prim(Nat)), "f", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Nat)), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))), "sugar_match_unroll", Sum(Unit, Prod(Prim(Nat), Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))))), "c", Prod(Prim(Nat), Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), "let_split_sugar", Prod(Prim(Nat), Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), "h", Prim(Nat)), "t", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))), dir: Check(Prim(Nat)), term: Var("a"), clas: Ok(Prim(Nat)), rule: Var("a"), vis: DerVis { tmfam: "Val", local_err: false } }), vis: DerVis { tmfam: "Exp", local_err: false } }, Der { ctx: Var(Var(Var(Var(Var(Var(Var(Var(Var(Var(Var(Var(Var(Var(Var(Var(Var(Var(Var(Def(Def(Empty, "List", Type(Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), "OpNat", Type(Sum(Unit, Prim(Nat)))), "nat_is_zero", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Bool)), WR(Empty, Empty))), WR(Empty, Empty)))), "nat_is_odd", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Bool)), WR(Empty, Empty))), WR(Empty, Empty)))), "nat_sub", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Nat)), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))), "nil", Thk(Empty, Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty)))), "cons", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Arrow(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))), Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))), "gen", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), WR(Empty, Empty)))), "map", Thk(Empty, Cons(Arrow(Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Nat)), WR(Empty, Empty))), WR(Empty, Empty))), Cons(Arrow(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))), Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))), "filter", Thk(Empty, Cons(Arrow(Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Bool)), WR(Empty, Empty))), WR(Empty, Empty))), Cons(Arrow(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))), Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))), "map_filter", Thk(Empty, Cons(Arrow(Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(IdentDef("OpNat", Sum(Unit, Prim(Nat)))), WR(Empty, Empty))), WR(Empty, Empty))), Cons(Arrow(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))), Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))), "reverse", Thk(Empty, Cons(Arrow(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))), Cons(Arrow(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))), Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))), "fold", Thk(Empty, Cons(Arrow(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))), Cons(Arrow(Prim(Nat), Cons(Arrow(Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Nat)), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty))), Cons(Lift(Prim(Nat)), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))), "l", IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), "a", Prim(Nat)), "f", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Nat)), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))), "sugar_match_unroll", Sum(Unit, Prod(Prim(Nat), Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))))), "c", Prod(Prim(Nat), Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), "let_split_sugar", Prod(Prim(Nat), Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), "h", Prim(Nat)), "t", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))), dir: Check(Prim(Nat)), term: Var("h"), clas: Ok(Prim(Nat)), rule: Var("h"), vis: DerVis { tmfam: "Val", local_err: false } }), vis: DerVis { tmfam: "Exp", local_err: false } }, Der { ctx: Var(Var(Var(Var(Var(Var(Var(Var(Var(Var(Var(Var(Var(Var(Var(Var(Var(Var(Var(Var(Def(Def(Empty, "List", Type(Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), "OpNat", Type(Sum(Unit, Prim(Nat)))), "nat_is_zero", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Bool)), WR(Empty, Empty))), WR(Empty, Empty)))), "nat_is_odd", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Bool)), WR(Empty, Empty))), WR(Empty, Empty)))), "nat_sub", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Nat)), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))), "nil", Thk(Empty, Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty)))), "cons", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Arrow(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))), Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))), "gen", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), WR(Empty, Empty)))), "map", Thk(Empty, Cons(Arrow(Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Nat)), WR(Empty, Empty))), WR(Empty, Empty))), Cons(Arrow(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))), Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))), "filter", Thk(Empty, Cons(Arrow(Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Bool)), WR(Empty, Empty))), WR(Empty, Empty))), Cons(Arrow(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))), Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))), "map_filter", Thk(Empty, Cons(Arrow(Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(IdentDef("OpNat", Sum(Unit, Prim(Nat)))), WR(Empty, Empty))), WR(Empty, Empty))), Cons(Arrow(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))), Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))), "reverse", Thk(Empty, Cons(Arrow(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))), Cons(Arrow(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))), Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))), "fold", Thk(Empty, Cons(Arrow(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))), Cons(Arrow(Prim(Nat), Cons(Arrow(Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Nat)), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty))), Cons(Lift(Prim(Nat)), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))), "l", IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), "a", Prim(Nat)), "f", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Nat)), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))), "sugar_match_unroll", Sum(Unit, Prod(Prim(Nat), Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))))), "c", Prod(Prim(Nat), Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), "let_split_sugar", Prod(Prim(Nat), Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), "h", Prim(Nat)), "t", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))), "a2", Prim(Nat)), dir: Synth, term: App(App(App(Force(Var("fold")), Var("t")), Var("a2")), Var("f")), clas: Ok(Cons(Lift(Prim(Nat)), WR(Empty, Empty))), rule: App(Der { ctx: Var(Var(Var(Var(Var(Var(Var(Var(Var(Var(Var(Var(Var(Var(Var(Var(Var(Var(Var(Var(Def(Def(Empty, "List", Type(Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), "OpNat", Type(Sum(Unit, Prim(Nat)))), "nat_is_zero", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Bool)), WR(Empty, Empty))), WR(Empty, Empty)))), "nat_is_odd", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Bool)), WR(Empty, Empty))), WR(Empty, Empty)))), "nat_sub", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Nat)), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))), "nil", Thk(Empty, Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty)))), "cons", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Arrow(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))), Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))), "gen", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), WR(Empty, Empty)))), "map", Thk(Empty, Cons(Arrow(Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Nat)), WR(Empty, Empty))), WR(Empty, Empty))), Cons(Arrow(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))), Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))), "filter", Thk(Empty, Cons(Arrow(Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Bool)), WR(Empty, Empty))), WR(Empty, Empty))), Cons(Arrow(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))), Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))), "map_filter", Thk(Empty, Cons(Arrow(Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(IdentDef("OpNat", Sum(Unit, Prim(Nat)))), WR(Empty, Empty))), WR(Empty, Empty))), Cons(Arrow(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))), Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))), "reverse", Thk(Empty, Cons(Arrow(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))), Cons(Arrow(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))), Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))), "fold", Thk(Empty, Cons(Arrow(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))), Cons(Arrow(Prim(Nat), Cons(Arrow(Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Nat)), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty))), Cons(Lift(Prim(Nat)), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))), "l", IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), "a", Prim(Nat)), "f", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Nat)), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))), "sugar_match_unroll", Sum(Unit, Prod(Prim(Nat), Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))))), "c", Prod(Prim(Nat), Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), "let_split_sugar", Prod(Prim(Nat), Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), "h", Prim(Nat)), "t", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))), "a2", Prim(Nat)), dir: Synth, term: App(App(Force(Var("fold")), Var("t")), Var("a2")), clas: Ok(Cons(Arrow(Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Nat)), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty))), Cons(Lift(Prim(Nat)), WR(Empty, Empty))), WR(Empty, Empty))), rule: App(Der { ctx: Var(Var(Var(Var(Var(Var(Var(Var(Var(Var(Var(Var(Var(Var(Var(Var(Var(Var(Var(Var(Def(Def(Empty, "List", Type(Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), "OpNat", Type(Sum(Unit, Prim(Nat)))), "nat_is_zero", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Bool)), WR(Empty, Empty))), WR(Empty, Empty)))), "nat_is_odd", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Bool)), WR(Empty, Empty))), WR(Empty, Empty)))), "nat_sub", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Nat)), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))), "nil", Thk(Empty, Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty)))), "cons", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Arrow(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))), Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))), "gen", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), WR(Empty, Empty)))), "map", Thk(Empty, Cons(Arrow(Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Nat)), WR(Empty, Empty))), WR(Empty, Empty))), Cons(Arrow(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))), Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))), "filter", Thk(Empty, Cons(Arrow(Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Bool)), WR(Empty, Empty))), WR(Empty, Empty))), Cons(Arrow(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))), Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))), "map_filter", Thk(Empty, Cons(Arrow(Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(IdentDef("OpNat", Sum(Unit, Prim(Nat)))), WR(Empty, Empty))), WR(Empty, Empty))), Cons(Arrow(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))), Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))), "reverse", Thk(Empty, Cons(Arrow(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))), Cons(Arrow(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))), Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))), "fold", Thk(Empty, Cons(Arrow(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))), Cons(Arrow(Prim(Nat), Cons(Arrow(Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Nat)), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty))), Cons(Lift(Prim(Nat)), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))), "l", IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), "a", Prim(Nat)), "f", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Nat)), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))), "sugar_match_unroll", Sum(Unit, Prod(Prim(Nat), Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))))), "c", Prod(Prim(Nat), Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), "let_split_sugar", Prod(Prim(Nat), Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), "h", Prim(Nat)), "t", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))), "a2", Prim(Nat)), dir: Synth, term: App(Force(Var("fold")), Var("t")), clas: Ok(Cons(Arrow(Prim(Nat), Cons(Arrow(Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Nat)), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty))), Cons(Lift(Prim(Nat)), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty))), rule: App(Der { ctx: Var(Var(Var(Var(Var(Var(Var(Var(Var(Var(Var(Var(Var(Var(Var(Var(Var(Var(Var(Var(Def(Def(Empty, "List", Type(Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), "OpNat", Type(Sum(Unit, Prim(Nat)))), "nat_is_zero", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Bool)), WR(Empty, Empty))), WR(Empty, Empty)))), "nat_is_odd", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Bool)), WR(Empty, Empty))), WR(Empty, Empty)))), "nat_sub", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Nat)), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))), "nil", Thk(Empty, Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty)))), "cons", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Arrow(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))), Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))), "gen", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), WR(Empty, Empty)))), "map", Thk(Empty, Cons(Arrow(Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Nat)), WR(Empty, Empty))), WR(Empty, Empty))), Cons(Arrow(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))), Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))), "filter", Thk(Empty, Cons(Arrow(Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Bool)), WR(Empty, Empty))), WR(Empty, Empty))), Cons(Arrow(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))), Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))), "map_filter", Thk(Empty, Cons(Arrow(Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(IdentDef("OpNat", Sum(Unit, Prim(Nat)))), WR(Empty, Empty))), WR(Empty, Empty))), Cons(Arrow(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))), Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))), "reverse", Thk(Empty, Cons(Arrow(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))), Cons(Arrow(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))), Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))), "fold", Thk(Empty, Cons(Arrow(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))), Cons(Arrow(Prim(Nat), Cons(Arrow(Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Nat)), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty))), Cons(Lift(Prim(Nat)), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))), "l", IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), "a", Prim(Nat)), "f", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Nat)), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))), "sugar_match_unroll", Sum(Unit, Prod(Prim(Nat), Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))))), "c", Prod(Prim(Nat), Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), "let_split_sugar", Prod(Prim(Nat), Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), "h", Prim(Nat)), "t", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))), "a2", Prim(Nat)), dir: Synth, term: Force(Var("fold")), clas: Ok(Cons(Arrow(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))), Cons(Arrow(Prim(Nat), Cons(Arrow(Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Nat)), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty))), Cons(Lift(Prim(Nat)), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty))), rule: Force(Der { ctx: Var(Var(Var(Var(Var(Var(Var(Var(Var(Var(Var(Var(Var(Var(Var(Var(Var(Var(Var(Var(Def(Def(Empty, "List", Type(Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), "OpNat", Type(Sum(Unit, Prim(Nat)))), "nat_is_zero", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Bool)), WR(Empty, Empty))), WR(Empty, Empty)))), "nat_is_odd", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Bool)), WR(Empty, Empty))), WR(Empty, Empty)))), "nat_sub", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Nat)), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))), "nil", Thk(Empty, Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty)))), "cons", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Arrow(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))), Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))), "gen", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), WR(Empty, Empty)))), "map", Thk(Empty, Cons(Arrow(Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Nat)), WR(Empty, Empty))), WR(Empty, Empty))), Cons(Arrow(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))), Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))), "filter", Thk(Empty, Cons(Arrow(Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Bool)), WR(Empty, Empty))), WR(Empty, Empty))), Cons(Arrow(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))), Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))), "map_filter", Thk(Empty, Cons(Arrow(Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(IdentDef("OpNat", Sum(Unit, Prim(Nat)))), WR(Empty, Empty))), WR(Empty, Empty))), Cons(Arrow(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))), Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))), "reverse", Thk(Empty, Cons(Arrow(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))), Cons(Arrow(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))), Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))), "fold", Thk(Empty, Cons(Arrow(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))), Cons(Arrow(Prim(Nat), Cons(Arrow(Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Nat)), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty))), Cons(Lift(Prim(Nat)), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))), "l", IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), "a", Prim(Nat)), "f", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Nat)), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))), "sugar_match_unroll", Sum(Unit, Prod(Prim(Nat), Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))))), "c", Prod(Prim(Nat), Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), "let_split_sugar", Prod(Prim(Nat), Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), "h", Prim(Nat)), "t", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))), "a2", Prim(Nat)), dir: Synth, term: Var("fold"), clas: Ok(Thk(Empty, Cons(Arrow(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))), Cons(Arrow(Prim(Nat), Cons(Arrow(Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Nat)), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty))), Cons(Lift(Prim(Nat)), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))), rule: Var("fold"), vis: DerVis { tmfam: "Val", local_err: false } }), vis: DerVis { tmfam: "Exp", local_err: false } }, Der { ctx: Var(Var(Var(Var(Var(Var(Var(Var(Var(Var(Var(Var(Var(Var(Var(Var(Var(Var(Var(Var(Def(Def(Empty, "List", Type(Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), "OpNat", Type(Sum(Unit, Prim(Nat)))), "nat_is_zero", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Bool)), WR(Empty, Empty))), WR(Empty, Empty)))), "nat_is_odd", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Bool)), WR(Empty, Empty))), WR(Empty, Empty)))), "nat_sub", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Nat)), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))), "nil", Thk(Empty, Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty)))), "cons", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Arrow(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))), Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))), "gen", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), WR(Empty, Empty)))), "map", Thk(Empty, Cons(Arrow(Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Nat)), WR(Empty, Empty))), WR(Empty, Empty))), Cons(Arrow(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))), Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))), "filter", Thk(Empty, Cons(Arrow(Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Bool)), WR(Empty, Empty))), WR(Empty, Empty))), Cons(Arrow(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))), Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))), "map_filter", Thk(Empty, Cons(Arrow(Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(IdentDef("OpNat", Sum(Unit, Prim(Nat)))), WR(Empty, Empty))), WR(Empty, Empty))), Cons(Arrow(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))), Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))), "reverse", Thk(Empty, Cons(Arrow(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))), Cons(Arrow(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))), Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))), "fold", Thk(Empty, Cons(Arrow(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))), Cons(Arrow(Prim(Nat), Cons(Arrow(Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Nat)), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty))), Cons(Lift(Prim(Nat)), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))), "l", IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), "a", Prim(Nat)), "f", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Nat)), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))), "sugar_match_unroll", Sum(Unit, Prod(Prim(Nat), Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))))), "c", Prod(Prim(Nat), Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), "let_split_sugar", Prod(Prim(Nat), Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), "h", Prim(Nat)), "t", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))), "a2", Prim(Nat)), dir: Check(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), term: Var("t"), clas: Ok(Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))), rule: Var("t"), vis: DerVis { tmfam: "Val", local_err: false } }), vis: DerVis { tmfam: "Exp", local_err: false } }, Der { ctx: Var(Var(Var(Var(Var(Var(Var(Var(Var(Var(Var(Var(Var(Var(Var(Var(Var(Var(Var(Var(Def(Def(Empty, "List", Type(Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), "OpNat", Type(Sum(Unit, Prim(Nat)))), "nat_is_zero", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Bool)), WR(Empty, Empty))), WR(Empty, Empty)))), "nat_is_odd", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Bool)), WR(Empty, Empty))), WR(Empty, Empty)))), "nat_sub", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Nat)), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))), "nil", Thk(Empty, Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty)))), "cons", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Arrow(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))), Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))), "gen", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), WR(Empty, Empty)))), "map", Thk(Empty, Cons(Arrow(Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Nat)), WR(Empty, Empty))), WR(Empty, Empty))), Cons(Arrow(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))), Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))), "filter", Thk(Empty, Cons(Arrow(Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Bool)), WR(Empty, Empty))), WR(Empty, Empty))), Cons(Arrow(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))), Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))), "map_filter", Thk(Empty, Cons(Arrow(Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(IdentDef("OpNat", Sum(Unit, Prim(Nat)))), WR(Empty, Empty))), WR(Empty, Empty))), Cons(Arrow(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))), Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))), "reverse", Thk(Empty, Cons(Arrow(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))), Cons(Arrow(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))), Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))), "fold", Thk(Empty, Cons(Arrow(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))), Cons(Arrow(Prim(Nat), Cons(Arrow(Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Nat)), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty))), Cons(Lift(Prim(Nat)), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))), "l", IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), "a", Prim(Nat)), "f", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Nat)), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))), "sugar_match_unroll", Sum(Unit, Prod(Prim(Nat), Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))))), "c", Prod(Prim(Nat), Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), "let_split_sugar", Prod(Prim(Nat), Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), "h", Prim(Nat)), "t", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))), "a2", Prim(Nat)), dir: Check(Prim(Nat)), term: Var("a2"), clas: Ok(Prim(Nat)), rule: Var("a2"), vis: DerVis { tmfam: "Val", local_err: false } }), vis: DerVis { tmfam: "Exp", local_err: false } }, Der { ctx: Var(Var(Var(Var(Var(Var(Var(Var(Var(Var(Var(Var(Var(Var(Var(Var(Var(Var(Var(Var(Def(Def(Empty, "List", Type(Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), "OpNat", Type(Sum(Unit, Prim(Nat)))), "nat_is_zero", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Bool)), WR(Empty, Empty))), WR(Empty, Empty)))), "nat_is_odd", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Bool)), WR(Empty, Empty))), WR(Empty, Empty)))), "nat_sub", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Nat)), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))), "nil", Thk(Empty, Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty)))), "cons", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Arrow(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))), Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))), "gen", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), WR(Empty, Empty)))), "map", Thk(Empty, Cons(Arrow(Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Nat)), WR(Empty, Empty))), WR(Empty, Empty))), Cons(Arrow(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))), Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))), "filter", Thk(Empty, Cons(Arrow(Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Bool)), WR(Empty, Empty))), WR(Empty, Empty))), Cons(Arrow(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))), Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))), "map_filter", Thk(Empty, Cons(Arrow(Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(IdentDef("OpNat", Sum(Unit, Prim(Nat)))), WR(Empty, Empty))), WR(Empty, Empty))), Cons(Arrow(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))), Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))), "reverse", Thk(Empty, Cons(Arrow(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))), Cons(Arrow(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))), Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))), "fold", Thk(Empty, Cons(Arrow(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))), Cons(Arrow(Prim(Nat), Cons(Arrow(Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Nat)), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty))), Cons(Lift(Prim(Nat)), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))), "l", IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), "a", Prim(Nat)), "f", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Nat)), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))), "sugar_match_unroll", Sum(Unit, Prod(Prim(Nat), Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))))), "c", Prod(Prim(Nat), Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), "let_split_sugar", Prod(Prim(Nat), Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), "h", Prim(Nat)), "t", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))), "a2", Prim(Nat)), dir: Check(Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Nat)), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))), term: Var("f"), clas: Ok(Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Nat)), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))), rule: Var("f"), vis: DerVis { tmfam: "Val", local_err: false } }), vis: DerVis { tmfam: "Exp", local_err: false } }), vis: DerVis { tmfam: "Exp", local_err: false } }), vis: DerVis { tmfam: "Exp", local_err: false } }), vis: DerVis { tmfam: "Exp", local_err: false } }), vis: DerVis { tmfam: "Exp", local_err: false } }), vis: DerVis { tmfam: "Exp", local_err: false } }), vis: DerVis { tmfam: "Exp", local_err: false } }), vis: DerVis { tmfam: "Exp", local_err: false } }), vis: DerVis { tmfam: "Exp", local_err: false } }), vis: DerVis { tmfam: "Exp", local_err: false } }), vis: DerVis { tmfam: "Val", local_err: false } }), vis: DerVis { tmfam: "Module", local_err: false } } })], ctx_out: Var(Var(Var(Var(Var(Var(Var(Var(Var(Var(Var(Def(Def(Empty, "List", Type(Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), "OpNat", Type(Sum(Unit, Prim(Nat)))), "nat_is_zero", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Bool)), WR(Empty, Empty))), WR(Empty, Empty)))), "nat_is_odd", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Bool)), WR(Empty, Empty))), WR(Empty, Empty)))), "nat_sub", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Nat)), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))), "nil", Thk(Empty, Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty)))), "cons", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Arrow(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))), Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))), "gen", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), WR(Empty, Empty)))), "map", Thk(Empty, Cons(Arrow(Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Nat)), WR(Empty, Empty))), WR(Empty, Empty))), Cons(Arrow(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))), Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))), "filter", Thk(Empty, Cons(Arrow(Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Bool)), WR(Empty, Empty))), WR(Empty, Empty))), Cons(Arrow(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))), Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))), "map_filter", Thk(Empty, Cons(Arrow(Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(IdentDef("OpNat", Sum(Unit, Prim(Nat)))), WR(Empty, Empty))), WR(Empty, Empty))), Cons(Arrow(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))), Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))), "reverse", Thk(Empty, Cons(Arrow(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))), Cons(Arrow(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))), Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))), "fold", Thk(Empty, Cons(Arrow(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))), Cons(Arrow(Prim(Nat), Cons(Arrow(Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Nat)), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty))), Cons(Lift(Prim(Nat)), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))) } }, Der { ctx: Var(Var(Var(Var(Var(Var(Var(Var(Var(Var(Var(Def(Def(Empty, "List", Type(Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), "OpNat", Type(Sum(Unit, Prim(Nat)))), "nat_is_zero", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Bool)), WR(Empty, Empty))), WR(Empty, Empty)))), "nat_is_odd", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Bool)), WR(Empty, Empty))), WR(Empty, Empty)))), "nat_sub", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Nat)), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))), "nil", Thk(Empty, Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty)))), "cons", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Arrow(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))), Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))), "gen", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), WR(Empty, Empty)))), "map", Thk(Empty, Cons(Arrow(Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Nat)), WR(Empty, Empty))), WR(Empty, Empty))), Cons(Arrow(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))), Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))), "filter", Thk(Empty, Cons(Arrow(Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Bool)), WR(Empty, Empty))), WR(Empty, Empty))), Cons(Arrow(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))), Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))), "map_filter", Thk(Empty, Cons(Arrow(Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(IdentDef("OpNat", Sum(Unit, Prim(Nat)))), WR(Empty, Empty))), WR(Empty, Empty))), Cons(Arrow(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))), Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))), "reverse", Thk(Empty, Cons(Arrow(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))), Cons(Arrow(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))), Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))), "fold", Thk(Empty, Cons(Arrow(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))), Cons(Arrow(Prim(Nat), Cons(Arrow(Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Nat)), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty))), Cons(Lift(Prim(Nat)), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))), dir: Synth, term: Ret(Nat(0)), clas: Ok(Cons(Lift(Prim(Nat)), WR(Empty, Empty))), rule: Ret(Der { ctx: Var(Var(Var(Var(Var(Var(Var(Var(Var(Var(Var(Def(Def(Empty, "List", Type(Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), "OpNat", Type(Sum(Unit, Prim(Nat)))), "nat_is_zero", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Bool)), WR(Empty, Empty))), WR(Empty, Empty)))), "nat_is_odd", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Bool)), WR(Empty, Empty))), WR(Empty, Empty)))), "nat_sub", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Nat)), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))), "nil", Thk(Empty, Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty)))), "cons", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Arrow(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))), Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))), "gen", Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), WR(Empty, Empty)))), "map", Thk(Empty, Cons(Arrow(Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Nat)), WR(Empty, Empty))), WR(Empty, Empty))), Cons(Arrow(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))), Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))), "filter", Thk(Empty, Cons(Arrow(Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Bool)), WR(Empty, Empty))), WR(Empty, Empty))), Cons(Arrow(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))), Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))), "map_filter", Thk(Empty, Cons(Arrow(Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Lift(IdentDef("OpNat", Sum(Unit, Prim(Nat)))), WR(Empty, Empty))), WR(Empty, Empty))), Cons(Arrow(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))), Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))), "reverse", Thk(Empty, Cons(Arrow(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))), Cons(Arrow(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))), Cons(Lift(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list")))))), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))), "fold", Thk(Empty, Cons(Arrow(IdentDef("List", Rec("list", Sum(Unit, Prod(Prim(Nat), Var("list"))))), Cons(Arrow(Prim(Nat), Cons(Arrow(Thk(Empty, Cons(Arrow(Prim(Nat), Cons(Arrow(Prim(Nat), Cons(Lift(Prim(Nat)), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty))), Cons(Lift(Prim(Nat)), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))), dir: Synth, term: Nat(0), clas: Ok(Prim(Nat)), rule: Nat(0), vis: DerVis { tmfam: "Val", local_err: false } }), vis: DerVis { tmfam: "Exp", local_err: false } }), vis: DerVis { tmfam: "Exp", local_err: false } }, traces: [] }