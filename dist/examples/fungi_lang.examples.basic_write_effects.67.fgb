Bundle { input: "let set :\n(Thk [0] foralli X : NmSet . 0 Nm [X] -> 0 Nat -> { { @ ! } X ; 0 } F Ref [X]\n Nat) = { ret thunk # n . # x . let r = { ref n x } ret r } ret 0", program: Der { ctx: Empty, dir: Synth, term: Let("set", AnnoC(Ret(ThunkAnon(Lam("n", Lam("x", Let("r", Ref(Var("n"), Var("x")), Ret(Var("r"))))))), Lift(Thk(Empty, ForallIdx("X", NmSet, Tt, Cons(Arrow(Nm(Var("X")), Cons(Arrow(Ident("Nat"), Cons(Lift(Ref(Var("X"), Ident("Nat"))), WR(App(WriteScope, Var("X")), Empty))), WR(Empty, Empty))), WR(Empty, Empty)))))), Ret(Nat(0))), clas: Err(ParamNoSynth(1)), rule: Let("set", Der { ctx: Empty, dir: Synth, term: AnnoC(Ret(ThunkAnon(Lam("n", Lam("x", Let("r", Ref(Var("n"), Var("x")), Ret(Var("r"))))))), Lift(Thk(Empty, ForallIdx("X", NmSet, Tt, Cons(Arrow(Nm(Var("X")), Cons(Arrow(Ident("Nat"), Cons(Lift(Ref(Var("X"), Ident("Nat"))), WR(App(WriteScope, Var("X")), Empty))), WR(Empty, Empty))), WR(Empty, Empty)))))), clas: Err(ParamNoCheck(0)), rule: AnnoC(Der { ctx: Empty, dir: Check(Cons(Lift(Thk(Empty, ForallIdx("X", NmSet, Tt, Cons(Arrow(Nm(Var("X")), Cons(Arrow(Prim(Nat), Cons(Lift(Ref(Var("X"), Prim(Nat))), WR(App(WriteScope, Var("X")), Empty))), WR(Empty, Empty))), WR(Empty, Empty))))), WR(Empty, Empty))), term: Ret(ThunkAnon(Lam("n", Lam("x", Let("r", Ref(Var("n"), Var("x")), Ret(Var("r"))))))), clas: Err(CheckFailType(Thk(Empty, ForallIdx("X", NmSet, Tt, Cons(Arrow(Nm(Var("X")), Cons(Arrow(Prim(Nat), Cons(Lift(Ref(Var("X"), Prim(Nat))), WR(App(WriteScope, Var("X")), Empty))), WR(Empty, Empty))), WR(Empty, Empty)))))), rule: Ret(Der { ctx: Empty, dir: Check(Thk(Empty, ForallIdx("X", NmSet, Tt, Cons(Arrow(Nm(Var("X")), Cons(Arrow(Prim(Nat), Cons(Lift(Ref(Var("X"), Prim(Nat))), WR(App(WriteScope, Var("X")), Empty))), WR(Empty, Empty))), WR(Empty, Empty))))), term: ThunkAnon(Lam("n", Lam("x", Let("r", Ref(Var("n"), Var("x")), Ret(Var("r")))))), clas: Err(CheckFailCEffect(ForallIdx("X", NmSet, Tt, Cons(Arrow(Nm(Var("X")), Cons(Arrow(Prim(Nat), Cons(Lift(Ref(Var("X"), Prim(Nat))), WR(App(WriteScope, Var("X")), Empty))), WR(Empty, Empty))), WR(Empty, Empty))))), rule: ThunkAnon(Der { ctx: Empty, dir: Check(ForallIdx("X", NmSet, Tt, Cons(Arrow(Nm(Var("X")), Cons(Arrow(Prim(Nat), Cons(Lift(Ref(Var("X"), Prim(Nat))), WR(App(WriteScope, Var("X")), Empty))), WR(Empty, Empty))), WR(Empty, Empty)))), term: Lam("n", Lam("x", Let("r", Ref(Var("n"), Var("x")), Ret(Var("r"))))), clas: Err(CheckFailCEffect(Cons(Arrow(Nm(Var("X")), Cons(Arrow(Prim(Nat), Cons(Lift(Ref(Var("X"), Prim(Nat))), WR(App(WriteScope, Var("X")), Empty))), WR(Empty, Empty))), WR(Empty, Empty)))), rule: Lam("n", Der { ctx: Var(IVar(Empty, "X", NmSet), "n", Nm(Var("X"))), dir: Check(Cons(Arrow(Prim(Nat), Cons(Lift(Ref(Var("X"), Prim(Nat))), WR(App(WriteScope, Var("X")), Empty))), WR(Empty, Empty))), term: Lam("x", Let("r", Ref(Var("n"), Var("x")), Ret(Var("r")))), clas: Err(CheckFailCEffect(Cons(Arrow(Prim(Nat), Cons(Lift(Ref(Var("X"), Prim(Nat))), WR(App(WriteScope, Var("X")), Empty))), WR(Empty, Empty)))), rule: Lam("x", Der { ctx: Var(Var(IVar(Empty, "X", NmSet), "n", Nm(Var("X"))), "x", Prim(Nat)), dir: Check(Cons(Lift(Ref(Var("X"), Prim(Nat))), WR(App(WriteScope, Var("X")), Empty))), term: Let("r", Ref(Var("n"), Var("x")), Ret(Var("r"))), clas: Err(Later(CheckFailType(Ref(Var("X"), Prim(Nat))))), rule: Let("r", Der { ctx: Var(Var(IVar(Empty, "X", NmSet), "n", Nm(Var("X"))), "x", Prim(Nat)), dir: Synth, term: Ref(Var("n"), Var("x")), clas: Ok(Cons(Lift(Ref(Map(WriteScope, Var("X")), Prim(Nat))), WR(Map(WriteScope, Var("X")), Empty))), rule: Ref(Der { ctx: Var(Var(IVar(Empty, "X", NmSet), "n", Nm(Var("X"))), "x", Prim(Nat)), dir: Synth, term: Var("n"), clas: Ok(Nm(Var("X"))), rule: Var("n"), vis: DerVis { tmfam: "Val", local_err: false } }, Der { ctx: Var(Var(IVar(Empty, "X", NmSet), "n", Nm(Var("X"))), "x", Prim(Nat)), dir: Synth, term: Var("x"), clas: Ok(Prim(Nat)), rule: Var("x"), vis: DerVis { tmfam: "Val", local_err: false } }), vis: DerVis { tmfam: "Exp", local_err: false } }, Der { ctx: Var(Var(Var(IVar(Empty, "X", NmSet), "n", Nm(Var("X"))), "x", Prim(Nat)), "r", Ref(Map(WriteScope, Var("X")), Prim(Nat))), dir: Check(Cons(Lift(Ref(Var("X"), Prim(Nat))), WR(Empty, Empty))), term: Ret(Var("r")), clas: Err(CheckFailType(Ref(Var("X"), Prim(Nat)))), rule: Ret(Der { ctx: Var(Var(Var(IVar(Empty, "X", NmSet), "n", Nm(Var("X"))), "x", Prim(Nat)), "r", Ref(Map(WriteScope, Var("X")), Prim(Nat))), dir: Check(Ref(Var("X"), Prim(Nat))), term: Var("r"), clas: Err(AnnoMism), rule: Var("r"), vis: DerVis { tmfam: "Val", local_err: true } }), vis: DerVis { tmfam: "Exp", local_err: false } }), vis: DerVis { tmfam: "Exp", local_err: false } }), vis: DerVis { tmfam: "Exp", local_err: false } }), vis: DerVis { tmfam: "Exp", local_err: false } }), vis: DerVis { tmfam: "Val", local_err: false } }), vis: DerVis { tmfam: "Exp", local_err: false } }, Lift(Thk(Empty, ForallIdx("X", NmSet, Tt, Cons(Arrow(Nm(Var("X")), Cons(Arrow(Prim(Nat), Cons(Lift(Ref(Var("X"), Prim(Nat))), WR(App(WriteScope, Var("X")), Empty))), WR(Empty, Empty))), WR(Empty, Empty)))))), vis: DerVis { tmfam: "Exp", local_err: false } }, Der { ctx: Empty, dir: Synth, term: Ret(Nat(0)), clas: Ok(Cons(Lift(Prim(Nat)), WR(Empty, Empty))), rule: Ret(Der { ctx: Empty, dir: Synth, term: Nat(0), clas: Ok(Prim(Nat)), rule: Nat(0), vis: DerVis { tmfam: "Val", local_err: false } }), vis: DerVis { tmfam: "Exp", local_err: false } }), vis: DerVis { tmfam: "Exp", local_err: false } }, traces: [] }