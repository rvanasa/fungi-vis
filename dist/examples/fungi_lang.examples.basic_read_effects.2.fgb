Bundle { input: "let get : (Thk [0] foralli X : NmSet . 0 Ref [X] Nat -> { 0 ; X } F Nat) =\n{ ret thunk # r . let x = { get r } ret x } ret 0", program: Der { ctx: Empty, dir: Synth, term: Let("get", AnnoC(Ret(ThunkAnon(Lam("r", Let("x", Get(Var("r")), Ret(Var("x")))))), Lift(Thk(Empty, ForallIdx("X", NmSet, Tt, Cons(Arrow(Ref(Var("X"), Ident("Nat")), Cons(Lift(Ident("Nat")), WR(Empty, Var("X")))), WR(Empty, Empty)))))), Ret(Nat(0))), clas: Ok(Cons(Lift(Prim(Nat)), WR(Empty, Empty))), rule: Let("get", Der { ctx: Empty, dir: Synth, term: AnnoC(Ret(ThunkAnon(Lam("r", Let("x", Get(Var("r")), Ret(Var("x")))))), Lift(Thk(Empty, ForallIdx("X", NmSet, Tt, Cons(Arrow(Ref(Var("X"), Ident("Nat")), Cons(Lift(Ident("Nat")), WR(Empty, Var("X")))), WR(Empty, Empty)))))), clas: Ok(Cons(Lift(Thk(Empty, ForallIdx("X", NmSet, Tt, Cons(Arrow(Ref(Var("X"), Prim(Nat)), Cons(Lift(Prim(Nat)), WR(Empty, Var("X")))), WR(Empty, Empty))))), WR(Empty, Empty))), rule: AnnoC(Der { ctx: Empty, dir: Check(Cons(Lift(Thk(Empty, ForallIdx("X", NmSet, Tt, Cons(Arrow(Ref(Var("X"), Prim(Nat)), Cons(Lift(Prim(Nat)), WR(Empty, Var("X")))), WR(Empty, Empty))))), WR(Empty, Empty))), term: Ret(ThunkAnon(Lam("r", Let("x", Get(Var("r")), Ret(Var("x")))))), clas: Ok(Cons(Lift(Thk(Empty, ForallIdx("X", NmSet, Tt, Cons(Arrow(Ref(Var("X"), Prim(Nat)), Cons(Lift(Prim(Nat)), WR(Empty, Var("X")))), WR(Empty, Empty))))), WR(Empty, Empty))), rule: Ret(Der { ctx: Empty, dir: Check(Thk(Empty, ForallIdx("X", NmSet, Tt, Cons(Arrow(Ref(Var("X"), Prim(Nat)), Cons(Lift(Prim(Nat)), WR(Empty, Var("X")))), WR(Empty, Empty))))), term: ThunkAnon(Lam("r", Let("x", Get(Var("r")), Ret(Var("x"))))), clas: Ok(Thk(Empty, ForallIdx("X", NmSet, Tt, Cons(Arrow(Ref(Var("X"), Prim(Nat)), Cons(Lift(Prim(Nat)), WR(Empty, Var("X")))), WR(Empty, Empty))))), rule: ThunkAnon(Der { ctx: Empty, dir: Check(ForallIdx("X", NmSet, Tt, Cons(Arrow(Ref(Var("X"), Prim(Nat)), Cons(Lift(Prim(Nat)), WR(Empty, Var("X")))), WR(Empty, Empty)))), term: Lam("r", Let("x", Get(Var("r")), Ret(Var("x")))), clas: Ok(Cons(Arrow(Ref(Var("X"), Prim(Nat)), Cons(Lift(Prim(Nat)), WR(Empty, Var("X")))), WR(Empty, Empty))), rule: Lam("r", Der { ctx: Var(IVar(Empty, "X", NmSet), "r", Ref(Var("X"), Prim(Nat))), dir: Check(Cons(Lift(Prim(Nat)), WR(Empty, Var("X")))), term: Let("x", Get(Var("r")), Ret(Var("x"))), clas: Ok(Cons(Lift(Prim(Nat)), WR(Empty, Var("X")))), rule: Let("x", Der { ctx: Var(IVar(Empty, "X", NmSet), "r", Ref(Var("X"), Prim(Nat))), dir: Synth, term: Get(Var("r")), clas: Ok(Cons(Lift(Prim(Nat)), WR(Empty, Var("X")))), rule: Get(Der { ctx: Var(IVar(Empty, "X", NmSet), "r", Ref(Var("X"), Prim(Nat))), dir: Synth, term: Var("r"), clas: Ok(Ref(Var("X"), Prim(Nat))), rule: Var("r"), vis: DerVis { tmfam: "Val", local_err: false } }), vis: DerVis { tmfam: "Exp", local_err: false } }, Der { ctx: Var(Var(IVar(Empty, "X", NmSet), "r", Ref(Var("X"), Prim(Nat))), "x", Prim(Nat)), dir: Check(Cons(Lift(Prim(Nat)), WR(Empty, Var("X")))), term: Ret(Var("x")), clas: Ok(Cons(Lift(Prim(Nat)), WR(Empty, Var("X")))), rule: Ret(Der { ctx: Var(Var(IVar(Empty, "X", NmSet), "r", Ref(Var("X"), Prim(Nat))), "x", Prim(Nat)), dir: Check(Prim(Nat)), term: Var("x"), clas: Ok(Prim(Nat)), rule: Var("x"), vis: DerVis { tmfam: "Val", local_err: false } }), vis: DerVis { tmfam: "Exp", local_err: false } }), vis: DerVis { tmfam: "Exp", local_err: false } }), vis: DerVis { tmfam: "Exp", local_err: false } }), vis: DerVis { tmfam: "Val", local_err: false } }), vis: DerVis { tmfam: "Exp", local_err: false } }, Lift(Thk(Empty, ForallIdx("X", NmSet, Tt, Cons(Arrow(Ref(Var("X"), Prim(Nat)), Cons(Lift(Prim(Nat)), WR(Empty, Var("X")))), WR(Empty, Empty)))))), vis: DerVis { tmfam: "Exp", local_err: false } }, Der { ctx: Var(Empty, "get", Thk(Empty, ForallIdx("X", NmSet, Tt, Cons(Arrow(Ref(Var("X"), Prim(Nat)), Cons(Lift(Prim(Nat)), WR(Empty, Var("X")))), WR(Empty, Empty))))), dir: Synth, term: Ret(Nat(0)), clas: Ok(Cons(Lift(Prim(Nat)), WR(Empty, Empty))), rule: Ret(Der { ctx: Var(Empty, "get", Thk(Empty, ForallIdx("X", NmSet, Tt, Cons(Arrow(Ref(Var("X"), Prim(Nat)), Cons(Lift(Prim(Nat)), WR(Empty, Var("X")))), WR(Empty, Empty))))), dir: Synth, term: Nat(0), clas: Ok(Prim(Nat)), rule: Nat(0), vis: DerVis { tmfam: "Val", local_err: false } }), vis: DerVis { tmfam: "Exp", local_err: false } }), vis: DerVis { tmfam: "Exp", local_err: false } }, traces: [] }