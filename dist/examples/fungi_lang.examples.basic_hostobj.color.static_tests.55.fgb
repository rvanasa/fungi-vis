Bundle { input: "open crate :: examples :: basic_hostobj :: color ; let red = { ret color_red }\nlet green = { ret color_green } let gold = { ret color_gold } let triple =\n{ ret (red, green, gold) } let red_next = { { force color_next } red } let\ngreen_next = { { force color_next } green } let gold_next =\n{ { force color_next } gold } let triple_next =\n{ ret (red_next, green_next, gold_next) } ret (triple, triple_next)", program: Der { ctx: Empty, dir: Synth, term: UseAll(UseAllModule { path: "crate::examples::basic_hostobj::color", module: Module { path: "fungi_lang::examples::basic_hostobj::color", body: "type Color ; val color_red : (Color) =\n(^ crate :: hostobj :: val_of_obj (Color :: Red)) val color_green : (Color) =\n(^ crate :: hostobj :: val_of_obj (Color :: Green)) val color_gold : (Color) =\n(^ crate :: hostobj :: val_of_obj (Color :: Gold)) fn color_next :\n(Thk [0] 0 Color -> 0 F Color) = { unsafe (1) trapdoor :: color_next }", decls: Type("Color", Abstract("Color"), Val("color_red", Some(Ident("Color")), HostObj(Red), Val("color_green", Some(Ident("Color")), HostObj(Green), Val("color_gold", Some(Ident("Color")), HostObj(Gold), Fn("color_next", Thk(Empty, Cons(Arrow(Ident("Color"), Cons(Lift(Ident("Color")), WR(Empty, Empty))), WR(Empty, Empty))), HostFn(HostEvalFn("trapdoor::color_next")), End))))) } }, Let("red", Ret(Var("color_red")), Let("green", Ret(Var("color_green")), Let("gold", Ret(Var("color_gold")), Let("triple", Ret(Pair(Var("red"), Pair(Var("green"), Var("gold")))), Let("red_next", App(Force(Var("color_next")), Var("red")), Let("green_next", App(Force(Var("color_next")), Var("green")), Let("gold_next", App(Force(Var("color_next")), Var("gold")), Let("triple_next", Ret(Pair(Var("red_next"), Pair(Var("green_next"), Var("gold_next")))), Ret(Pair(Var("triple"), Var("triple_next")))))))))))), clas: Ok(Cons(Lift(Prod(Prod(IdentDef("Color", Abstract("Color")), Prod(IdentDef("Color", Abstract("Color")), IdentDef("Color", Abstract("Color")))), Prod(IdentDef("Color", Abstract("Color")), Prod(IdentDef("Color", Abstract("Color")), IdentDef("Color", Abstract("Color")))))), WR(Empty, Empty))), rule: UseAll(UseAllModuleDer { ast: UseAllModule { path: "crate::examples::basic_hostobj::color", module: Module { path: "fungi_lang::examples::basic_hostobj::color", body: "type Color ; val color_red : (Color) =\n(^ crate :: hostobj :: val_of_obj (Color :: Red)) val color_green : (Color) =\n(^ crate :: hostobj :: val_of_obj (Color :: Green)) val color_gold : (Color) =\n(^ crate :: hostobj :: val_of_obj (Color :: Gold)) fn color_next :\n(Thk [0] 0 Color -> 0 F Color) = { unsafe (1) trapdoor :: color_next }", decls: Type("Color", Abstract("Color"), Val("color_red", Some(Ident("Color")), HostObj(Red), Val("color_green", Some(Ident("Color")), HostObj(Green), Val("color_gold", Some(Ident("Color")), HostObj(Gold), Fn("color_next", Thk(Empty, Cons(Arrow(Ident("Color"), Cons(Lift(Ident("Color")), WR(Empty, Empty))), WR(Empty, Empty))), HostFn(HostEvalFn("trapdoor::color_next")), End))))) } }, der: ModuleDer { ast: Module { path: "fungi_lang::examples::basic_hostobj::color", body: "type Color ; val color_red : (Color) =\n(^ crate :: hostobj :: val_of_obj (Color :: Red)) val color_green : (Color) =\n(^ crate :: hostobj :: val_of_obj (Color :: Green)) val color_gold : (Color) =\n(^ crate :: hostobj :: val_of_obj (Color :: Gold)) fn color_next :\n(Thk [0] 0 Color -> 0 F Color) = { unsafe (1) trapdoor :: color_next }", decls: Type("Color", Abstract("Color"), Val("color_red", Some(Ident("Color")), HostObj(Red), Val("color_green", Some(Ident("Color")), HostObj(Green), Val("color_gold", Some(Ident("Color")), HostObj(Gold), Fn("color_next", Thk(Empty, Cons(Arrow(Ident("Color"), Cons(Lift(Ident("Color")), WR(Empty, Empty))), WR(Empty, Empty))), HostFn(HostEvalFn("trapdoor::color_next")), End))))) }, tds: [Bind(ItemDer { doc: None, qual: Type, var: "Color", der: Der { ctx: Empty, dir: Synth, term: (), clas: Ok(Kind(NoParse("TODO-XXX-bitype.rs"))), rule: Type("Color", Abstract("Color")), vis: DerVis { tmfam: "Module", local_err: false } } }), Bind(ItemDer { doc: None, qual: Val, var: "color_red", der: Der { ctx: Var(Def(Empty, "Color", Type(Abstract("Color"))), "color_red", IdentDef("Color", Abstract("Color"))), dir: Synth, term: (), clas: Ok(Type(IdentDef("Color", Abstract("Color")))), rule: Val("color_red", Der { ctx: Def(Empty, "Color", Type(Abstract("Color"))), dir: Check(Ident("Color")), term: HostObj(Red), clas: Ok(IdentDef("Color", Abstract("Color"))), rule: HostObj, vis: DerVis { tmfam: "Val", local_err: false } }), vis: DerVis { tmfam: "Module", local_err: false } } }), Bind(ItemDer { doc: None, qual: Val, var: "color_green", der: Der { ctx: Var(Var(Def(Empty, "Color", Type(Abstract("Color"))), "color_red", IdentDef("Color", Abstract("Color"))), "color_green", IdentDef("Color", Abstract("Color"))), dir: Synth, term: (), clas: Ok(Type(IdentDef("Color", Abstract("Color")))), rule: Val("color_green", Der { ctx: Var(Def(Empty, "Color", Type(Abstract("Color"))), "color_red", IdentDef("Color", Abstract("Color"))), dir: Check(Ident("Color")), term: HostObj(Green), clas: Ok(IdentDef("Color", Abstract("Color"))), rule: HostObj, vis: DerVis { tmfam: "Val", local_err: false } }), vis: DerVis { tmfam: "Module", local_err: false } } }), Bind(ItemDer { doc: None, qual: Val, var: "color_gold", der: Der { ctx: Var(Var(Var(Def(Empty, "Color", Type(Abstract("Color"))), "color_red", IdentDef("Color", Abstract("Color"))), "color_green", IdentDef("Color", Abstract("Color"))), "color_gold", IdentDef("Color", Abstract("Color"))), dir: Synth, term: (), clas: Ok(Type(IdentDef("Color", Abstract("Color")))), rule: Val("color_gold", Der { ctx: Var(Var(Def(Empty, "Color", Type(Abstract("Color"))), "color_red", IdentDef("Color", Abstract("Color"))), "color_green", IdentDef("Color", Abstract("Color"))), dir: Check(Ident("Color")), term: HostObj(Gold), clas: Ok(IdentDef("Color", Abstract("Color"))), rule: HostObj, vis: DerVis { tmfam: "Val", local_err: false } }), vis: DerVis { tmfam: "Module", local_err: false } } }), Bind(ItemDer { doc: None, qual: Val, var: "color_next", der: Der { ctx: Var(Var(Var(Def(Empty, "Color", Type(Abstract("Color"))), "color_red", IdentDef("Color", Abstract("Color"))), "color_green", IdentDef("Color", Abstract("Color"))), "color_gold", IdentDef("Color", Abstract("Color"))), dir: Synth, term: (), clas: Ok(Type(Thk(Empty, Cons(Arrow(Ident("Color"), Cons(Lift(Ident("Color")), WR(Empty, Empty))), WR(Empty, Empty))))), rule: Fn("color_next", Der { ctx: Var(Var(Var(Def(Empty, "Color", Type(Abstract("Color"))), "color_red", IdentDef("Color", Abstract("Color"))), "color_green", IdentDef("Color", Abstract("Color"))), "color_gold", IdentDef("Color", Abstract("Color"))), dir: Check(Thk(Empty, Cons(Arrow(Ident("Color"), Cons(Lift(Ident("Color")), WR(Empty, Empty))), WR(Empty, Empty)))), term: ThunkAnon(HostFn(HostEvalFn("trapdoor::color_next"))), clas: Ok(Thk(Empty, Cons(Arrow(Ident("Color"), Cons(Lift(Ident("Color")), WR(Empty, Empty))), WR(Empty, Empty)))), rule: ThunkAnon(Der { ctx: Var(Var(Var(Def(Empty, "Color", Type(Abstract("Color"))), "color_red", IdentDef("Color", Abstract("Color"))), "color_green", IdentDef("Color", Abstract("Color"))), "color_gold", IdentDef("Color", Abstract("Color"))), dir: Check(Cons(Arrow(IdentDef("Color", Abstract("Color")), Cons(Lift(IdentDef("Color", Abstract("Color"))), WR(Empty, Empty))), WR(Empty, Empty))), term: HostFn(HostEvalFn("trapdoor::color_next")), clas: Ok(Cons(Arrow(IdentDef("Color", Abstract("Color")), Cons(Lift(IdentDef("Color", Abstract("Color"))), WR(Empty, Empty))), WR(Empty, Empty))), rule: HostFn(HostEvalFn("trapdoor::color_next")), vis: DerVis { tmfam: "Exp", local_err: false } }), vis: DerVis { tmfam: "Val", local_err: false } }), vis: DerVis { tmfam: "Module", local_err: false } } })], ctx_out: Var(Var(Var(Var(Def(Empty, "Color", Type(Abstract("Color"))), "color_red", IdentDef("Color", Abstract("Color"))), "color_green", IdentDef("Color", Abstract("Color"))), "color_gold", IdentDef("Color", Abstract("Color"))), "color_next", Thk(Empty, Cons(Arrow(IdentDef("Color", Abstract("Color")), Cons(Lift(IdentDef("Color", Abstract("Color"))), WR(Empty, Empty))), WR(Empty, Empty)))) } }, Der { ctx: Var(Var(Var(Var(Def(Empty, "Color", Type(Abstract("Color"))), "color_red", IdentDef("Color", Abstract("Color"))), "color_green", IdentDef("Color", Abstract("Color"))), "color_gold", IdentDef("Color", Abstract("Color"))), "color_next", Thk(Empty, Cons(Arrow(IdentDef("Color", Abstract("Color")), Cons(Lift(IdentDef("Color", Abstract("Color"))), WR(Empty, Empty))), WR(Empty, Empty)))), dir: Synth, term: Let("red", Ret(Var("color_red")), Let("green", Ret(Var("color_green")), Let("gold", Ret(Var("color_gold")), Let("triple", Ret(Pair(Var("red"), Pair(Var("green"), Var("gold")))), Let("red_next", App(Force(Var("color_next")), Var("red")), Let("green_next", App(Force(Var("color_next")), Var("green")), Let("gold_next", App(Force(Var("color_next")), Var("gold")), Let("triple_next", Ret(Pair(Var("red_next"), Pair(Var("green_next"), Var("gold_next")))), Ret(Pair(Var("triple"), Var("triple_next"))))))))))), clas: Ok(Cons(Lift(Prod(Prod(IdentDef("Color", Abstract("Color")), Prod(IdentDef("Color", Abstract("Color")), IdentDef("Color", Abstract("Color")))), Prod(IdentDef("Color", Abstract("Color")), Prod(IdentDef("Color", Abstract("Color")), IdentDef("Color", Abstract("Color")))))), WR(Empty, Empty))), rule: Let("red", Der { ctx: Var(Var(Var(Var(Def(Empty, "Color", Type(Abstract("Color"))), "color_red", IdentDef("Color", Abstract("Color"))), "color_green", IdentDef("Color", Abstract("Color"))), "color_gold", IdentDef("Color", Abstract("Color"))), "color_next", Thk(Empty, Cons(Arrow(IdentDef("Color", Abstract("Color")), Cons(Lift(IdentDef("Color", Abstract("Color"))), WR(Empty, Empty))), WR(Empty, Empty)))), dir: Synth, term: Ret(Var("color_red")), clas: Ok(Cons(Lift(IdentDef("Color", Abstract("Color"))), WR(Empty, Empty))), rule: Ret(Der { ctx: Var(Var(Var(Var(Def(Empty, "Color", Type(Abstract("Color"))), "color_red", IdentDef("Color", Abstract("Color"))), "color_green", IdentDef("Color", Abstract("Color"))), "color_gold", IdentDef("Color", Abstract("Color"))), "color_next", Thk(Empty, Cons(Arrow(IdentDef("Color", Abstract("Color")), Cons(Lift(IdentDef("Color", Abstract("Color"))), WR(Empty, Empty))), WR(Empty, Empty)))), dir: Synth, term: Var("color_red"), clas: Ok(IdentDef("Color", Abstract("Color"))), rule: Var("color_red"), vis: DerVis { tmfam: "Val", local_err: false } }), vis: DerVis { tmfam: "Exp", local_err: false } }, Der { ctx: Var(Var(Var(Var(Var(Def(Empty, "Color", Type(Abstract("Color"))), "color_red", IdentDef("Color", Abstract("Color"))), "color_green", IdentDef("Color", Abstract("Color"))), "color_gold", IdentDef("Color", Abstract("Color"))), "color_next", Thk(Empty, Cons(Arrow(IdentDef("Color", Abstract("Color")), Cons(Lift(IdentDef("Color", Abstract("Color"))), WR(Empty, Empty))), WR(Empty, Empty)))), "red", IdentDef("Color", Abstract("Color"))), dir: Synth, term: Let("green", Ret(Var("color_green")), Let("gold", Ret(Var("color_gold")), Let("triple", Ret(Pair(Var("red"), Pair(Var("green"), Var("gold")))), Let("red_next", App(Force(Var("color_next")), Var("red")), Let("green_next", App(Force(Var("color_next")), Var("green")), Let("gold_next", App(Force(Var("color_next")), Var("gold")), Let("triple_next", Ret(Pair(Var("red_next"), Pair(Var("green_next"), Var("gold_next")))), Ret(Pair(Var("triple"), Var("triple_next")))))))))), clas: Ok(Cons(Lift(Prod(Prod(IdentDef("Color", Abstract("Color")), Prod(IdentDef("Color", Abstract("Color")), IdentDef("Color", Abstract("Color")))), Prod(IdentDef("Color", Abstract("Color")), Prod(IdentDef("Color", Abstract("Color")), IdentDef("Color", Abstract("Color")))))), WR(Empty, Empty))), rule: Let("green", Der { ctx: Var(Var(Var(Var(Var(Def(Empty, "Color", Type(Abstract("Color"))), "color_red", IdentDef("Color", Abstract("Color"))), "color_green", IdentDef("Color", Abstract("Color"))), "color_gold", IdentDef("Color", Abstract("Color"))), "color_next", Thk(Empty, Cons(Arrow(IdentDef("Color", Abstract("Color")), Cons(Lift(IdentDef("Color", Abstract("Color"))), WR(Empty, Empty))), WR(Empty, Empty)))), "red", IdentDef("Color", Abstract("Color"))), dir: Synth, term: Ret(Var("color_green")), clas: Ok(Cons(Lift(IdentDef("Color", Abstract("Color"))), WR(Empty, Empty))), rule: Ret(Der { ctx: Var(Var(Var(Var(Var(Def(Empty, "Color", Type(Abstract("Color"))), "color_red", IdentDef("Color", Abstract("Color"))), "color_green", IdentDef("Color", Abstract("Color"))), "color_gold", IdentDef("Color", Abstract("Color"))), "color_next", Thk(Empty, Cons(Arrow(IdentDef("Color", Abstract("Color")), Cons(Lift(IdentDef("Color", Abstract("Color"))), WR(Empty, Empty))), WR(Empty, Empty)))), "red", IdentDef("Color", Abstract("Color"))), dir: Synth, term: Var("color_green"), clas: Ok(IdentDef("Color", Abstract("Color"))), rule: Var("color_green"), vis: DerVis { tmfam: "Val", local_err: false } }), vis: DerVis { tmfam: "Exp", local_err: false } }, Der { ctx: Var(Var(Var(Var(Var(Var(Def(Empty, "Color", Type(Abstract("Color"))), "color_red", IdentDef("Color", Abstract("Color"))), "color_green", IdentDef("Color", Abstract("Color"))), "color_gold", IdentDef("Color", Abstract("Color"))), "color_next", Thk(Empty, Cons(Arrow(IdentDef("Color", Abstract("Color")), Cons(Lift(IdentDef("Color", Abstract("Color"))), WR(Empty, Empty))), WR(Empty, Empty)))), "red", IdentDef("Color", Abstract("Color"))), "green", IdentDef("Color", Abstract("Color"))), dir: Synth, term: Let("gold", Ret(Var("color_gold")), Let("triple", Ret(Pair(Var("red"), Pair(Var("green"), Var("gold")))), Let("red_next", App(Force(Var("color_next")), Var("red")), Let("green_next", App(Force(Var("color_next")), Var("green")), Let("gold_next", App(Force(Var("color_next")), Var("gold")), Let("triple_next", Ret(Pair(Var("red_next"), Pair(Var("green_next"), Var("gold_next")))), Ret(Pair(Var("triple"), Var("triple_next"))))))))), clas: Ok(Cons(Lift(Prod(Prod(IdentDef("Color", Abstract("Color")), Prod(IdentDef("Color", Abstract("Color")), IdentDef("Color", Abstract("Color")))), Prod(IdentDef("Color", Abstract("Color")), Prod(IdentDef("Color", Abstract("Color")), IdentDef("Color", Abstract("Color")))))), WR(Empty, Empty))), rule: Let("gold", Der { ctx: Var(Var(Var(Var(Var(Var(Def(Empty, "Color", Type(Abstract("Color"))), "color_red", IdentDef("Color", Abstract("Color"))), "color_green", IdentDef("Color", Abstract("Color"))), "color_gold", IdentDef("Color", Abstract("Color"))), "color_next", Thk(Empty, Cons(Arrow(IdentDef("Color", Abstract("Color")), Cons(Lift(IdentDef("Color", Abstract("Color"))), WR(Empty, Empty))), WR(Empty, Empty)))), "red", IdentDef("Color", Abstract("Color"))), "green", IdentDef("Color", Abstract("Color"))), dir: Synth, term: Ret(Var("color_gold")), clas: Ok(Cons(Lift(IdentDef("Color", Abstract("Color"))), WR(Empty, Empty))), rule: Ret(Der { ctx: Var(Var(Var(Var(Var(Var(Def(Empty, "Color", Type(Abstract("Color"))), "color_red", IdentDef("Color", Abstract("Color"))), "color_green", IdentDef("Color", Abstract("Color"))), "color_gold", IdentDef("Color", Abstract("Color"))), "color_next", Thk(Empty, Cons(Arrow(IdentDef("Color", Abstract("Color")), Cons(Lift(IdentDef("Color", Abstract("Color"))), WR(Empty, Empty))), WR(Empty, Empty)))), "red", IdentDef("Color", Abstract("Color"))), "green", IdentDef("Color", Abstract("Color"))), dir: Synth, term: Var("color_gold"), clas: Ok(IdentDef("Color", Abstract("Color"))), rule: Var("color_gold"), vis: DerVis { tmfam: "Val", local_err: false } }), vis: DerVis { tmfam: "Exp", local_err: false } }, Der { ctx: Var(Var(Var(Var(Var(Var(Var(Def(Empty, "Color", Type(Abstract("Color"))), "color_red", IdentDef("Color", Abstract("Color"))), "color_green", IdentDef("Color", Abstract("Color"))), "color_gold", IdentDef("Color", Abstract("Color"))), "color_next", Thk(Empty, Cons(Arrow(IdentDef("Color", Abstract("Color")), Cons(Lift(IdentDef("Color", Abstract("Color"))), WR(Empty, Empty))), WR(Empty, Empty)))), "red", IdentDef("Color", Abstract("Color"))), "green", IdentDef("Color", Abstract("Color"))), "gold", IdentDef("Color", Abstract("Color"))), dir: Synth, term: Let("triple", Ret(Pair(Var("red"), Pair(Var("green"), Var("gold")))), Let("red_next", App(Force(Var("color_next")), Var("red")), Let("green_next", App(Force(Var("color_next")), Var("green")), Let("gold_next", App(Force(Var("color_next")), Var("gold")), Let("triple_next", Ret(Pair(Var("red_next"), Pair(Var("green_next"), Var("gold_next")))), Ret(Pair(Var("triple"), Var("triple_next")))))))), clas: Ok(Cons(Lift(Prod(Prod(IdentDef("Color", Abstract("Color")), Prod(IdentDef("Color", Abstract("Color")), IdentDef("Color", Abstract("Color")))), Prod(IdentDef("Color", Abstract("Color")), Prod(IdentDef("Color", Abstract("Color")), IdentDef("Color", Abstract("Color")))))), WR(Empty, Empty))), rule: Let("triple", Der { ctx: Var(Var(Var(Var(Var(Var(Var(Def(Empty, "Color", Type(Abstract("Color"))), "color_red", IdentDef("Color", Abstract("Color"))), "color_green", IdentDef("Color", Abstract("Color"))), "color_gold", IdentDef("Color", Abstract("Color"))), "color_next", Thk(Empty, Cons(Arrow(IdentDef("Color", Abstract("Color")), Cons(Lift(IdentDef("Color", Abstract("Color"))), WR(Empty, Empty))), WR(Empty, Empty)))), "red", IdentDef("Color", Abstract("Color"))), "green", IdentDef("Color", Abstract("Color"))), "gold", IdentDef("Color", Abstract("Color"))), dir: Synth, term: Ret(Pair(Var("red"), Pair(Var("green"), Var("gold")))), clas: Ok(Cons(Lift(Prod(IdentDef("Color", Abstract("Color")), Prod(IdentDef("Color", Abstract("Color")), IdentDef("Color", Abstract("Color"))))), WR(Empty, Empty))), rule: Ret(Der { ctx: Var(Var(Var(Var(Var(Var(Var(Def(Empty, "Color", Type(Abstract("Color"))), "color_red", IdentDef("Color", Abstract("Color"))), "color_green", IdentDef("Color", Abstract("Color"))), "color_gold", IdentDef("Color", Abstract("Color"))), "color_next", Thk(Empty, Cons(Arrow(IdentDef("Color", Abstract("Color")), Cons(Lift(IdentDef("Color", Abstract("Color"))), WR(Empty, Empty))), WR(Empty, Empty)))), "red", IdentDef("Color", Abstract("Color"))), "green", IdentDef("Color", Abstract("Color"))), "gold", IdentDef("Color", Abstract("Color"))), dir: Synth, term: Pair(Var("red"), Pair(Var("green"), Var("gold"))), clas: Ok(Prod(IdentDef("Color", Abstract("Color")), Prod(IdentDef("Color", Abstract("Color")), IdentDef("Color", Abstract("Color"))))), rule: Pair(Der { ctx: Var(Var(Var(Var(Var(Var(Var(Def(Empty, "Color", Type(Abstract("Color"))), "color_red", IdentDef("Color", Abstract("Color"))), "color_green", IdentDef("Color", Abstract("Color"))), "color_gold", IdentDef("Color", Abstract("Color"))), "color_next", Thk(Empty, Cons(Arrow(IdentDef("Color", Abstract("Color")), Cons(Lift(IdentDef("Color", Abstract("Color"))), WR(Empty, Empty))), WR(Empty, Empty)))), "red", IdentDef("Color", Abstract("Color"))), "green", IdentDef("Color", Abstract("Color"))), "gold", IdentDef("Color", Abstract("Color"))), dir: Synth, term: Var("red"), clas: Ok(IdentDef("Color", Abstract("Color"))), rule: Var("red"), vis: DerVis { tmfam: "Val", local_err: false } }, Der { ctx: Var(Var(Var(Var(Var(Var(Var(Def(Empty, "Color", Type(Abstract("Color"))), "color_red", IdentDef("Color", Abstract("Color"))), "color_green", IdentDef("Color", Abstract("Color"))), "color_gold", IdentDef("Color", Abstract("Color"))), "color_next", Thk(Empty, Cons(Arrow(IdentDef("Color", Abstract("Color")), Cons(Lift(IdentDef("Color", Abstract("Color"))), WR(Empty, Empty))), WR(Empty, Empty)))), "red", IdentDef("Color", Abstract("Color"))), "green", IdentDef("Color", Abstract("Color"))), "gold", IdentDef("Color", Abstract("Color"))), dir: Synth, term: Pair(Var("green"), Var("gold")), clas: Ok(Prod(IdentDef("Color", Abstract("Color")), IdentDef("Color", Abstract("Color")))), rule: Pair(Der { ctx: Var(Var(Var(Var(Var(Var(Var(Def(Empty, "Color", Type(Abstract("Color"))), "color_red", IdentDef("Color", Abstract("Color"))), "color_green", IdentDef("Color", Abstract("Color"))), "color_gold", IdentDef("Color", Abstract("Color"))), "color_next", Thk(Empty, Cons(Arrow(IdentDef("Color", Abstract("Color")), Cons(Lift(IdentDef("Color", Abstract("Color"))), WR(Empty, Empty))), WR(Empty, Empty)))), "red", IdentDef("Color", Abstract("Color"))), "green", IdentDef("Color", Abstract("Color"))), "gold", IdentDef("Color", Abstract("Color"))), dir: Synth, term: Var("green"), clas: Ok(IdentDef("Color", Abstract("Color"))), rule: Var("green"), vis: DerVis { tmfam: "Val", local_err: false } }, Der { ctx: Var(Var(Var(Var(Var(Var(Var(Def(Empty, "Color", Type(Abstract("Color"))), "color_red", IdentDef("Color", Abstract("Color"))), "color_green", IdentDef("Color", Abstract("Color"))), "color_gold", IdentDef("Color", Abstract("Color"))), "color_next", Thk(Empty, Cons(Arrow(IdentDef("Color", Abstract("Color")), Cons(Lift(IdentDef("Color", Abstract("Color"))), WR(Empty, Empty))), WR(Empty, Empty)))), "red", IdentDef("Color", Abstract("Color"))), "green", IdentDef("Color", Abstract("Color"))), "gold", IdentDef("Color", Abstract("Color"))), dir: Synth, term: Var("gold"), clas: Ok(IdentDef("Color", Abstract("Color"))), rule: Var("gold"), vis: DerVis { tmfam: "Val", local_err: false } }), vis: DerVis { tmfam: "Val", local_err: false } }), vis: DerVis { tmfam: "Val", local_err: false } }), vis: DerVis { tmfam: "Exp", local_err: false } }, Der { ctx: Var(Var(Var(Var(Var(Var(Var(Var(Def(Empty, "Color", Type(Abstract("Color"))), "color_red", IdentDef("Color", Abstract("Color"))), "color_green", IdentDef("Color", Abstract("Color"))), "color_gold", IdentDef("Color", Abstract("Color"))), "color_next", Thk(Empty, Cons(Arrow(IdentDef("Color", Abstract("Color")), Cons(Lift(IdentDef("Color", Abstract("Color"))), WR(Empty, Empty))), WR(Empty, Empty)))), "red", IdentDef("Color", Abstract("Color"))), "green", IdentDef("Color", Abstract("Color"))), "gold", IdentDef("Color", Abstract("Color"))), "triple", Prod(IdentDef("Color", Abstract("Color")), Prod(IdentDef("Color", Abstract("Color")), IdentDef("Color", Abstract("Color"))))), dir: Synth, term: Let("red_next", App(Force(Var("color_next")), Var("red")), Let("green_next", App(Force(Var("color_next")), Var("green")), Let("gold_next", App(Force(Var("color_next")), Var("gold")), Let("triple_next", Ret(Pair(Var("red_next"), Pair(Var("green_next"), Var("gold_next")))), Ret(Pair(Var("triple"), Var("triple_next"))))))), clas: Ok(Cons(Lift(Prod(Prod(IdentDef("Color", Abstract("Color")), Prod(IdentDef("Color", Abstract("Color")), IdentDef("Color", Abstract("Color")))), Prod(IdentDef("Color", Abstract("Color")), Prod(IdentDef("Color", Abstract("Color")), IdentDef("Color", Abstract("Color")))))), WR(Empty, Empty))), rule: Let("red_next", Der { ctx: Var(Var(Var(Var(Var(Var(Var(Var(Def(Empty, "Color", Type(Abstract("Color"))), "color_red", IdentDef("Color", Abstract("Color"))), "color_green", IdentDef("Color", Abstract("Color"))), "color_gold", IdentDef("Color", Abstract("Color"))), "color_next", Thk(Empty, Cons(Arrow(IdentDef("Color", Abstract("Color")), Cons(Lift(IdentDef("Color", Abstract("Color"))), WR(Empty, Empty))), WR(Empty, Empty)))), "red", IdentDef("Color", Abstract("Color"))), "green", IdentDef("Color", Abstract("Color"))), "gold", IdentDef("Color", Abstract("Color"))), "triple", Prod(IdentDef("Color", Abstract("Color")), Prod(IdentDef("Color", Abstract("Color")), IdentDef("Color", Abstract("Color"))))), dir: Synth, term: App(Force(Var("color_next")), Var("red")), clas: Ok(Cons(Lift(IdentDef("Color", Abstract("Color"))), WR(Empty, Empty))), rule: App(Der { ctx: Var(Var(Var(Var(Var(Var(Var(Var(Def(Empty, "Color", Type(Abstract("Color"))), "color_red", IdentDef("Color", Abstract("Color"))), "color_green", IdentDef("Color", Abstract("Color"))), "color_gold", IdentDef("Color", Abstract("Color"))), "color_next", Thk(Empty, Cons(Arrow(IdentDef("Color", Abstract("Color")), Cons(Lift(IdentDef("Color", Abstract("Color"))), WR(Empty, Empty))), WR(Empty, Empty)))), "red", IdentDef("Color", Abstract("Color"))), "green", IdentDef("Color", Abstract("Color"))), "gold", IdentDef("Color", Abstract("Color"))), "triple", Prod(IdentDef("Color", Abstract("Color")), Prod(IdentDef("Color", Abstract("Color")), IdentDef("Color", Abstract("Color"))))), dir: Synth, term: Force(Var("color_next")), clas: Ok(Cons(Arrow(IdentDef("Color", Abstract("Color")), Cons(Lift(IdentDef("Color", Abstract("Color"))), WR(Empty, Empty))), WR(Empty, Empty))), rule: Force(Der { ctx: Var(Var(Var(Var(Var(Var(Var(Var(Def(Empty, "Color", Type(Abstract("Color"))), "color_red", IdentDef("Color", Abstract("Color"))), "color_green", IdentDef("Color", Abstract("Color"))), "color_gold", IdentDef("Color", Abstract("Color"))), "color_next", Thk(Empty, Cons(Arrow(IdentDef("Color", Abstract("Color")), Cons(Lift(IdentDef("Color", Abstract("Color"))), WR(Empty, Empty))), WR(Empty, Empty)))), "red", IdentDef("Color", Abstract("Color"))), "green", IdentDef("Color", Abstract("Color"))), "gold", IdentDef("Color", Abstract("Color"))), "triple", Prod(IdentDef("Color", Abstract("Color")), Prod(IdentDef("Color", Abstract("Color")), IdentDef("Color", Abstract("Color"))))), dir: Synth, term: Var("color_next"), clas: Ok(Thk(Empty, Cons(Arrow(IdentDef("Color", Abstract("Color")), Cons(Lift(IdentDef("Color", Abstract("Color"))), WR(Empty, Empty))), WR(Empty, Empty)))), rule: Var("color_next"), vis: DerVis { tmfam: "Val", local_err: false } }), vis: DerVis { tmfam: "Exp", local_err: false } }, Der { ctx: Var(Var(Var(Var(Var(Var(Var(Var(Def(Empty, "Color", Type(Abstract("Color"))), "color_red", IdentDef("Color", Abstract("Color"))), "color_green", IdentDef("Color", Abstract("Color"))), "color_gold", IdentDef("Color", Abstract("Color"))), "color_next", Thk(Empty, Cons(Arrow(IdentDef("Color", Abstract("Color")), Cons(Lift(IdentDef("Color", Abstract("Color"))), WR(Empty, Empty))), WR(Empty, Empty)))), "red", IdentDef("Color", Abstract("Color"))), "green", IdentDef("Color", Abstract("Color"))), "gold", IdentDef("Color", Abstract("Color"))), "triple", Prod(IdentDef("Color", Abstract("Color")), Prod(IdentDef("Color", Abstract("Color")), IdentDef("Color", Abstract("Color"))))), dir: Check(IdentDef("Color", Abstract("Color"))), term: Var("red"), clas: Ok(IdentDef("Color", Abstract("Color"))), rule: Var("red"), vis: DerVis { tmfam: "Val", local_err: false } }), vis: DerVis { tmfam: "Exp", local_err: false } }, Der { ctx: Var(Var(Var(Var(Var(Var(Var(Var(Var(Def(Empty, "Color", Type(Abstract("Color"))), "color_red", IdentDef("Color", Abstract("Color"))), "color_green", IdentDef("Color", Abstract("Color"))), "color_gold", IdentDef("Color", Abstract("Color"))), "color_next", Thk(Empty, Cons(Arrow(IdentDef("Color", Abstract("Color")), Cons(Lift(IdentDef("Color", Abstract("Color"))), WR(Empty, Empty))), WR(Empty, Empty)))), "red", IdentDef("Color", Abstract("Color"))), "green", IdentDef("Color", Abstract("Color"))), "gold", IdentDef("Color", Abstract("Color"))), "triple", Prod(IdentDef("Color", Abstract("Color")), Prod(IdentDef("Color", Abstract("Color")), IdentDef("Color", Abstract("Color"))))), "red_next", IdentDef("Color", Abstract("Color"))), dir: Synth, term: Let("green_next", App(Force(Var("color_next")), Var("green")), Let("gold_next", App(Force(Var("color_next")), Var("gold")), Let("triple_next", Ret(Pair(Var("red_next"), Pair(Var("green_next"), Var("gold_next")))), Ret(Pair(Var("triple"), Var("triple_next")))))), clas: Ok(Cons(Lift(Prod(Prod(IdentDef("Color", Abstract("Color")), Prod(IdentDef("Color", Abstract("Color")), IdentDef("Color", Abstract("Color")))), Prod(IdentDef("Color", Abstract("Color")), Prod(IdentDef("Color", Abstract("Color")), IdentDef("Color", Abstract("Color")))))), WR(Empty, Empty))), rule: Let("green_next", Der { ctx: Var(Var(Var(Var(Var(Var(Var(Var(Var(Def(Empty, "Color", Type(Abstract("Color"))), "color_red", IdentDef("Color", Abstract("Color"))), "color_green", IdentDef("Color", Abstract("Color"))), "color_gold", IdentDef("Color", Abstract("Color"))), "color_next", Thk(Empty, Cons(Arrow(IdentDef("Color", Abstract("Color")), Cons(Lift(IdentDef("Color", Abstract("Color"))), WR(Empty, Empty))), WR(Empty, Empty)))), "red", IdentDef("Color", Abstract("Color"))), "green", IdentDef("Color", Abstract("Color"))), "gold", IdentDef("Color", Abstract("Color"))), "triple", Prod(IdentDef("Color", Abstract("Color")), Prod(IdentDef("Color", Abstract("Color")), IdentDef("Color", Abstract("Color"))))), "red_next", IdentDef("Color", Abstract("Color"))), dir: Synth, term: App(Force(Var("color_next")), Var("green")), clas: Ok(Cons(Lift(IdentDef("Color", Abstract("Color"))), WR(Empty, Empty))), rule: App(Der { ctx: Var(Var(Var(Var(Var(Var(Var(Var(Var(Def(Empty, "Color", Type(Abstract("Color"))), "color_red", IdentDef("Color", Abstract("Color"))), "color_green", IdentDef("Color", Abstract("Color"))), "color_gold", IdentDef("Color", Abstract("Color"))), "color_next", Thk(Empty, Cons(Arrow(IdentDef("Color", Abstract("Color")), Cons(Lift(IdentDef("Color", Abstract("Color"))), WR(Empty, Empty))), WR(Empty, Empty)))), "red", IdentDef("Color", Abstract("Color"))), "green", IdentDef("Color", Abstract("Color"))), "gold", IdentDef("Color", Abstract("Color"))), "triple", Prod(IdentDef("Color", Abstract("Color")), Prod(IdentDef("Color", Abstract("Color")), IdentDef("Color", Abstract("Color"))))), "red_next", IdentDef("Color", Abstract("Color"))), dir: Synth, term: Force(Var("color_next")), clas: Ok(Cons(Arrow(IdentDef("Color", Abstract("Color")), Cons(Lift(IdentDef("Color", Abstract("Color"))), WR(Empty, Empty))), WR(Empty, Empty))), rule: Force(Der { ctx: Var(Var(Var(Var(Var(Var(Var(Var(Var(Def(Empty, "Color", Type(Abstract("Color"))), "color_red", IdentDef("Color", Abstract("Color"))), "color_green", IdentDef("Color", Abstract("Color"))), "color_gold", IdentDef("Color", Abstract("Color"))), "color_next", Thk(Empty, Cons(Arrow(IdentDef("Color", Abstract("Color")), Cons(Lift(IdentDef("Color", Abstract("Color"))), WR(Empty, Empty))), WR(Empty, Empty)))), "red", IdentDef("Color", Abstract("Color"))), "green", IdentDef("Color", Abstract("Color"))), "gold", IdentDef("Color", Abstract("Color"))), "triple", Prod(IdentDef("Color", Abstract("Color")), Prod(IdentDef("Color", Abstract("Color")), IdentDef("Color", Abstract("Color"))))), "red_next", IdentDef("Color", Abstract("Color"))), dir: Synth, term: Var("color_next"), clas: Ok(Thk(Empty, Cons(Arrow(IdentDef("Color", Abstract("Color")), Cons(Lift(IdentDef("Color", Abstract("Color"))), WR(Empty, Empty))), WR(Empty, Empty)))), rule: Var("color_next"), vis: DerVis { tmfam: "Val", local_err: false } }), vis: DerVis { tmfam: "Exp", local_err: false } }, Der { ctx: Var(Var(Var(Var(Var(Var(Var(Var(Var(Def(Empty, "Color", Type(Abstract("Color"))), "color_red", IdentDef("Color", Abstract("Color"))), "color_green", IdentDef("Color", Abstract("Color"))), "color_gold", IdentDef("Color", Abstract("Color"))), "color_next", Thk(Empty, Cons(Arrow(IdentDef("Color", Abstract("Color")), Cons(Lift(IdentDef("Color", Abstract("Color"))), WR(Empty, Empty))), WR(Empty, Empty)))), "red", IdentDef("Color", Abstract("Color"))), "green", IdentDef("Color", Abstract("Color"))), "gold", IdentDef("Color", Abstract("Color"))), "triple", Prod(IdentDef("Color", Abstract("Color")), Prod(IdentDef("Color", Abstract("Color")), IdentDef("Color", Abstract("Color"))))), "red_next", IdentDef("Color", Abstract("Color"))), dir: Check(IdentDef("Color", Abstract("Color"))), term: Var("green"), clas: Ok(IdentDef("Color", Abstract("Color"))), rule: Var("green"), vis: DerVis { tmfam: "Val", local_err: false } }), vis: DerVis { tmfam: "Exp", local_err: false } }, Der { ctx: Var(Var(Var(Var(Var(Var(Var(Var(Var(Var(Def(Empty, "Color", Type(Abstract("Color"))), "color_red", IdentDef("Color", Abstract("Color"))), "color_green", IdentDef("Color", Abstract("Color"))), "color_gold", IdentDef("Color", Abstract("Color"))), "color_next", Thk(Empty, Cons(Arrow(IdentDef("Color", Abstract("Color")), Cons(Lift(IdentDef("Color", Abstract("Color"))), WR(Empty, Empty))), WR(Empty, Empty)))), "red", IdentDef("Color", Abstract("Color"))), "green", IdentDef("Color", Abstract("Color"))), "gold", IdentDef("Color", Abstract("Color"))), "triple", Prod(IdentDef("Color", Abstract("Color")), Prod(IdentDef("Color", Abstract("Color")), IdentDef("Color", Abstract("Color"))))), "red_next", IdentDef("Color", Abstract("Color"))), "green_next", IdentDef("Color", Abstract("Color"))), dir: Synth, term: Let("gold_next", App(Force(Var("color_next")), Var("gold")), Let("triple_next", Ret(Pair(Var("red_next"), Pair(Var("green_next"), Var("gold_next")))), Ret(Pair(Var("triple"), Var("triple_next"))))), clas: Ok(Cons(Lift(Prod(Prod(IdentDef("Color", Abstract("Color")), Prod(IdentDef("Color", Abstract("Color")), IdentDef("Color", Abstract("Color")))), Prod(IdentDef("Color", Abstract("Color")), Prod(IdentDef("Color", Abstract("Color")), IdentDef("Color", Abstract("Color")))))), WR(Empty, Empty))), rule: Let("gold_next", Der { ctx: Var(Var(Var(Var(Var(Var(Var(Var(Var(Var(Def(Empty, "Color", Type(Abstract("Color"))), "color_red", IdentDef("Color", Abstract("Color"))), "color_green", IdentDef("Color", Abstract("Color"))), "color_gold", IdentDef("Color", Abstract("Color"))), "color_next", Thk(Empty, Cons(Arrow(IdentDef("Color", Abstract("Color")), Cons(Lift(IdentDef("Color", Abstract("Color"))), WR(Empty, Empty))), WR(Empty, Empty)))), "red", IdentDef("Color", Abstract("Color"))), "green", IdentDef("Color", Abstract("Color"))), "gold", IdentDef("Color", Abstract("Color"))), "triple", Prod(IdentDef("Color", Abstract("Color")), Prod(IdentDef("Color", Abstract("Color")), IdentDef("Color", Abstract("Color"))))), "red_next", IdentDef("Color", Abstract("Color"))), "green_next", IdentDef("Color", Abstract("Color"))), dir: Synth, term: App(Force(Var("color_next")), Var("gold")), clas: Ok(Cons(Lift(IdentDef("Color", Abstract("Color"))), WR(Empty, Empty))), rule: App(Der { ctx: Var(Var(Var(Var(Var(Var(Var(Var(Var(Var(Def(Empty, "Color", Type(Abstract("Color"))), "color_red", IdentDef("Color", Abstract("Color"))), "color_green", IdentDef("Color", Abstract("Color"))), "color_gold", IdentDef("Color", Abstract("Color"))), "color_next", Thk(Empty, Cons(Arrow(IdentDef("Color", Abstract("Color")), Cons(Lift(IdentDef("Color", Abstract("Color"))), WR(Empty, Empty))), WR(Empty, Empty)))), "red", IdentDef("Color", Abstract("Color"))), "green", IdentDef("Color", Abstract("Color"))), "gold", IdentDef("Color", Abstract("Color"))), "triple", Prod(IdentDef("Color", Abstract("Color")), Prod(IdentDef("Color", Abstract("Color")), IdentDef("Color", Abstract("Color"))))), "red_next", IdentDef("Color", Abstract("Color"))), "green_next", IdentDef("Color", Abstract("Color"))), dir: Synth, term: Force(Var("color_next")), clas: Ok(Cons(Arrow(IdentDef("Color", Abstract("Color")), Cons(Lift(IdentDef("Color", Abstract("Color"))), WR(Empty, Empty))), WR(Empty, Empty))), rule: Force(Der { ctx: Var(Var(Var(Var(Var(Var(Var(Var(Var(Var(Def(Empty, "Color", Type(Abstract("Color"))), "color_red", IdentDef("Color", Abstract("Color"))), "color_green", IdentDef("Color", Abstract("Color"))), "color_gold", IdentDef("Color", Abstract("Color"))), "color_next", Thk(Empty, Cons(Arrow(IdentDef("Color", Abstract("Color")), Cons(Lift(IdentDef("Color", Abstract("Color"))), WR(Empty, Empty))), WR(Empty, Empty)))), "red", IdentDef("Color", Abstract("Color"))), "green", IdentDef("Color", Abstract("Color"))), "gold", IdentDef("Color", Abstract("Color"))), "triple", Prod(IdentDef("Color", Abstract("Color")), Prod(IdentDef("Color", Abstract("Color")), IdentDef("Color", Abstract("Color"))))), "red_next", IdentDef("Color", Abstract("Color"))), "green_next", IdentDef("Color", Abstract("Color"))), dir: Synth, term: Var("color_next"), clas: Ok(Thk(Empty, Cons(Arrow(IdentDef("Color", Abstract("Color")), Cons(Lift(IdentDef("Color", Abstract("Color"))), WR(Empty, Empty))), WR(Empty, Empty)))), rule: Var("color_next"), vis: DerVis { tmfam: "Val", local_err: false } }), vis: DerVis { tmfam: "Exp", local_err: false } }, Der { ctx: Var(Var(Var(Var(Var(Var(Var(Var(Var(Var(Def(Empty, "Color", Type(Abstract("Color"))), "color_red", IdentDef("Color", Abstract("Color"))), "color_green", IdentDef("Color", Abstract("Color"))), "color_gold", IdentDef("Color", Abstract("Color"))), "color_next", Thk(Empty, Cons(Arrow(IdentDef("Color", Abstract("Color")), Cons(Lift(IdentDef("Color", Abstract("Color"))), WR(Empty, Empty))), WR(Empty, Empty)))), "red", IdentDef("Color", Abstract("Color"))), "green", IdentDef("Color", Abstract("Color"))), "gold", IdentDef("Color", Abstract("Color"))), "triple", Prod(IdentDef("Color", Abstract("Color")), Prod(IdentDef("Color", Abstract("Color")), IdentDef("Color", Abstract("Color"))))), "red_next", IdentDef("Color", Abstract("Color"))), "green_next", IdentDef("Color", Abstract("Color"))), dir: Check(IdentDef("Color", Abstract("Color"))), term: Var("gold"), clas: Ok(IdentDef("Color", Abstract("Color"))), rule: Var("gold"), vis: DerVis { tmfam: "Val", local_err: false } }), vis: DerVis { tmfam: "Exp", local_err: false } }, Der { ctx: Var(Var(Var(Var(Var(Var(Var(Var(Var(Var(Var(Def(Empty, "Color", Type(Abstract("Color"))), "color_red", IdentDef("Color", Abstract("Color"))), "color_green", IdentDef("Color", Abstract("Color"))), "color_gold", IdentDef("Color", Abstract("Color"))), "color_next", Thk(Empty, Cons(Arrow(IdentDef("Color", Abstract("Color")), Cons(Lift(IdentDef("Color", Abstract("Color"))), WR(Empty, Empty))), WR(Empty, Empty)))), "red", IdentDef("Color", Abstract("Color"))), "green", IdentDef("Color", Abstract("Color"))), "gold", IdentDef("Color", Abstract("Color"))), "triple", Prod(IdentDef("Color", Abstract("Color")), Prod(IdentDef("Color", Abstract("Color")), IdentDef("Color", Abstract("Color"))))), "red_next", IdentDef("Color", Abstract("Color"))), "green_next", IdentDef("Color", Abstract("Color"))), "gold_next", IdentDef("Color", Abstract("Color"))), dir: Synth, term: Let("triple_next", Ret(Pair(Var("red_next"), Pair(Var("green_next"), Var("gold_next")))), Ret(Pair(Var("triple"), Var("triple_next")))), clas: Ok(Cons(Lift(Prod(Prod(IdentDef("Color", Abstract("Color")), Prod(IdentDef("Color", Abstract("Color")), IdentDef("Color", Abstract("Color")))), Prod(IdentDef("Color", Abstract("Color")), Prod(IdentDef("Color", Abstract("Color")), IdentDef("Color", Abstract("Color")))))), WR(Empty, Empty))), rule: Let("triple_next", Der { ctx: Var(Var(Var(Var(Var(Var(Var(Var(Var(Var(Var(Def(Empty, "Color", Type(Abstract("Color"))), "color_red", IdentDef("Color", Abstract("Color"))), "color_green", IdentDef("Color", Abstract("Color"))), "color_gold", IdentDef("Color", Abstract("Color"))), "color_next", Thk(Empty, Cons(Arrow(IdentDef("Color", Abstract("Color")), Cons(Lift(IdentDef("Color", Abstract("Color"))), WR(Empty, Empty))), WR(Empty, Empty)))), "red", IdentDef("Color", Abstract("Color"))), "green", IdentDef("Color", Abstract("Color"))), "gold", IdentDef("Color", Abstract("Color"))), "triple", Prod(IdentDef("Color", Abstract("Color")), Prod(IdentDef("Color", Abstract("Color")), IdentDef("Color", Abstract("Color"))))), "red_next", IdentDef("Color", Abstract("Color"))), "green_next", IdentDef("Color", Abstract("Color"))), "gold_next", IdentDef("Color", Abstract("Color"))), dir: Synth, term: Ret(Pair(Var("red_next"), Pair(Var("green_next"), Var("gold_next")))), clas: Ok(Cons(Lift(Prod(IdentDef("Color", Abstract("Color")), Prod(IdentDef("Color", Abstract("Color")), IdentDef("Color", Abstract("Color"))))), WR(Empty, Empty))), rule: Ret(Der { ctx: Var(Var(Var(Var(Var(Var(Var(Var(Var(Var(Var(Def(Empty, "Color", Type(Abstract("Color"))), "color_red", IdentDef("Color", Abstract("Color"))), "color_green", IdentDef("Color", Abstract("Color"))), "color_gold", IdentDef("Color", Abstract("Color"))), "color_next", Thk(Empty, Cons(Arrow(IdentDef("Color", Abstract("Color")), Cons(Lift(IdentDef("Color", Abstract("Color"))), WR(Empty, Empty))), WR(Empty, Empty)))), "red", IdentDef("Color", Abstract("Color"))), "green", IdentDef("Color", Abstract("Color"))), "gold", IdentDef("Color", Abstract("Color"))), "triple", Prod(IdentDef("Color", Abstract("Color")), Prod(IdentDef("Color", Abstract("Color")), IdentDef("Color", Abstract("Color"))))), "red_next", IdentDef("Color", Abstract("Color"))), "green_next", IdentDef("Color", Abstract("Color"))), "gold_next", IdentDef("Color", Abstract("Color"))), dir: Synth, term: Pair(Var("red_next"), Pair(Var("green_next"), Var("gold_next"))), clas: Ok(Prod(IdentDef("Color", Abstract("Color")), Prod(IdentDef("Color", Abstract("Color")), IdentDef("Color", Abstract("Color"))))), rule: Pair(Der { ctx: Var(Var(Var(Var(Var(Var(Var(Var(Var(Var(Var(Def(Empty, "Color", Type(Abstract("Color"))), "color_red", IdentDef("Color", Abstract("Color"))), "color_green", IdentDef("Color", Abstract("Color"))), "color_gold", IdentDef("Color", Abstract("Color"))), "color_next", Thk(Empty, Cons(Arrow(IdentDef("Color", Abstract("Color")), Cons(Lift(IdentDef("Color", Abstract("Color"))), WR(Empty, Empty))), WR(Empty, Empty)))), "red", IdentDef("Color", Abstract("Color"))), "green", IdentDef("Color", Abstract("Color"))), "gold", IdentDef("Color", Abstract("Color"))), "triple", Prod(IdentDef("Color", Abstract("Color")), Prod(IdentDef("Color", Abstract("Color")), IdentDef("Color", Abstract("Color"))))), "red_next", IdentDef("Color", Abstract("Color"))), "green_next", IdentDef("Color", Abstract("Color"))), "gold_next", IdentDef("Color", Abstract("Color"))), dir: Synth, term: Var("red_next"), clas: Ok(IdentDef("Color", Abstract("Color"))), rule: Var("red_next"), vis: DerVis { tmfam: "Val", local_err: false } }, Der { ctx: Var(Var(Var(Var(Var(Var(Var(Var(Var(Var(Var(Def(Empty, "Color", Type(Abstract("Color"))), "color_red", IdentDef("Color", Abstract("Color"))), "color_green", IdentDef("Color", Abstract("Color"))), "color_gold", IdentDef("Color", Abstract("Color"))), "color_next", Thk(Empty, Cons(Arrow(IdentDef("Color", Abstract("Color")), Cons(Lift(IdentDef("Color", Abstract("Color"))), WR(Empty, Empty))), WR(Empty, Empty)))), "red", IdentDef("Color", Abstract("Color"))), "green", IdentDef("Color", Abstract("Color"))), "gold", IdentDef("Color", Abstract("Color"))), "triple", Prod(IdentDef("Color", Abstract("Color")), Prod(IdentDef("Color", Abstract("Color")), IdentDef("Color", Abstract("Color"))))), "red_next", IdentDef("Color", Abstract("Color"))), "green_next", IdentDef("Color", Abstract("Color"))), "gold_next", IdentDef("Color", Abstract("Color"))), dir: Synth, term: Pair(Var("green_next"), Var("gold_next")), clas: Ok(Prod(IdentDef("Color", Abstract("Color")), IdentDef("Color", Abstract("Color")))), rule: Pair(Der { ctx: Var(Var(Var(Var(Var(Var(Var(Var(Var(Var(Var(Def(Empty, "Color", Type(Abstract("Color"))), "color_red", IdentDef("Color", Abstract("Color"))), "color_green", IdentDef("Color", Abstract("Color"))), "color_gold", IdentDef("Color", Abstract("Color"))), "color_next", Thk(Empty, Cons(Arrow(IdentDef("Color", Abstract("Color")), Cons(Lift(IdentDef("Color", Abstract("Color"))), WR(Empty, Empty))), WR(Empty, Empty)))), "red", IdentDef("Color", Abstract("Color"))), "green", IdentDef("Color", Abstract("Color"))), "gold", IdentDef("Color", Abstract("Color"))), "triple", Prod(IdentDef("Color", Abstract("Color")), Prod(IdentDef("Color", Abstract("Color")), IdentDef("Color", Abstract("Color"))))), "red_next", IdentDef("Color", Abstract("Color"))), "green_next", IdentDef("Color", Abstract("Color"))), "gold_next", IdentDef("Color", Abstract("Color"))), dir: Synth, term: Var("green_next"), clas: Ok(IdentDef("Color", Abstract("Color"))), rule: Var("green_next"), vis: DerVis { tmfam: "Val", local_err: false } }, Der { ctx: Var(Var(Var(Var(Var(Var(Var(Var(Var(Var(Var(Def(Empty, "Color", Type(Abstract("Color"))), "color_red", IdentDef("Color", Abstract("Color"))), "color_green", IdentDef("Color", Abstract("Color"))), "color_gold", IdentDef("Color", Abstract("Color"))), "color_next", Thk(Empty, Cons(Arrow(IdentDef("Color", Abstract("Color")), Cons(Lift(IdentDef("Color", Abstract("Color"))), WR(Empty, Empty))), WR(Empty, Empty)))), "red", IdentDef("Color", Abstract("Color"))), "green", IdentDef("Color", Abstract("Color"))), "gold", IdentDef("Color", Abstract("Color"))), "triple", Prod(IdentDef("Color", Abstract("Color")), Prod(IdentDef("Color", Abstract("Color")), IdentDef("Color", Abstract("Color"))))), "red_next", IdentDef("Color", Abstract("Color"))), "green_next", IdentDef("Color", Abstract("Color"))), "gold_next", IdentDef("Color", Abstract("Color"))), dir: Synth, term: Var("gold_next"), clas: Ok(IdentDef("Color", Abstract("Color"))), rule: Var("gold_next"), vis: DerVis { tmfam: "Val", local_err: false } }), vis: DerVis { tmfam: "Val", local_err: false } }), vis: DerVis { tmfam: "Val", local_err: false } }), vis: DerVis { tmfam: "Exp", local_err: false } }, Der { ctx: Var(Var(Var(Var(Var(Var(Var(Var(Var(Var(Var(Var(Def(Empty, "Color", Type(Abstract("Color"))), "color_red", IdentDef("Color", Abstract("Color"))), "color_green", IdentDef("Color", Abstract("Color"))), "color_gold", IdentDef("Color", Abstract("Color"))), "color_next", Thk(Empty, Cons(Arrow(IdentDef("Color", Abstract("Color")), Cons(Lift(IdentDef("Color", Abstract("Color"))), WR(Empty, Empty))), WR(Empty, Empty)))), "red", IdentDef("Color", Abstract("Color"))), "green", IdentDef("Color", Abstract("Color"))), "gold", IdentDef("Color", Abstract("Color"))), "triple", Prod(IdentDef("Color", Abstract("Color")), Prod(IdentDef("Color", Abstract("Color")), IdentDef("Color", Abstract("Color"))))), "red_next", IdentDef("Color", Abstract("Color"))), "green_next", IdentDef("Color", Abstract("Color"))), "gold_next", IdentDef("Color", Abstract("Color"))), "triple_next", Prod(IdentDef("Color", Abstract("Color")), Prod(IdentDef("Color", Abstract("Color")), IdentDef("Color", Abstract("Color"))))), dir: Synth, term: Ret(Pair(Var("triple"), Var("triple_next"))), clas: Ok(Cons(Lift(Prod(Prod(IdentDef("Color", Abstract("Color")), Prod(IdentDef("Color", Abstract("Color")), IdentDef("Color", Abstract("Color")))), Prod(IdentDef("Color", Abstract("Color")), Prod(IdentDef("Color", Abstract("Color")), IdentDef("Color", Abstract("Color")))))), WR(Empty, Empty))), rule: Ret(Der { ctx: Var(Var(Var(Var(Var(Var(Var(Var(Var(Var(Var(Var(Def(Empty, "Color", Type(Abstract("Color"))), "color_red", IdentDef("Color", Abstract("Color"))), "color_green", IdentDef("Color", Abstract("Color"))), "color_gold", IdentDef("Color", Abstract("Color"))), "color_next", Thk(Empty, Cons(Arrow(IdentDef("Color", Abstract("Color")), Cons(Lift(IdentDef("Color", Abstract("Color"))), WR(Empty, Empty))), WR(Empty, Empty)))), "red", IdentDef("Color", Abstract("Color"))), "green", IdentDef("Color", Abstract("Color"))), "gold", IdentDef("Color", Abstract("Color"))), "triple", Prod(IdentDef("Color", Abstract("Color")), Prod(IdentDef("Color", Abstract("Color")), IdentDef("Color", Abstract("Color"))))), "red_next", IdentDef("Color", Abstract("Color"))), "green_next", IdentDef("Color", Abstract("Color"))), "gold_next", IdentDef("Color", Abstract("Color"))), "triple_next", Prod(IdentDef("Color", Abstract("Color")), Prod(IdentDef("Color", Abstract("Color")), IdentDef("Color", Abstract("Color"))))), dir: Synth, term: Pair(Var("triple"), Var("triple_next")), clas: Ok(Prod(Prod(IdentDef("Color", Abstract("Color")), Prod(IdentDef("Color", Abstract("Color")), IdentDef("Color", Abstract("Color")))), Prod(IdentDef("Color", Abstract("Color")), Prod(IdentDef("Color", Abstract("Color")), IdentDef("Color", Abstract("Color")))))), rule: Pair(Der { ctx: Var(Var(Var(Var(Var(Var(Var(Var(Var(Var(Var(Var(Def(Empty, "Color", Type(Abstract("Color"))), "color_red", IdentDef("Color", Abstract("Color"))), "color_green", IdentDef("Color", Abstract("Color"))), "color_gold", IdentDef("Color", Abstract("Color"))), "color_next", Thk(Empty, Cons(Arrow(IdentDef("Color", Abstract("Color")), Cons(Lift(IdentDef("Color", Abstract("Color"))), WR(Empty, Empty))), WR(Empty, Empty)))), "red", IdentDef("Color", Abstract("Color"))), "green", IdentDef("Color", Abstract("Color"))), "gold", IdentDef("Color", Abstract("Color"))), "triple", Prod(IdentDef("Color", Abstract("Color")), Prod(IdentDef("Color", Abstract("Color")), IdentDef("Color", Abstract("Color"))))), "red_next", IdentDef("Color", Abstract("Color"))), "green_next", IdentDef("Color", Abstract("Color"))), "gold_next", IdentDef("Color", Abstract("Color"))), "triple_next", Prod(IdentDef("Color", Abstract("Color")), Prod(IdentDef("Color", Abstract("Color")), IdentDef("Color", Abstract("Color"))))), dir: Synth, term: Var("triple"), clas: Ok(Prod(IdentDef("Color", Abstract("Color")), Prod(IdentDef("Color", Abstract("Color")), IdentDef("Color", Abstract("Color"))))), rule: Var("triple"), vis: DerVis { tmfam: "Val", local_err: false } }, Der { ctx: Var(Var(Var(Var(Var(Var(Var(Var(Var(Var(Var(Var(Def(Empty, "Color", Type(Abstract("Color"))), "color_red", IdentDef("Color", Abstract("Color"))), "color_green", IdentDef("Color", Abstract("Color"))), "color_gold", IdentDef("Color", Abstract("Color"))), "color_next", Thk(Empty, Cons(Arrow(IdentDef("Color", Abstract("Color")), Cons(Lift(IdentDef("Color", Abstract("Color"))), WR(Empty, Empty))), WR(Empty, Empty)))), "red", IdentDef("Color", Abstract("Color"))), "green", IdentDef("Color", Abstract("Color"))), "gold", IdentDef("Color", Abstract("Color"))), "triple", Prod(IdentDef("Color", Abstract("Color")), Prod(IdentDef("Color", Abstract("Color")), IdentDef("Color", Abstract("Color"))))), "red_next", IdentDef("Color", Abstract("Color"))), "green_next", IdentDef("Color", Abstract("Color"))), "gold_next", IdentDef("Color", Abstract("Color"))), "triple_next", Prod(IdentDef("Color", Abstract("Color")), Prod(IdentDef("Color", Abstract("Color")), IdentDef("Color", Abstract("Color"))))), dir: Synth, term: Var("triple_next"), clas: Ok(Prod(IdentDef("Color", Abstract("Color")), Prod(IdentDef("Color", Abstract("Color")), IdentDef("Color", Abstract("Color"))))), rule: Var("triple_next"), vis: DerVis { tmfam: "Val", local_err: false } }), vis: DerVis { tmfam: "Val", local_err: false } }), vis: DerVis { tmfam: "Exp", local_err: false } }), vis: DerVis { tmfam: "Exp", local_err: false } }), vis: DerVis { tmfam: "Exp", local_err: false } }), vis: DerVis { tmfam: "Exp", local_err: false } }), vis: DerVis { tmfam: "Exp", local_err: false } }), vis: DerVis { tmfam: "Exp", local_err: false } }), vis: DerVis { tmfam: "Exp", local_err: false } }), vis: DerVis { tmfam: "Exp", local_err: false } }), vis: DerVis { tmfam: "Exp", local_err: false } }), vis: DerVis { tmfam: "Exp", local_err: false } }, traces: [] }