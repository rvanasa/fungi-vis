Bundle { input: "let get :\n(Thk [0] foralli (X, Y) : NmSet . 0 Ref [X] Nat -> 0 Ref [Y] Nat ->\n { 0 ; X % Y } F Nat) =\n{ ret thunk # rx . # ry . let x = { get rx } let y = { get ry } ret 0 } ret 0", program: Der { ctx: Empty, dir: Synth, term: Let("get", AnnoC(Ret(ThunkAnon(Lam("rx", Lam("ry", Let("x", Get(Var("rx")), Let("y", Get(Var("ry")), Ret(Nat(0)))))))), Lift(Thk(Empty, ForallIdx("X", NmSet, Tt, ForallIdx("Y", NmSet, Tt, Cons(Arrow(Ref(Var("X"), Ident("Nat")), Cons(Arrow(Ref(Var("Y"), Ident("Nat")), Cons(Lift(Ident("Nat")), WR(Empty, Apart(Var("X"), Var("Y"))))), WR(Empty, Empty))), WR(Empty, Empty))))))), Ret(Nat(0))), clas: Ok(Cons(Lift(Prim(Nat)), WR(Empty, Empty))), rule: Let("get", Der { ctx: Empty, dir: Synth, term: AnnoC(Ret(ThunkAnon(Lam("rx", Lam("ry", Let("x", Get(Var("rx")), Let("y", Get(Var("ry")), Ret(Nat(0)))))))), Lift(Thk(Empty, ForallIdx("X", NmSet, Tt, ForallIdx("Y", NmSet, Tt, Cons(Arrow(Ref(Var("X"), Ident("Nat")), Cons(Arrow(Ref(Var("Y"), Ident("Nat")), Cons(Lift(Ident("Nat")), WR(Empty, Apart(Var("X"), Var("Y"))))), WR(Empty, Empty))), WR(Empty, Empty))))))), clas: Ok(Cons(Lift(Thk(Empty, ForallIdx("X", NmSet, Tt, ForallIdx("Y", NmSet, Tt, Cons(Arrow(Ref(Var("X"), Prim(Nat)), Cons(Arrow(Ref(Var("Y"), Prim(Nat)), Cons(Lift(Prim(Nat)), WR(Empty, Apart(Var("X"), Var("Y"))))), WR(Empty, Empty))), WR(Empty, Empty)))))), WR(Empty, Empty))), rule: AnnoC(Der { ctx: Empty, dir: Check(Cons(Lift(Thk(Empty, ForallIdx("X", NmSet, Tt, ForallIdx("Y", NmSet, Tt, Cons(Arrow(Ref(Var("X"), Prim(Nat)), Cons(Arrow(Ref(Var("Y"), Prim(Nat)), Cons(Lift(Prim(Nat)), WR(Empty, Apart(Var("X"), Var("Y"))))), WR(Empty, Empty))), WR(Empty, Empty)))))), WR(Empty, Empty))), term: Ret(ThunkAnon(Lam("rx", Lam("ry", Let("x", Get(Var("rx")), Let("y", Get(Var("ry")), Ret(Nat(0)))))))), clas: Ok(Cons(Lift(Thk(Empty, ForallIdx("X", NmSet, Tt, ForallIdx("Y", NmSet, Tt, Cons(Arrow(Ref(Var("X"), Prim(Nat)), Cons(Arrow(Ref(Var("Y"), Prim(Nat)), Cons(Lift(Prim(Nat)), WR(Empty, Apart(Var("X"), Var("Y"))))), WR(Empty, Empty))), WR(Empty, Empty)))))), WR(Empty, Empty))), rule: Ret(Der { ctx: Empty, dir: Check(Thk(Empty, ForallIdx("X", NmSet, Tt, ForallIdx("Y", NmSet, Tt, Cons(Arrow(Ref(Var("X"), Prim(Nat)), Cons(Arrow(Ref(Var("Y"), Prim(Nat)), Cons(Lift(Prim(Nat)), WR(Empty, Apart(Var("X"), Var("Y"))))), WR(Empty, Empty))), WR(Empty, Empty)))))), term: ThunkAnon(Lam("rx", Lam("ry", Let("x", Get(Var("rx")), Let("y", Get(Var("ry")), Ret(Nat(0))))))), clas: Ok(Thk(Empty, ForallIdx("X", NmSet, Tt, ForallIdx("Y", NmSet, Tt, Cons(Arrow(Ref(Var("X"), Prim(Nat)), Cons(Arrow(Ref(Var("Y"), Prim(Nat)), Cons(Lift(Prim(Nat)), WR(Empty, Apart(Var("X"), Var("Y"))))), WR(Empty, Empty))), WR(Empty, Empty)))))), rule: ThunkAnon(Der { ctx: Empty, dir: Check(ForallIdx("X", NmSet, Tt, ForallIdx("Y", NmSet, Tt, Cons(Arrow(Ref(Var("X"), Prim(Nat)), Cons(Arrow(Ref(Var("Y"), Prim(Nat)), Cons(Lift(Prim(Nat)), WR(Empty, Apart(Var("X"), Var("Y"))))), WR(Empty, Empty))), WR(Empty, Empty))))), term: Lam("rx", Lam("ry", Let("x", Get(Var("rx")), Let("y", Get(Var("ry")), Ret(Nat(0)))))), clas: Ok(Cons(Arrow(Ref(Var("X"), Prim(Nat)), Cons(Arrow(Ref(Var("Y"), Prim(Nat)), Cons(Lift(Prim(Nat)), WR(Empty, Apart(Var("X"), Var("Y"))))), WR(Empty, Empty))), WR(Empty, Empty))), rule: Lam("rx", Der { ctx: Var(IVar(IVar(Empty, "X", NmSet), "Y", NmSet), "rx", Ref(Var("X"), Prim(Nat))), dir: Check(Cons(Arrow(Ref(Var("Y"), Prim(Nat)), Cons(Lift(Prim(Nat)), WR(Empty, Apart(Var("X"), Var("Y"))))), WR(Empty, Empty))), term: Lam("ry", Let("x", Get(Var("rx")), Let("y", Get(Var("ry")), Ret(Nat(0))))), clas: Ok(Cons(Arrow(Ref(Var("Y"), Prim(Nat)), Cons(Lift(Prim(Nat)), WR(Empty, Apart(Var("X"), Var("Y"))))), WR(Empty, Empty))), rule: Lam("ry", Der { ctx: Var(Var(IVar(IVar(Empty, "X", NmSet), "Y", NmSet), "rx", Ref(Var("X"), Prim(Nat))), "ry", Ref(Var("Y"), Prim(Nat))), dir: Check(Cons(Lift(Prim(Nat)), WR(Empty, Apart(Var("X"), Var("Y"))))), term: Let("x", Get(Var("rx")), Let("y", Get(Var("ry")), Ret(Nat(0)))), clas: Ok(Cons(Lift(Prim(Nat)), WR(Empty, Apart(Var("X"), Var("Y"))))), rule: Let("x", Der { ctx: Var(Var(IVar(IVar(Empty, "X", NmSet), "Y", NmSet), "rx", Ref(Var("X"), Prim(Nat))), "ry", Ref(Var("Y"), Prim(Nat))), dir: Synth, term: Get(Var("rx")), clas: Ok(Cons(Lift(Prim(Nat)), WR(Empty, Var("X")))), rule: Get(Der { ctx: Var(Var(IVar(IVar(Empty, "X", NmSet), "Y", NmSet), "rx", Ref(Var("X"), Prim(Nat))), "ry", Ref(Var("Y"), Prim(Nat))), dir: Synth, term: Var("rx"), clas: Ok(Ref(Var("X"), Prim(Nat))), rule: Var("rx"), vis: DerVis { tmfam: "Val", local_err: false } }), vis: DerVis { tmfam: "Exp", local_err: false } }, Der { ctx: Var(Var(Var(IVar(IVar(Empty, "X", NmSet), "Y", NmSet), "rx", Ref(Var("X"), Prim(Nat))), "ry", Ref(Var("Y"), Prim(Nat))), "x", Prim(Nat)), dir: Check(Cons(Lift(Prim(Nat)), WR(Empty, Apart(Var("X"), Var("Y"))))), term: Let("y", Get(Var("ry")), Ret(Nat(0))), clas: Ok(Cons(Lift(Prim(Nat)), WR(Empty, Apart(Var("X"), Var("Y"))))), rule: Let("y", Der { ctx: Var(Var(Var(IVar(IVar(Empty, "X", NmSet), "Y", NmSet), "rx", Ref(Var("X"), Prim(Nat))), "ry", Ref(Var("Y"), Prim(Nat))), "x", Prim(Nat)), dir: Synth, term: Get(Var("ry")), clas: Ok(Cons(Lift(Prim(Nat)), WR(Empty, Var("Y")))), rule: Get(Der { ctx: Var(Var(Var(IVar(IVar(Empty, "X", NmSet), "Y", NmSet), "rx", Ref(Var("X"), Prim(Nat))), "ry", Ref(Var("Y"), Prim(Nat))), "x", Prim(Nat)), dir: Synth, term: Var("ry"), clas: Ok(Ref(Var("Y"), Prim(Nat))), rule: Var("ry"), vis: DerVis { tmfam: "Val", local_err: false } }), vis: DerVis { tmfam: "Exp", local_err: false } }, Der { ctx: Var(Var(Var(Var(IVar(IVar(Empty, "X", NmSet), "Y", NmSet), "rx", Ref(Var("X"), Prim(Nat))), "ry", Ref(Var("Y"), Prim(Nat))), "x", Prim(Nat)), "y", Prim(Nat)), dir: Check(Cons(Lift(Prim(Nat)), WR(Empty, Apart(Var("X"), Var("Y"))))), term: Ret(Nat(0)), clas: Ok(Cons(Lift(Prim(Nat)), WR(Empty, Apart(Var("X"), Var("Y"))))), rule: Ret(Der { ctx: Var(Var(Var(Var(IVar(IVar(Empty, "X", NmSet), "Y", NmSet), "rx", Ref(Var("X"), Prim(Nat))), "ry", Ref(Var("Y"), Prim(Nat))), "x", Prim(Nat)), "y", Prim(Nat)), dir: Check(Prim(Nat)), term: Nat(0), clas: Ok(Prim(Nat)), rule: Nat(0), vis: DerVis { tmfam: "Val", local_err: false } }), vis: DerVis { tmfam: "Exp", local_err: false } }), vis: DerVis { tmfam: "Exp", local_err: false } }), vis: DerVis { tmfam: "Exp", local_err: false } }), vis: DerVis { tmfam: "Exp", local_err: false } }), vis: DerVis { tmfam: "Exp", local_err: false } }), vis: DerVis { tmfam: "Val", local_err: false } }), vis: DerVis { tmfam: "Exp", local_err: false } }, Lift(Thk(Empty, ForallIdx("X", NmSet, Tt, ForallIdx("Y", NmSet, Tt, Cons(Arrow(Ref(Var("X"), Prim(Nat)), Cons(Arrow(Ref(Var("Y"), Prim(Nat)), Cons(Lift(Prim(Nat)), WR(Empty, Apart(Var("X"), Var("Y"))))), WR(Empty, Empty))), WR(Empty, Empty))))))), vis: DerVis { tmfam: "Exp", local_err: false } }, Der { ctx: Var(Empty, "get", Thk(Empty, ForallIdx("X", NmSet, Tt, ForallIdx("Y", NmSet, Tt, Cons(Arrow(Ref(Var("X"), Prim(Nat)), Cons(Arrow(Ref(Var("Y"), Prim(Nat)), Cons(Lift(Prim(Nat)), WR(Empty, Apart(Var("X"), Var("Y"))))), WR(Empty, Empty))), WR(Empty, Empty)))))), dir: Synth, term: Ret(Nat(0)), clas: Ok(Cons(Lift(Prim(Nat)), WR(Empty, Empty))), rule: Ret(Der { ctx: Var(Empty, "get", Thk(Empty, ForallIdx("X", NmSet, Tt, ForallIdx("Y", NmSet, Tt, Cons(Arrow(Ref(Var("X"), Prim(Nat)), Cons(Arrow(Ref(Var("Y"), Prim(Nat)), Cons(Lift(Prim(Nat)), WR(Empty, Apart(Var("X"), Var("Y"))))), WR(Empty, Empty))), WR(Empty, Empty)))))), dir: Synth, term: Nat(0), clas: Ok(Prim(Nat)), rule: Nat(0), vis: DerVis { tmfam: "Val", local_err: false } }), vis: DerVis { tmfam: "Exp", local_err: false } }), vis: DerVis { tmfam: "Exp", local_err: false } }, traces: [] }