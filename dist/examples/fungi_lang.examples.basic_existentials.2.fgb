Bundle { input: "let foo :\n(Thk [0] foralli (X, Y) : NmSet . 0 Bool -> 0 Nm [X] -> 0 Nm [Y] ->\n { { @ ! } (X % Y) ; 0 } F\n (exists (Z) : NmSet | (Z = (X % Y) : NmSet) .\n  (x Nm [Z] x Ref [{ @ ! } (Z)] Nat))) =\n{\n    ret thunk # b . # nx . # ny . if (b)\n    { let r = { ref nx 1 } ret pack X (nx, r) } else\n    { let r = { ref ny 2 } ret pack Y (ny, r) }\n} ret 0", program: Der { ctx: Empty, dir: Synth, term: Let("foo", AnnoC(Ret(ThunkAnon(Lam("b", Lam("nx", Lam("ny", IfThenElse(Var("b"), Let("r", Ref(Var("nx"), Nat(1)), Ret(Pack(Var("X"), Pair(Var("nx"), Var("r"))))), Let("r", Ref(Var("ny"), Nat(2)), Ret(Pack(Var("Y"), Pair(Var("ny"), Var("r"))))))))))), Lift(Thk(Empty, ForallIdx("X", NmSet, Tt, ForallIdx("Y", NmSet, Tt, Cons(Arrow(Ident("Bool"), Cons(Arrow(Nm(Var("X")), Cons(Arrow(Nm(Var("Y")), Cons(Lift(Exists("Z", NmSet, Equiv(Var("Z"), Apart(Var("X"), Var("Y")), NmSet), Prod(Nm(Var("Z")), Ref(App(WriteScope, Var("Z")), Ident("Nat"))))), WR(App(WriteScope, Apart(Var("X"), Var("Y"))), Empty))), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty))))))), Ret(Nat(0))), clas: Ok(Cons(Lift(Prim(Nat)), WR(Empty, Empty))), rule: Let("foo", Der { ctx: Empty, dir: Synth, term: AnnoC(Ret(ThunkAnon(Lam("b", Lam("nx", Lam("ny", IfThenElse(Var("b"), Let("r", Ref(Var("nx"), Nat(1)), Ret(Pack(Var("X"), Pair(Var("nx"), Var("r"))))), Let("r", Ref(Var("ny"), Nat(2)), Ret(Pack(Var("Y"), Pair(Var("ny"), Var("r"))))))))))), Lift(Thk(Empty, ForallIdx("X", NmSet, Tt, ForallIdx("Y", NmSet, Tt, Cons(Arrow(Ident("Bool"), Cons(Arrow(Nm(Var("X")), Cons(Arrow(Nm(Var("Y")), Cons(Lift(Exists("Z", NmSet, Equiv(Var("Z"), Apart(Var("X"), Var("Y")), NmSet), Prod(Nm(Var("Z")), Ref(App(WriteScope, Var("Z")), Ident("Nat"))))), WR(App(WriteScope, Apart(Var("X"), Var("Y"))), Empty))), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty))))))), clas: Ok(Cons(Lift(Thk(Empty, ForallIdx("X", NmSet, Tt, ForallIdx("Y", NmSet, Tt, Cons(Arrow(Prim(Bool), Cons(Arrow(Nm(Var("X")), Cons(Arrow(Nm(Var("Y")), Cons(Lift(Exists("Z", NmSet, Equiv(Var("Z"), Apart(Var("X"), Var("Y")), NmSet), Prod(Nm(Var("Z")), Ref(App(WriteScope, Var("Z")), Prim(Nat))))), WR(App(WriteScope, Apart(Var("X"), Var("Y"))), Empty))), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))))), WR(Empty, Empty))), rule: AnnoC(Der { ctx: Empty, dir: Check(Cons(Lift(Thk(Empty, ForallIdx("X", NmSet, Tt, ForallIdx("Y", NmSet, Tt, Cons(Arrow(Prim(Bool), Cons(Arrow(Nm(Var("X")), Cons(Arrow(Nm(Var("Y")), Cons(Lift(Exists("Z", NmSet, Equiv(Var("Z"), Apart(Var("X"), Var("Y")), NmSet), Prod(Nm(Var("Z")), Ref(App(WriteScope, Var("Z")), Prim(Nat))))), WR(App(WriteScope, Apart(Var("X"), Var("Y"))), Empty))), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))))), WR(Empty, Empty))), term: Ret(ThunkAnon(Lam("b", Lam("nx", Lam("ny", IfThenElse(Var("b"), Let("r", Ref(Var("nx"), Nat(1)), Ret(Pack(Var("X"), Pair(Var("nx"), Var("r"))))), Let("r", Ref(Var("ny"), Nat(2)), Ret(Pack(Var("Y"), Pair(Var("ny"), Var("r"))))))))))), clas: Ok(Cons(Lift(Thk(Empty, ForallIdx("X", NmSet, Tt, ForallIdx("Y", NmSet, Tt, Cons(Arrow(Prim(Bool), Cons(Arrow(Nm(Var("X")), Cons(Arrow(Nm(Var("Y")), Cons(Lift(Exists("Z", NmSet, Equiv(Var("Z"), Apart(Var("X"), Var("Y")), NmSet), Prod(Nm(Var("Z")), Ref(App(WriteScope, Var("Z")), Prim(Nat))))), WR(App(WriteScope, Apart(Var("X"), Var("Y"))), Empty))), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))))), WR(Empty, Empty))), rule: Ret(Der { ctx: Empty, dir: Check(Thk(Empty, ForallIdx("X", NmSet, Tt, ForallIdx("Y", NmSet, Tt, Cons(Arrow(Prim(Bool), Cons(Arrow(Nm(Var("X")), Cons(Arrow(Nm(Var("Y")), Cons(Lift(Exists("Z", NmSet, Equiv(Var("Z"), Apart(Var("X"), Var("Y")), NmSet), Prod(Nm(Var("Z")), Ref(App(WriteScope, Var("Z")), Prim(Nat))))), WR(App(WriteScope, Apart(Var("X"), Var("Y"))), Empty))), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))))), term: ThunkAnon(Lam("b", Lam("nx", Lam("ny", IfThenElse(Var("b"), Let("r", Ref(Var("nx"), Nat(1)), Ret(Pack(Var("X"), Pair(Var("nx"), Var("r"))))), Let("r", Ref(Var("ny"), Nat(2)), Ret(Pack(Var("Y"), Pair(Var("ny"), Var("r")))))))))), clas: Ok(Thk(Empty, ForallIdx("X", NmSet, Tt, ForallIdx("Y", NmSet, Tt, Cons(Arrow(Prim(Bool), Cons(Arrow(Nm(Var("X")), Cons(Arrow(Nm(Var("Y")), Cons(Lift(Exists("Z", NmSet, Equiv(Var("Z"), Apart(Var("X"), Var("Y")), NmSet), Prod(Nm(Var("Z")), Ref(App(WriteScope, Var("Z")), Prim(Nat))))), WR(App(WriteScope, Apart(Var("X"), Var("Y"))), Empty))), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))))), rule: ThunkAnon(Der { ctx: Empty, dir: Check(ForallIdx("X", NmSet, Tt, ForallIdx("Y", NmSet, Tt, Cons(Arrow(Prim(Bool), Cons(Arrow(Nm(Var("X")), Cons(Arrow(Nm(Var("Y")), Cons(Lift(Exists("Z", NmSet, Equiv(Var("Z"), Apart(Var("X"), Var("Y")), NmSet), Prod(Nm(Var("Z")), Ref(App(WriteScope, Var("Z")), Prim(Nat))))), WR(App(WriteScope, Apart(Var("X"), Var("Y"))), Empty))), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty))))), term: Lam("b", Lam("nx", Lam("ny", IfThenElse(Var("b"), Let("r", Ref(Var("nx"), Nat(1)), Ret(Pack(Var("X"), Pair(Var("nx"), Var("r"))))), Let("r", Ref(Var("ny"), Nat(2)), Ret(Pack(Var("Y"), Pair(Var("ny"), Var("r"))))))))), clas: Ok(Cons(Arrow(Prim(Bool), Cons(Arrow(Nm(Var("X")), Cons(Arrow(Nm(Var("Y")), Cons(Lift(Exists("Z", NmSet, Equiv(Var("Z"), Apart(Var("X"), Var("Y")), NmSet), Prod(Nm(Var("Z")), Ref(App(WriteScope, Var("Z")), Prim(Nat))))), WR(App(WriteScope, Apart(Var("X"), Var("Y"))), Empty))), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty))), rule: Lam("b", Der { ctx: Var(IVar(IVar(Empty, "X", NmSet), "Y", NmSet), "b", Prim(Bool)), dir: Check(Cons(Arrow(Nm(Var("X")), Cons(Arrow(Nm(Var("Y")), Cons(Lift(Exists("Z", NmSet, Equiv(Var("Z"), Apart(Var("X"), Var("Y")), NmSet), Prod(Nm(Var("Z")), Ref(App(WriteScope, Var("Z")), Prim(Nat))))), WR(App(WriteScope, Apart(Var("X"), Var("Y"))), Empty))), WR(Empty, Empty))), WR(Empty, Empty))), term: Lam("nx", Lam("ny", IfThenElse(Var("b"), Let("r", Ref(Var("nx"), Nat(1)), Ret(Pack(Var("X"), Pair(Var("nx"), Var("r"))))), Let("r", Ref(Var("ny"), Nat(2)), Ret(Pack(Var("Y"), Pair(Var("ny"), Var("r")))))))), clas: Ok(Cons(Arrow(Nm(Var("X")), Cons(Arrow(Nm(Var("Y")), Cons(Lift(Exists("Z", NmSet, Equiv(Var("Z"), Apart(Var("X"), Var("Y")), NmSet), Prod(Nm(Var("Z")), Ref(App(WriteScope, Var("Z")), Prim(Nat))))), WR(App(WriteScope, Apart(Var("X"), Var("Y"))), Empty))), WR(Empty, Empty))), WR(Empty, Empty))), rule: Lam("nx", Der { ctx: Var(Var(IVar(IVar(Empty, "X", NmSet), "Y", NmSet), "b", Prim(Bool)), "nx", Nm(Var("X"))), dir: Check(Cons(Arrow(Nm(Var("Y")), Cons(Lift(Exists("Z", NmSet, Equiv(Var("Z"), Apart(Var("X"), Var("Y")), NmSet), Prod(Nm(Var("Z")), Ref(App(WriteScope, Var("Z")), Prim(Nat))))), WR(App(WriteScope, Apart(Var("X"), Var("Y"))), Empty))), WR(Empty, Empty))), term: Lam("ny", IfThenElse(Var("b"), Let("r", Ref(Var("nx"), Nat(1)), Ret(Pack(Var("X"), Pair(Var("nx"), Var("r"))))), Let("r", Ref(Var("ny"), Nat(2)), Ret(Pack(Var("Y"), Pair(Var("ny"), Var("r"))))))), clas: Ok(Cons(Arrow(Nm(Var("Y")), Cons(Lift(Exists("Z", NmSet, Equiv(Var("Z"), Apart(Var("X"), Var("Y")), NmSet), Prod(Nm(Var("Z")), Ref(App(WriteScope, Var("Z")), Prim(Nat))))), WR(App(WriteScope, Apart(Var("X"), Var("Y"))), Empty))), WR(Empty, Empty))), rule: Lam("ny", Der { ctx: Var(Var(Var(IVar(IVar(Empty, "X", NmSet), "Y", NmSet), "b", Prim(Bool)), "nx", Nm(Var("X"))), "ny", Nm(Var("Y"))), dir: Check(Cons(Lift(Exists("Z", NmSet, Equiv(Var("Z"), Apart(Var("X"), Var("Y")), NmSet), Prod(Nm(Var("Z")), Ref(App(WriteScope, Var("Z")), Prim(Nat))))), WR(App(WriteScope, Apart(Var("X"), Var("Y"))), Empty))), term: IfThenElse(Var("b"), Let("r", Ref(Var("nx"), Nat(1)), Ret(Pack(Var("X"), Pair(Var("nx"), Var("r"))))), Let("r", Ref(Var("ny"), Nat(2)), Ret(Pack(Var("Y"), Pair(Var("ny"), Var("r")))))), clas: Ok(Cons(Lift(Exists("Z", NmSet, Equiv(Var("Z"), Apart(Var("X"), Var("Y")), NmSet), Prod(Nm(Var("Z")), Ref(App(WriteScope, Var("Z")), Prim(Nat))))), WR(App(WriteScope, Apart(Var("X"), Var("Y"))), Empty))), rule: IfThenElse(Der { ctx: Var(Var(Var(IVar(IVar(Empty, "X", NmSet), "Y", NmSet), "b", Prim(Bool)), "nx", Nm(Var("X"))), "ny", Nm(Var("Y"))), dir: Synth, term: Var("b"), clas: Ok(Prim(Bool)), rule: Var("b"), vis: DerVis { tmfam: "Val", local_err: false } }, Der { ctx: Var(Var(Var(IVar(IVar(Empty, "X", NmSet), "Y", NmSet), "b", Prim(Bool)), "nx", Nm(Var("X"))), "ny", Nm(Var("Y"))), dir: Check(Cons(Lift(Exists("Z", NmSet, Equiv(Var("Z"), Apart(Var("X"), Var("Y")), NmSet), Prod(Nm(Var("Z")), Ref(App(WriteScope, Var("Z")), Prim(Nat))))), WR(App(WriteScope, Apart(Var("X"), Var("Y"))), Empty))), term: Let("r", Ref(Var("nx"), Nat(1)), Ret(Pack(Var("X"), Pair(Var("nx"), Var("r"))))), clas: Ok(Cons(Lift(Exists("Z", NmSet, Equiv(Var("Z"), Apart(Var("X"), Var("Y")), NmSet), Prod(Nm(Var("Z")), Ref(App(WriteScope, Var("Z")), Prim(Nat))))), WR(App(WriteScope, Apart(Var("X"), Var("Y"))), Empty))), rule: Let("r", Der { ctx: Var(Var(Var(IVar(IVar(Empty, "X", NmSet), "Y", NmSet), "b", Prim(Bool)), "nx", Nm(Var("X"))), "ny", Nm(Var("Y"))), dir: Synth, term: Ref(Var("nx"), Nat(1)), clas: Ok(Cons(Lift(Ref(Map(WriteScope, Var("X")), Prim(Nat))), WR(Map(WriteScope, Var("X")), Empty))), rule: Ref(Der { ctx: Var(Var(Var(IVar(IVar(Empty, "X", NmSet), "Y", NmSet), "b", Prim(Bool)), "nx", Nm(Var("X"))), "ny", Nm(Var("Y"))), dir: Synth, term: Var("nx"), clas: Ok(Nm(Var("X"))), rule: Var("nx"), vis: DerVis { tmfam: "Val", local_err: false } }, Der { ctx: Var(Var(Var(IVar(IVar(Empty, "X", NmSet), "Y", NmSet), "b", Prim(Bool)), "nx", Nm(Var("X"))), "ny", Nm(Var("Y"))), dir: Synth, term: Nat(1), clas: Ok(Prim(Nat)), rule: Nat(1), vis: DerVis { tmfam: "Val", local_err: false } }), vis: DerVis { tmfam: "Exp", local_err: false } }, Der { ctx: Var(Var(Var(Var(IVar(IVar(Empty, "X", NmSet), "Y", NmSet), "b", Prim(Bool)), "nx", Nm(Var("X"))), "ny", Nm(Var("Y"))), "r", Ref(Map(WriteScope, Var("X")), Prim(Nat))), dir: Check(Cons(Lift(Exists("Z", NmSet, Equiv(Var("Z"), Apart(Var("X"), Var("Y")), NmSet), Prod(Nm(Var("Z")), Ref(App(WriteScope, Var("Z")), Prim(Nat))))), WR(NmSet(NmSet { cons: Some(Apart), terms: [Subset(Map(WriteScope, Var("Y")))] }), Empty))), term: Ret(Pack(Var("X"), Pair(Var("nx"), Var("r")))), clas: Ok(Cons(Lift(Exists("Z", NmSet, Equiv(Var("Z"), Apart(Var("X"), Var("Y")), NmSet), Prod(Nm(Var("Z")), Ref(App(WriteScope, Var("Z")), Prim(Nat))))), WR(NmSet(NmSet { cons: Some(Apart), terms: [Subset(Map(WriteScope, Var("Y")))] }), Empty))), rule: Ret(Der { ctx: Var(Var(Var(Var(IVar(IVar(Empty, "X", NmSet), "Y", NmSet), "b", Prim(Bool)), "nx", Nm(Var("X"))), "ny", Nm(Var("Y"))), "r", Ref(Map(WriteScope, Var("X")), Prim(Nat))), dir: Check(Exists("Z", NmSet, Equiv(Var("Z"), Apart(Var("X"), Var("Y")), NmSet), Prod(Nm(Var("Z")), Ref(App(WriteScope, Var("Z")), Prim(Nat))))), term: Pack(Var("X"), Pair(Var("nx"), Var("r"))), clas: Ok(Exists("Z", NmSet, Equiv(Var("Z"), Apart(Var("X"), Var("Y")), NmSet), Prod(Nm(Var("Z")), Ref(App(WriteScope, Var("Z")), Prim(Nat))))), rule: Pack(Der { ctx: Var(Var(Var(Var(IVar(IVar(Empty, "X", NmSet), "Y", NmSet), "b", Prim(Bool)), "nx", Nm(Var("X"))), "ny", Nm(Var("Y"))), "r", Ref(Map(WriteScope, Var("X")), Prim(Nat))), dir: Synth, term: Var("X"), clas: Ok(NmSet), rule: Var("X"), vis: DerVis { tmfam: "IdxTm", local_err: false } }, Der { ctx: Var(Var(Var(Var(IVar(IVar(Empty, "X", NmSet), "Y", NmSet), "b", Prim(Bool)), "nx", Nm(Var("X"))), "ny", Nm(Var("Y"))), "r", Ref(Map(WriteScope, Var("X")), Prim(Nat))), dir: Check(Prod(Nm(Var("X")), Ref(App(WriteScope, Var("X")), Prim(Nat)))), term: Pair(Var("nx"), Var("r")), clas: Ok(Prod(Nm(Var("X")), Ref(App(WriteScope, Var("X")), Prim(Nat)))), rule: Pair(Der { ctx: Var(Var(Var(Var(IVar(IVar(Empty, "X", NmSet), "Y", NmSet), "b", Prim(Bool)), "nx", Nm(Var("X"))), "ny", Nm(Var("Y"))), "r", Ref(Map(WriteScope, Var("X")), Prim(Nat))), dir: Check(Nm(Var("X"))), term: Var("nx"), clas: Ok(Nm(Var("X"))), rule: Var("nx"), vis: DerVis { tmfam: "Val", local_err: false } }, Der { ctx: Var(Var(Var(Var(IVar(IVar(Empty, "X", NmSet), "Y", NmSet), "b", Prim(Bool)), "nx", Nm(Var("X"))), "ny", Nm(Var("Y"))), "r", Ref(Map(WriteScope, Var("X")), Prim(Nat))), dir: Check(Ref(App(WriteScope, Var("X")), Prim(Nat))), term: Var("r"), clas: Ok(Ref(Map(WriteScope, Var("X")), Prim(Nat))), rule: Var("r"), vis: DerVis { tmfam: "Val", local_err: false } }), vis: DerVis { tmfam: "Val", local_err: false } }), vis: DerVis { tmfam: "Val", local_err: false } }), vis: DerVis { tmfam: "Exp", local_err: false } }), vis: DerVis { tmfam: "Exp", local_err: false } }, Der { ctx: Var(Var(Var(IVar(IVar(Empty, "X", NmSet), "Y", NmSet), "b", Prim(Bool)), "nx", Nm(Var("X"))), "ny", Nm(Var("Y"))), dir: Check(Cons(Lift(Exists("Z", NmSet, Equiv(Var("Z"), Apart(Var("X"), Var("Y")), NmSet), Prod(Nm(Var("Z")), Ref(App(WriteScope, Var("Z")), Prim(Nat))))), WR(App(WriteScope, Apart(Var("X"), Var("Y"))), Empty))), term: Let("r", Ref(Var("ny"), Nat(2)), Ret(Pack(Var("Y"), Pair(Var("ny"), Var("r"))))), clas: Ok(Cons(Lift(Exists("Z", NmSet, Equiv(Var("Z"), Apart(Var("X"), Var("Y")), NmSet), Prod(Nm(Var("Z")), Ref(App(WriteScope, Var("Z")), Prim(Nat))))), WR(App(WriteScope, Apart(Var("X"), Var("Y"))), Empty))), rule: Let("r", Der { ctx: Var(Var(Var(IVar(IVar(Empty, "X", NmSet), "Y", NmSet), "b", Prim(Bool)), "nx", Nm(Var("X"))), "ny", Nm(Var("Y"))), dir: Synth, term: Ref(Var("ny"), Nat(2)), clas: Ok(Cons(Lift(Ref(Map(WriteScope, Var("Y")), Prim(Nat))), WR(Map(WriteScope, Var("Y")), Empty))), rule: Ref(Der { ctx: Var(Var(Var(IVar(IVar(Empty, "X", NmSet), "Y", NmSet), "b", Prim(Bool)), "nx", Nm(Var("X"))), "ny", Nm(Var("Y"))), dir: Synth, term: Var("ny"), clas: Ok(Nm(Var("Y"))), rule: Var("ny"), vis: DerVis { tmfam: "Val", local_err: false } }, Der { ctx: Var(Var(Var(IVar(IVar(Empty, "X", NmSet), "Y", NmSet), "b", Prim(Bool)), "nx", Nm(Var("X"))), "ny", Nm(Var("Y"))), dir: Synth, term: Nat(2), clas: Ok(Prim(Nat)), rule: Nat(2), vis: DerVis { tmfam: "Val", local_err: false } }), vis: DerVis { tmfam: "Exp", local_err: false } }, Der { ctx: Var(Var(Var(Var(IVar(IVar(Empty, "X", NmSet), "Y", NmSet), "b", Prim(Bool)), "nx", Nm(Var("X"))), "ny", Nm(Var("Y"))), "r", Ref(Map(WriteScope, Var("Y")), Prim(Nat))), dir: Check(Cons(Lift(Exists("Z", NmSet, Equiv(Var("Z"), Apart(Var("X"), Var("Y")), NmSet), Prod(Nm(Var("Z")), Ref(App(WriteScope, Var("Z")), Prim(Nat))))), WR(NmSet(NmSet { cons: Some(Apart), terms: [Subset(Map(WriteScope, Var("X")))] }), Empty))), term: Ret(Pack(Var("Y"), Pair(Var("ny"), Var("r")))), clas: Ok(Cons(Lift(Exists("Z", NmSet, Equiv(Var("Z"), Apart(Var("X"), Var("Y")), NmSet), Prod(Nm(Var("Z")), Ref(App(WriteScope, Var("Z")), Prim(Nat))))), WR(NmSet(NmSet { cons: Some(Apart), terms: [Subset(Map(WriteScope, Var("X")))] }), Empty))), rule: Ret(Der { ctx: Var(Var(Var(Var(IVar(IVar(Empty, "X", NmSet), "Y", NmSet), "b", Prim(Bool)), "nx", Nm(Var("X"))), "ny", Nm(Var("Y"))), "r", Ref(Map(WriteScope, Var("Y")), Prim(Nat))), dir: Check(Exists("Z", NmSet, Equiv(Var("Z"), Apart(Var("X"), Var("Y")), NmSet), Prod(Nm(Var("Z")), Ref(App(WriteScope, Var("Z")), Prim(Nat))))), term: Pack(Var("Y"), Pair(Var("ny"), Var("r"))), clas: Ok(Exists("Z", NmSet, Equiv(Var("Z"), Apart(Var("X"), Var("Y")), NmSet), Prod(Nm(Var("Z")), Ref(App(WriteScope, Var("Z")), Prim(Nat))))), rule: Pack(Der { ctx: Var(Var(Var(Var(IVar(IVar(Empty, "X", NmSet), "Y", NmSet), "b", Prim(Bool)), "nx", Nm(Var("X"))), "ny", Nm(Var("Y"))), "r", Ref(Map(WriteScope, Var("Y")), Prim(Nat))), dir: Synth, term: Var("Y"), clas: Ok(NmSet), rule: Var("Y"), vis: DerVis { tmfam: "IdxTm", local_err: false } }, Der { ctx: Var(Var(Var(Var(IVar(IVar(Empty, "X", NmSet), "Y", NmSet), "b", Prim(Bool)), "nx", Nm(Var("X"))), "ny", Nm(Var("Y"))), "r", Ref(Map(WriteScope, Var("Y")), Prim(Nat))), dir: Check(Prod(Nm(Var("Y")), Ref(App(WriteScope, Var("Y")), Prim(Nat)))), term: Pair(Var("ny"), Var("r")), clas: Ok(Prod(Nm(Var("Y")), Ref(App(WriteScope, Var("Y")), Prim(Nat)))), rule: Pair(Der { ctx: Var(Var(Var(Var(IVar(IVar(Empty, "X", NmSet), "Y", NmSet), "b", Prim(Bool)), "nx", Nm(Var("X"))), "ny", Nm(Var("Y"))), "r", Ref(Map(WriteScope, Var("Y")), Prim(Nat))), dir: Check(Nm(Var("Y"))), term: Var("ny"), clas: Ok(Nm(Var("Y"))), rule: Var("ny"), vis: DerVis { tmfam: "Val", local_err: false } }, Der { ctx: Var(Var(Var(Var(IVar(IVar(Empty, "X", NmSet), "Y", NmSet), "b", Prim(Bool)), "nx", Nm(Var("X"))), "ny", Nm(Var("Y"))), "r", Ref(Map(WriteScope, Var("Y")), Prim(Nat))), dir: Check(Ref(App(WriteScope, Var("Y")), Prim(Nat))), term: Var("r"), clas: Ok(Ref(Map(WriteScope, Var("Y")), Prim(Nat))), rule: Var("r"), vis: DerVis { tmfam: "Val", local_err: false } }), vis: DerVis { tmfam: "Val", local_err: false } }), vis: DerVis { tmfam: "Val", local_err: false } }), vis: DerVis { tmfam: "Exp", local_err: false } }), vis: DerVis { tmfam: "Exp", local_err: false } }), vis: DerVis { tmfam: "Exp", local_err: false } }), vis: DerVis { tmfam: "Exp", local_err: false } }), vis: DerVis { tmfam: "Exp", local_err: false } }), vis: DerVis { tmfam: "Exp", local_err: false } }), vis: DerVis { tmfam: "Val", local_err: false } }), vis: DerVis { tmfam: "Exp", local_err: false } }, Lift(Thk(Empty, ForallIdx("X", NmSet, Tt, ForallIdx("Y", NmSet, Tt, Cons(Arrow(Prim(Bool), Cons(Arrow(Nm(Var("X")), Cons(Arrow(Nm(Var("Y")), Cons(Lift(Exists("Z", NmSet, Equiv(Var("Z"), Apart(Var("X"), Var("Y")), NmSet), Prod(Nm(Var("Z")), Ref(App(WriteScope, Var("Z")), Prim(Nat))))), WR(App(WriteScope, Apart(Var("X"), Var("Y"))), Empty))), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty))))))), vis: DerVis { tmfam: "Exp", local_err: false } }, Der { ctx: Var(Empty, "foo", Thk(Empty, ForallIdx("X", NmSet, Tt, ForallIdx("Y", NmSet, Tt, Cons(Arrow(Prim(Bool), Cons(Arrow(Nm(Var("X")), Cons(Arrow(Nm(Var("Y")), Cons(Lift(Exists("Z", NmSet, Equiv(Var("Z"), Apart(Var("X"), Var("Y")), NmSet), Prod(Nm(Var("Z")), Ref(App(WriteScope, Var("Z")), Prim(Nat))))), WR(App(WriteScope, Apart(Var("X"), Var("Y"))), Empty))), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))))), dir: Synth, term: Ret(Nat(0)), clas: Ok(Cons(Lift(Prim(Nat)), WR(Empty, Empty))), rule: Ret(Der { ctx: Var(Empty, "foo", Thk(Empty, ForallIdx("X", NmSet, Tt, ForallIdx("Y", NmSet, Tt, Cons(Arrow(Prim(Bool), Cons(Arrow(Nm(Var("X")), Cons(Arrow(Nm(Var("Y")), Cons(Lift(Exists("Z", NmSet, Equiv(Var("Z"), Apart(Var("X"), Var("Y")), NmSet), Prod(Nm(Var("Z")), Ref(App(WriteScope, Var("Z")), Prim(Nat))))), WR(App(WriteScope, Apart(Var("X"), Var("Y"))), Empty))), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))))), dir: Synth, term: Nat(0), clas: Ok(Prim(Nat)), rule: Nat(0), vis: DerVis { tmfam: "Val", local_err: false } }), vis: DerVis { tmfam: "Exp", local_err: false } }), vis: DerVis { tmfam: "Exp", local_err: false } }, traces: [] }