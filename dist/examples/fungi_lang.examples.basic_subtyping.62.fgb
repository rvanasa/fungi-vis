Bundle { input: "let put_one :\n(Thk [0] foralli (X, Y, Z) : NmSet . 0 Bool -> 0 Nm [X % Z] -> 0 Nm [Y % Z] ->\n { { @ ! } (X % Y % Z) ; 0 } F Ref [{ @ ! } (X % Y % Z)] Nat) =\n{\n    ret thunk # b . # nxz . # nyz . if (b) { let r1 = { ref nxz 0 } ret r1 }\n    else { let r2 = { ref nyz 0 } ret r2 }\n} ret 0", program: Der { ctx: Empty, dir: Synth, term: Let("put_one", AnnoC(Ret(ThunkAnon(Lam("b", Lam("nxz", Lam("nyz", IfThenElse(Var("b"), Let("r1", Ref(Var("nxz"), Nat(0)), Ret(Var("r1"))), Let("r2", Ref(Var("nyz"), Nat(0)), Ret(Var("r2"))))))))), Lift(Thk(Empty, ForallIdx("X", NmSet, Tt, ForallIdx("Y", NmSet, Tt, ForallIdx("Z", NmSet, Tt, Cons(Arrow(Ident("Bool"), Cons(Arrow(Nm(Apart(Var("X"), Var("Z"))), Cons(Arrow(Nm(Apart(Var("Y"), Var("Z"))), Cons(Lift(Ref(App(WriteScope, Apart(Apart(Var("X"), Var("Y")), Var("Z"))), Ident("Nat"))), WR(App(WriteScope, Apart(Apart(Var("X"), Var("Y")), Var("Z"))), Empty))), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))))))), Ret(Nat(0))), clas: Ok(Cons(Lift(Prim(Nat)), WR(Empty, Empty))), rule: Let("put_one", Der { ctx: Empty, dir: Synth, term: AnnoC(Ret(ThunkAnon(Lam("b", Lam("nxz", Lam("nyz", IfThenElse(Var("b"), Let("r1", Ref(Var("nxz"), Nat(0)), Ret(Var("r1"))), Let("r2", Ref(Var("nyz"), Nat(0)), Ret(Var("r2"))))))))), Lift(Thk(Empty, ForallIdx("X", NmSet, Tt, ForallIdx("Y", NmSet, Tt, ForallIdx("Z", NmSet, Tt, Cons(Arrow(Ident("Bool"), Cons(Arrow(Nm(Apart(Var("X"), Var("Z"))), Cons(Arrow(Nm(Apart(Var("Y"), Var("Z"))), Cons(Lift(Ref(App(WriteScope, Apart(Apart(Var("X"), Var("Y")), Var("Z"))), Ident("Nat"))), WR(App(WriteScope, Apart(Apart(Var("X"), Var("Y")), Var("Z"))), Empty))), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))))))), clas: Ok(Cons(Lift(Thk(Empty, ForallIdx("X", NmSet, Tt, ForallIdx("Y", NmSet, Tt, ForallIdx("Z", NmSet, Tt, Cons(Arrow(Prim(Bool), Cons(Arrow(Nm(Apart(Var("X"), Var("Z"))), Cons(Arrow(Nm(Apart(Var("Y"), Var("Z"))), Cons(Lift(Ref(App(WriteScope, Apart(Apart(Var("X"), Var("Y")), Var("Z"))), Prim(Nat))), WR(App(WriteScope, Apart(Apart(Var("X"), Var("Y")), Var("Z"))), Empty))), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty))))))), WR(Empty, Empty))), rule: AnnoC(Der { ctx: Empty, dir: Check(Cons(Lift(Thk(Empty, ForallIdx("X", NmSet, Tt, ForallIdx("Y", NmSet, Tt, ForallIdx("Z", NmSet, Tt, Cons(Arrow(Prim(Bool), Cons(Arrow(Nm(Apart(Var("X"), Var("Z"))), Cons(Arrow(Nm(Apart(Var("Y"), Var("Z"))), Cons(Lift(Ref(App(WriteScope, Apart(Apart(Var("X"), Var("Y")), Var("Z"))), Prim(Nat))), WR(App(WriteScope, Apart(Apart(Var("X"), Var("Y")), Var("Z"))), Empty))), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty))))))), WR(Empty, Empty))), term: Ret(ThunkAnon(Lam("b", Lam("nxz", Lam("nyz", IfThenElse(Var("b"), Let("r1", Ref(Var("nxz"), Nat(0)), Ret(Var("r1"))), Let("r2", Ref(Var("nyz"), Nat(0)), Ret(Var("r2"))))))))), clas: Ok(Cons(Lift(Thk(Empty, ForallIdx("X", NmSet, Tt, ForallIdx("Y", NmSet, Tt, ForallIdx("Z", NmSet, Tt, Cons(Arrow(Prim(Bool), Cons(Arrow(Nm(Apart(Var("X"), Var("Z"))), Cons(Arrow(Nm(Apart(Var("Y"), Var("Z"))), Cons(Lift(Ref(App(WriteScope, Apart(Apart(Var("X"), Var("Y")), Var("Z"))), Prim(Nat))), WR(App(WriteScope, Apart(Apart(Var("X"), Var("Y")), Var("Z"))), Empty))), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty))))))), WR(Empty, Empty))), rule: Ret(Der { ctx: Empty, dir: Check(Thk(Empty, ForallIdx("X", NmSet, Tt, ForallIdx("Y", NmSet, Tt, ForallIdx("Z", NmSet, Tt, Cons(Arrow(Prim(Bool), Cons(Arrow(Nm(Apart(Var("X"), Var("Z"))), Cons(Arrow(Nm(Apart(Var("Y"), Var("Z"))), Cons(Lift(Ref(App(WriteScope, Apart(Apart(Var("X"), Var("Y")), Var("Z"))), Prim(Nat))), WR(App(WriteScope, Apart(Apart(Var("X"), Var("Y")), Var("Z"))), Empty))), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty))))))), term: ThunkAnon(Lam("b", Lam("nxz", Lam("nyz", IfThenElse(Var("b"), Let("r1", Ref(Var("nxz"), Nat(0)), Ret(Var("r1"))), Let("r2", Ref(Var("nyz"), Nat(0)), Ret(Var("r2")))))))), clas: Ok(Thk(Empty, ForallIdx("X", NmSet, Tt, ForallIdx("Y", NmSet, Tt, ForallIdx("Z", NmSet, Tt, Cons(Arrow(Prim(Bool), Cons(Arrow(Nm(Apart(Var("X"), Var("Z"))), Cons(Arrow(Nm(Apart(Var("Y"), Var("Z"))), Cons(Lift(Ref(App(WriteScope, Apart(Apart(Var("X"), Var("Y")), Var("Z"))), Prim(Nat))), WR(App(WriteScope, Apart(Apart(Var("X"), Var("Y")), Var("Z"))), Empty))), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty))))))), rule: ThunkAnon(Der { ctx: Empty, dir: Check(ForallIdx("X", NmSet, Tt, ForallIdx("Y", NmSet, Tt, ForallIdx("Z", NmSet, Tt, Cons(Arrow(Prim(Bool), Cons(Arrow(Nm(Apart(Var("X"), Var("Z"))), Cons(Arrow(Nm(Apart(Var("Y"), Var("Z"))), Cons(Lift(Ref(App(WriteScope, Apart(Apart(Var("X"), Var("Y")), Var("Z"))), Prim(Nat))), WR(App(WriteScope, Apart(Apart(Var("X"), Var("Y")), Var("Z"))), Empty))), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))))), term: Lam("b", Lam("nxz", Lam("nyz", IfThenElse(Var("b"), Let("r1", Ref(Var("nxz"), Nat(0)), Ret(Var("r1"))), Let("r2", Ref(Var("nyz"), Nat(0)), Ret(Var("r2"))))))), clas: Ok(Cons(Arrow(Prim(Bool), Cons(Arrow(Nm(Apart(Var("X"), Var("Z"))), Cons(Arrow(Nm(Apart(Var("Y"), Var("Z"))), Cons(Lift(Ref(App(WriteScope, Apart(Apart(Var("X"), Var("Y")), Var("Z"))), Prim(Nat))), WR(App(WriteScope, Apart(Apart(Var("X"), Var("Y")), Var("Z"))), Empty))), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty))), rule: Lam("b", Der { ctx: Var(IVar(IVar(IVar(Empty, "X", NmSet), "Y", NmSet), "Z", NmSet), "b", Prim(Bool)), dir: Check(Cons(Arrow(Nm(Apart(Var("X"), Var("Z"))), Cons(Arrow(Nm(Apart(Var("Y"), Var("Z"))), Cons(Lift(Ref(App(WriteScope, Apart(Apart(Var("X"), Var("Y")), Var("Z"))), Prim(Nat))), WR(App(WriteScope, Apart(Apart(Var("X"), Var("Y")), Var("Z"))), Empty))), WR(Empty, Empty))), WR(Empty, Empty))), term: Lam("nxz", Lam("nyz", IfThenElse(Var("b"), Let("r1", Ref(Var("nxz"), Nat(0)), Ret(Var("r1"))), Let("r2", Ref(Var("nyz"), Nat(0)), Ret(Var("r2")))))), clas: Ok(Cons(Arrow(Nm(Apart(Var("X"), Var("Z"))), Cons(Arrow(Nm(Apart(Var("Y"), Var("Z"))), Cons(Lift(Ref(App(WriteScope, Apart(Apart(Var("X"), Var("Y")), Var("Z"))), Prim(Nat))), WR(App(WriteScope, Apart(Apart(Var("X"), Var("Y")), Var("Z"))), Empty))), WR(Empty, Empty))), WR(Empty, Empty))), rule: Lam("nxz", Der { ctx: Var(Var(IVar(IVar(IVar(Empty, "X", NmSet), "Y", NmSet), "Z", NmSet), "b", Prim(Bool)), "nxz", Nm(Apart(Var("X"), Var("Z")))), dir: Check(Cons(Arrow(Nm(Apart(Var("Y"), Var("Z"))), Cons(Lift(Ref(App(WriteScope, Apart(Apart(Var("X"), Var("Y")), Var("Z"))), Prim(Nat))), WR(App(WriteScope, Apart(Apart(Var("X"), Var("Y")), Var("Z"))), Empty))), WR(Empty, Empty))), term: Lam("nyz", IfThenElse(Var("b"), Let("r1", Ref(Var("nxz"), Nat(0)), Ret(Var("r1"))), Let("r2", Ref(Var("nyz"), Nat(0)), Ret(Var("r2"))))), clas: Ok(Cons(Arrow(Nm(Apart(Var("Y"), Var("Z"))), Cons(Lift(Ref(App(WriteScope, Apart(Apart(Var("X"), Var("Y")), Var("Z"))), Prim(Nat))), WR(App(WriteScope, Apart(Apart(Var("X"), Var("Y")), Var("Z"))), Empty))), WR(Empty, Empty))), rule: Lam("nyz", Der { ctx: Var(Var(Var(IVar(IVar(IVar(Empty, "X", NmSet), "Y", NmSet), "Z", NmSet), "b", Prim(Bool)), "nxz", Nm(Apart(Var("X"), Var("Z")))), "nyz", Nm(Apart(Var("Y"), Var("Z")))), dir: Check(Cons(Lift(Ref(App(WriteScope, Apart(Apart(Var("X"), Var("Y")), Var("Z"))), Prim(Nat))), WR(App(WriteScope, Apart(Apart(Var("X"), Var("Y")), Var("Z"))), Empty))), term: IfThenElse(Var("b"), Let("r1", Ref(Var("nxz"), Nat(0)), Ret(Var("r1"))), Let("r2", Ref(Var("nyz"), Nat(0)), Ret(Var("r2")))), clas: Ok(Cons(Lift(Ref(App(WriteScope, Apart(Apart(Var("X"), Var("Y")), Var("Z"))), Prim(Nat))), WR(App(WriteScope, Apart(Apart(Var("X"), Var("Y")), Var("Z"))), Empty))), rule: IfThenElse(Der { ctx: Var(Var(Var(IVar(IVar(IVar(Empty, "X", NmSet), "Y", NmSet), "Z", NmSet), "b", Prim(Bool)), "nxz", Nm(Apart(Var("X"), Var("Z")))), "nyz", Nm(Apart(Var("Y"), Var("Z")))), dir: Synth, term: Var("b"), clas: Ok(Prim(Bool)), rule: Var("b"), vis: DerVis { tmfam: "Val", local_err: false } }, Der { ctx: Var(Var(Var(IVar(IVar(IVar(Empty, "X", NmSet), "Y", NmSet), "Z", NmSet), "b", Prim(Bool)), "nxz", Nm(Apart(Var("X"), Var("Z")))), "nyz", Nm(Apart(Var("Y"), Var("Z")))), dir: Check(Cons(Lift(Ref(App(WriteScope, Apart(Apart(Var("X"), Var("Y")), Var("Z"))), Prim(Nat))), WR(App(WriteScope, Apart(Apart(Var("X"), Var("Y")), Var("Z"))), Empty))), term: Let("r1", Ref(Var("nxz"), Nat(0)), Ret(Var("r1"))), clas: Ok(Cons(Lift(Ref(App(WriteScope, Apart(Apart(Var("X"), Var("Y")), Var("Z"))), Prim(Nat))), WR(App(WriteScope, Apart(Apart(Var("X"), Var("Y")), Var("Z"))), Empty))), rule: Let("r1", Der { ctx: Var(Var(Var(IVar(IVar(IVar(Empty, "X", NmSet), "Y", NmSet), "Z", NmSet), "b", Prim(Bool)), "nxz", Nm(Apart(Var("X"), Var("Z")))), "nyz", Nm(Apart(Var("Y"), Var("Z")))), dir: Synth, term: Ref(Var("nxz"), Nat(0)), clas: Ok(Cons(Lift(Ref(Map(WriteScope, Apart(Var("X"), Var("Z"))), Prim(Nat))), WR(Map(WriteScope, Apart(Var("X"), Var("Z"))), Empty))), rule: Ref(Der { ctx: Var(Var(Var(IVar(IVar(IVar(Empty, "X", NmSet), "Y", NmSet), "Z", NmSet), "b", Prim(Bool)), "nxz", Nm(Apart(Var("X"), Var("Z")))), "nyz", Nm(Apart(Var("Y"), Var("Z")))), dir: Synth, term: Var("nxz"), clas: Ok(Nm(Apart(Var("X"), Var("Z")))), rule: Var("nxz"), vis: DerVis { tmfam: "Val", local_err: false } }, Der { ctx: Var(Var(Var(IVar(IVar(IVar(Empty, "X", NmSet), "Y", NmSet), "Z", NmSet), "b", Prim(Bool)), "nxz", Nm(Apart(Var("X"), Var("Z")))), "nyz", Nm(Apart(Var("Y"), Var("Z")))), dir: Synth, term: Nat(0), clas: Ok(Prim(Nat)), rule: Nat(0), vis: DerVis { tmfam: "Val", local_err: false } }), vis: DerVis { tmfam: "Exp", local_err: false } }, Der { ctx: Var(Var(Var(Var(IVar(IVar(IVar(Empty, "X", NmSet), "Y", NmSet), "Z", NmSet), "b", Prim(Bool)), "nxz", Nm(Apart(Var("X"), Var("Z")))), "nyz", Nm(Apart(Var("Y"), Var("Z")))), "r1", Ref(Map(WriteScope, Apart(Var("X"), Var("Z"))), Prim(Nat))), dir: Check(Cons(Lift(Ref(App(WriteScope, Apart(Apart(Var("X"), Var("Y")), Var("Z"))), Prim(Nat))), WR(NmSet(NmSet { cons: Some(Apart), terms: [Subset(Map(WriteScope, Var("Y")))] }), Empty))), term: Ret(Var("r1")), clas: Ok(Cons(Lift(Ref(App(WriteScope, Apart(Apart(Var("X"), Var("Y")), Var("Z"))), Prim(Nat))), WR(NmSet(NmSet { cons: Some(Apart), terms: [Subset(Map(WriteScope, Var("Y")))] }), Empty))), rule: Ret(Der { ctx: Var(Var(Var(Var(IVar(IVar(IVar(Empty, "X", NmSet), "Y", NmSet), "Z", NmSet), "b", Prim(Bool)), "nxz", Nm(Apart(Var("X"), Var("Z")))), "nyz", Nm(Apart(Var("Y"), Var("Z")))), "r1", Ref(Map(WriteScope, Apart(Var("X"), Var("Z"))), Prim(Nat))), dir: Check(Ref(App(WriteScope, Apart(Apart(Var("X"), Var("Y")), Var("Z"))), Prim(Nat))), term: Var("r1"), clas: Ok(Ref(Map(WriteScope, Apart(Var("X"), Var("Z"))), Prim(Nat))), rule: Var("r1"), vis: DerVis { tmfam: "Val", local_err: false } }), vis: DerVis { tmfam: "Exp", local_err: false } }), vis: DerVis { tmfam: "Exp", local_err: false } }, Der { ctx: Var(Var(Var(IVar(IVar(IVar(Empty, "X", NmSet), "Y", NmSet), "Z", NmSet), "b", Prim(Bool)), "nxz", Nm(Apart(Var("X"), Var("Z")))), "nyz", Nm(Apart(Var("Y"), Var("Z")))), dir: Check(Cons(Lift(Ref(App(WriteScope, Apart(Apart(Var("X"), Var("Y")), Var("Z"))), Prim(Nat))), WR(App(WriteScope, Apart(Apart(Var("X"), Var("Y")), Var("Z"))), Empty))), term: Let("r2", Ref(Var("nyz"), Nat(0)), Ret(Var("r2"))), clas: Ok(Cons(Lift(Ref(App(WriteScope, Apart(Apart(Var("X"), Var("Y")), Var("Z"))), Prim(Nat))), WR(App(WriteScope, Apart(Apart(Var("X"), Var("Y")), Var("Z"))), Empty))), rule: Let("r2", Der { ctx: Var(Var(Var(IVar(IVar(IVar(Empty, "X", NmSet), "Y", NmSet), "Z", NmSet), "b", Prim(Bool)), "nxz", Nm(Apart(Var("X"), Var("Z")))), "nyz", Nm(Apart(Var("Y"), Var("Z")))), dir: Synth, term: Ref(Var("nyz"), Nat(0)), clas: Ok(Cons(Lift(Ref(Map(WriteScope, Apart(Var("Y"), Var("Z"))), Prim(Nat))), WR(Map(WriteScope, Apart(Var("Y"), Var("Z"))), Empty))), rule: Ref(Der { ctx: Var(Var(Var(IVar(IVar(IVar(Empty, "X", NmSet), "Y", NmSet), "Z", NmSet), "b", Prim(Bool)), "nxz", Nm(Apart(Var("X"), Var("Z")))), "nyz", Nm(Apart(Var("Y"), Var("Z")))), dir: Synth, term: Var("nyz"), clas: Ok(Nm(Apart(Var("Y"), Var("Z")))), rule: Var("nyz"), vis: DerVis { tmfam: "Val", local_err: false } }, Der { ctx: Var(Var(Var(IVar(IVar(IVar(Empty, "X", NmSet), "Y", NmSet), "Z", NmSet), "b", Prim(Bool)), "nxz", Nm(Apart(Var("X"), Var("Z")))), "nyz", Nm(Apart(Var("Y"), Var("Z")))), dir: Synth, term: Nat(0), clas: Ok(Prim(Nat)), rule: Nat(0), vis: DerVis { tmfam: "Val", local_err: false } }), vis: DerVis { tmfam: "Exp", local_err: false } }, Der { ctx: Var(Var(Var(Var(IVar(IVar(IVar(Empty, "X", NmSet), "Y", NmSet), "Z", NmSet), "b", Prim(Bool)), "nxz", Nm(Apart(Var("X"), Var("Z")))), "nyz", Nm(Apart(Var("Y"), Var("Z")))), "r2", Ref(Map(WriteScope, Apart(Var("Y"), Var("Z"))), Prim(Nat))), dir: Check(Cons(Lift(Ref(App(WriteScope, Apart(Apart(Var("X"), Var("Y")), Var("Z"))), Prim(Nat))), WR(NmSet(NmSet { cons: Some(Apart), terms: [Subset(Map(WriteScope, Var("X")))] }), Empty))), term: Ret(Var("r2")), clas: Ok(Cons(Lift(Ref(App(WriteScope, Apart(Apart(Var("X"), Var("Y")), Var("Z"))), Prim(Nat))), WR(NmSet(NmSet { cons: Some(Apart), terms: [Subset(Map(WriteScope, Var("X")))] }), Empty))), rule: Ret(Der { ctx: Var(Var(Var(Var(IVar(IVar(IVar(Empty, "X", NmSet), "Y", NmSet), "Z", NmSet), "b", Prim(Bool)), "nxz", Nm(Apart(Var("X"), Var("Z")))), "nyz", Nm(Apart(Var("Y"), Var("Z")))), "r2", Ref(Map(WriteScope, Apart(Var("Y"), Var("Z"))), Prim(Nat))), dir: Check(Ref(App(WriteScope, Apart(Apart(Var("X"), Var("Y")), Var("Z"))), Prim(Nat))), term: Var("r2"), clas: Ok(Ref(Map(WriteScope, Apart(Var("Y"), Var("Z"))), Prim(Nat))), rule: Var("r2"), vis: DerVis { tmfam: "Val", local_err: false } }), vis: DerVis { tmfam: "Exp", local_err: false } }), vis: DerVis { tmfam: "Exp", local_err: false } }), vis: DerVis { tmfam: "Exp", local_err: false } }), vis: DerVis { tmfam: "Exp", local_err: false } }), vis: DerVis { tmfam: "Exp", local_err: false } }), vis: DerVis { tmfam: "Exp", local_err: false } }), vis: DerVis { tmfam: "Val", local_err: false } }), vis: DerVis { tmfam: "Exp", local_err: false } }, Lift(Thk(Empty, ForallIdx("X", NmSet, Tt, ForallIdx("Y", NmSet, Tt, ForallIdx("Z", NmSet, Tt, Cons(Arrow(Prim(Bool), Cons(Arrow(Nm(Apart(Var("X"), Var("Z"))), Cons(Arrow(Nm(Apart(Var("Y"), Var("Z"))), Cons(Lift(Ref(App(WriteScope, Apart(Apart(Var("X"), Var("Y")), Var("Z"))), Prim(Nat))), WR(App(WriteScope, Apart(Apart(Var("X"), Var("Y")), Var("Z"))), Empty))), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty)))))))), vis: DerVis { tmfam: "Exp", local_err: false } }, Der { ctx: Var(Empty, "put_one", Thk(Empty, ForallIdx("X", NmSet, Tt, ForallIdx("Y", NmSet, Tt, ForallIdx("Z", NmSet, Tt, Cons(Arrow(Prim(Bool), Cons(Arrow(Nm(Apart(Var("X"), Var("Z"))), Cons(Arrow(Nm(Apart(Var("Y"), Var("Z"))), Cons(Lift(Ref(App(WriteScope, Apart(Apart(Var("X"), Var("Y")), Var("Z"))), Prim(Nat))), WR(App(WriteScope, Apart(Apart(Var("X"), Var("Y")), Var("Z"))), Empty))), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty))))))), dir: Synth, term: Ret(Nat(0)), clas: Ok(Cons(Lift(Prim(Nat)), WR(Empty, Empty))), rule: Ret(Der { ctx: Var(Empty, "put_one", Thk(Empty, ForallIdx("X", NmSet, Tt, ForallIdx("Y", NmSet, Tt, ForallIdx("Z", NmSet, Tt, Cons(Arrow(Prim(Bool), Cons(Arrow(Nm(Apart(Var("X"), Var("Z"))), Cons(Arrow(Nm(Apart(Var("Y"), Var("Z"))), Cons(Lift(Ref(App(WriteScope, Apart(Apart(Var("X"), Var("Y")), Var("Z"))), Prim(Nat))), WR(App(WriteScope, Apart(Apart(Var("X"), Var("Y")), Var("Z"))), Empty))), WR(Empty, Empty))), WR(Empty, Empty))), WR(Empty, Empty))))))), dir: Synth, term: Nat(0), clas: Ok(Prim(Nat)), rule: Nat(0), vis: DerVis { tmfam: "Val", local_err: false } }), vis: DerVis { tmfam: "Exp", local_err: false } }), vis: DerVis { tmfam: "Exp", local_err: false } }, traces: [] }